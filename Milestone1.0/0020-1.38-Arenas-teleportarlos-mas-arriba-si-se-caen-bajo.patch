From 6948016920110259ef668c5332405478bc2f854c Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Sat, 21 Apr 2012 23:11:41 -0500
Subject: [PATCH 20/23] 1.38 Arenas, teleportarlos mas arriba si se caen bajo
 el suelo

---
 src/server/game/Battlegrounds/Battleground.h       |    1 +
 .../game/Battlegrounds/Zones/BattlegroundBE.cpp    |    8 ++++
 .../game/Battlegrounds/Zones/BattlegroundBE.h      |    1 +
 .../game/Battlegrounds/Zones/BattlegroundDS.cpp    |    8 ++++
 .../game/Battlegrounds/Zones/BattlegroundDS.h      |    1 +
 .../game/Battlegrounds/Zones/BattlegroundNA.cpp    |    8 ++++
 .../game/Battlegrounds/Zones/BattlegroundNA.h      |    1 +
 .../game/Battlegrounds/Zones/BattlegroundRL.cpp    |    8 ++++
 .../game/Battlegrounds/Zones/BattlegroundRL.h      |    1 +
 .../game/Battlegrounds/Zones/BattlegroundRV.cpp    |   40 +++++++++++++++++++-
 .../game/Battlegrounds/Zones/BattlegroundRV.h      |    1 +
 src/server/game/Handlers/MovementHandler.cpp       |    8 ++++
 12 files changed, 85 insertions(+), 1 deletions(-)

diff --git a/src/server/game/Battlegrounds/Battleground.h b/src/server/game/Battlegrounds/Battleground.h
index cda80fe..4a950b6 100755
--- a/src/server/game/Battlegrounds/Battleground.h
+++ b/src/server/game/Battlegrounds/Battleground.h
@@ -565,6 +565,7 @@ class Battleground
         const char* GetTrinityString(int32 entry);
 
         virtual bool HandlePlayerUnderMap(Player* /*player*/) { return false; }
+        virtual bool IsPlayerUnderMap(Player* player, float x, float y, float z) {return false; }
 
         // since arenas can be AvA or Hvh, we have to get the "temporary" team of a player
         uint32 GetPlayerTeam(uint64 guid) const;
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundBE.cpp b/src/server/game/Battlegrounds/Zones/BattlegroundBE.cpp
index c7eddbb..d3eead3 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundBE.cpp
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundBE.cpp
@@ -105,6 +105,14 @@ bool BattlegroundBE::HandlePlayerUnderMap(Player* player)
     return true;
 }
 
+bool BattlegroundBE::IsPlayerUnderMap(Player* player, float x, float y, float z)
+{
+    if (z < 0.5)
+        return true;
+    else
+        return false;
+}
+
 void BattlegroundBE::HandleAreaTrigger(Player* Source, uint32 Trigger)
 {
     // this is wrong way to implement these things. On official it done by gameobject spell cast.
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundBE.h b/src/server/game/Battlegrounds/Zones/BattlegroundBE.h
index 8c0df2b..af05f87 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundBE.h
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundBE.h
@@ -66,6 +66,7 @@ class BattlegroundBE : public Battleground
         virtual void FillInitialWorldStates(WorldPacket &d);
         void HandleKillPlayer(Player* player, Player* killer);
         bool HandlePlayerUnderMap(Player* player);
+        bool IsPlayerUnderMap(Player* player, float x, float y, float z);
 
         /* Scorekeeping */
         void UpdatePlayerScore(Player* Source, uint32 type, uint32 value, bool doAddHonor = true);
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp b/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
index ccc6a23..c755786 100644
--- a/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundDS.cpp
@@ -212,6 +212,14 @@ bool BattlegroundDS::HandlePlayerUnderMap(Player* player)
     return true;
 }
 
+bool BattlegroundDS::IsPlayerUnderMap(Player* player, float x, float y, float z)
+{
+    if (z < 3)
+        return true;
+    else
+        return false;
+}
+
 void BattlegroundDS::FillInitialWorldStates(WorldPacket &data)
 {
     data << uint32(3610) << uint32(1);                                              // 9 show
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundDS.h b/src/server/game/Battlegrounds/Zones/BattlegroundDS.h
index aaf08ba..50fea29 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundDS.h
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundDS.h
@@ -105,6 +105,7 @@ class BattlegroundDS : public Battleground
         virtual void FillInitialWorldStates(WorldPacket &d);
         void HandleKillPlayer(Player* player, Player* killer);
         bool HandlePlayerUnderMap(Player* player);
+    bool IsPlayerUnderMap(Player* player, float x, float y, float z);
     private:
         uint32 _waterfallTimer;
         uint8 _waterfallStatus;
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundNA.cpp b/src/server/game/Battlegrounds/Zones/BattlegroundNA.cpp
index 0974c96..52baa10 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundNA.cpp
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundNA.cpp
@@ -102,6 +102,14 @@ bool BattlegroundNA::HandlePlayerUnderMap(Player* player)
     return true;
 }
 
+bool BattlegroundNA::IsPlayerUnderMap(Player* player, float x, float y, float z)
+{
+    if (z < 11)
+        return true;
+    else
+        return false;
+}
+
 void BattlegroundNA::HandleAreaTrigger(Player* Source, uint32 Trigger)
 {
     if (GetStatus() != STATUS_IN_PROGRESS)
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundNA.h b/src/server/game/Battlegrounds/Zones/BattlegroundNA.h
index 53c0faf..20753c3 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundNA.h
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundNA.h
@@ -67,5 +67,6 @@ class BattlegroundNA : public Battleground
         virtual void FillInitialWorldStates(WorldPacket &d);
         void HandleKillPlayer(Player* player, Player* killer);
         bool HandlePlayerUnderMap(Player* player);
+        bool IsPlayerUnderMap(Player* player, float x, float y, float z);
 };
 #endif
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundRL.cpp b/src/server/game/Battlegrounds/Zones/BattlegroundRL.cpp
index 6a62621..5cc0a14 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundRL.cpp
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundRL.cpp
@@ -102,6 +102,14 @@ bool BattlegroundRL::HandlePlayerUnderMap(Player* player)
     return true;
 }
 
+bool BattlegroundRL::IsPlayerUnderMap(Player* player, float x, float y, float z)
+{
+    if (z < 31)
+        return true;
+    else
+        return false;
+}
+
 void BattlegroundRL::HandleAreaTrigger(Player* Source, uint32 Trigger)
 {
     // this is wrong way to implement these things. On official it done by gameobject spell cast.
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundRL.h b/src/server/game/Battlegrounds/Zones/BattlegroundRL.h
index dc041a1..fe38219 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundRL.h
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundRL.h
@@ -63,5 +63,6 @@ class BattlegroundRL : public Battleground
         bool SetupBattleground();
         void HandleKillPlayer(Player* player, Player* killer);
         bool HandlePlayerUnderMap(Player* player);
+        bool IsPlayerUnderMap(Player* player, float x, float y, float z);
 };
 #endif
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundRV.cpp b/src/server/game/Battlegrounds/Zones/BattlegroundRV.cpp
index 6869a89..a7d17ac 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundRV.cpp
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundRV.cpp
@@ -144,10 +144,48 @@ void BattlegroundRV::HandleKillPlayer(Player* player, Player* killer)
 
 bool BattlegroundRV::HandlePlayerUnderMap(Player* player)
 {
-    player->TeleportTo(GetMapId(), 763.5f, -284, 28.276f, 2.422f, false);
+    player->TeleportTo(GetMapId(), 763.5f, -284, 28.277f, 2.422f, false);
     return true;
 }
 
+bool BattlegroundRV::IsPlayerUnderMap(Player* player, float x, float y, float z)
+{
+        bool inCage = false;
+
+        if (z < 28.27)            
+        {
+
+            {
+
+            // starting
+            if (player->HasAura(32727))
+                inCage = true;
+
+            // Going up with the elevator in the western cage
+            else if (x > 755 && x < 771 && y < -265 && y > -282 && z > 2.78)
+                inCage = true;
+
+            // Going up with the elevator in the eastern cage
+            else if (x > 755 && x < 771 && y < -286 && y > -302 && z > 2.78)
+                inCage = true;
+
+            else
+                inCage = false;
+            }
+
+            if (inCage == false)
+                return true;
+
+            else
+                return false;
+
+
+
+        }
+        else
+            return false;
+}
+
 void BattlegroundRV::HandleAreaTrigger(Player* Source, uint32 Trigger)
 {
     if (GetStatus() != STATUS_IN_PROGRESS)
diff --git a/src/server/game/Battlegrounds/Zones/BattlegroundRV.h b/src/server/game/Battlegrounds/Zones/BattlegroundRV.h
index 8c57469..7916c1e 100755
--- a/src/server/game/Battlegrounds/Zones/BattlegroundRV.h
+++ b/src/server/game/Battlegrounds/Zones/BattlegroundRV.h
@@ -116,6 +116,7 @@ class BattlegroundRV : public Battleground
         bool SetupBattleground();
         void HandleKillPlayer(Player* player, Player* killer);
         bool HandlePlayerUnderMap(Player* player);
+    bool IsPlayerUnderMap(Player* player, float x, float y, float z);
 
     private:
         uint32 Timer;
diff --git a/src/server/game/Handlers/MovementHandler.cpp b/src/server/game/Handlers/MovementHandler.cpp
index b3d663e..e4b9c4e 100755
--- a/src/server/game/Handlers/MovementHandler.cpp
+++ b/src/server/game/Handlers/MovementHandler.cpp
@@ -381,6 +381,14 @@ void WorldSession::HandleMovementOpcodes(WorldPacket & recv_data)
                 }
             }
         }
+                // new port up system
+        if (plMover->InBattleground())
+        {
+            if (plMover->GetBattleground()->IsPlayerUnderMap(_player, movementInfo.pos.GetPositionX(), movementInfo.pos.GetPositionY(), movementInfo.pos.GetPositionZ()))
+            {
+                plMover->GetBattleground()->HandlePlayerUnderMap(_player);
+            }
+        }
     }
 }
 
-- 
1.7.8.msysgit.0

