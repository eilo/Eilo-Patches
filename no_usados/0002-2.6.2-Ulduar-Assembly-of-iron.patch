From 0ae3fdca4ea1333b4f1c65349aaf7561bd6ec168 Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Mon, 7 May 2012 11:29:28 -0500
Subject: [PATCH 2/6] 2.6.2 Ulduar: Assembly of iron

---
 .../2012_05_07_100_world_ulduar_assembly.sql       |   37 +
 .../Ulduar/Ulduar/boss_assembly_of_iron.cpp        | 1006 ++++++++++++++------
 2 files changed, 734 insertions(+), 309 deletions(-)
 create mode 100644 sql/updates/world/reanemu/2012_05_07_100_world_ulduar_assembly.sql

diff --git a/sql/updates/world/reanemu/2012_05_07_100_world_ulduar_assembly.sql b/sql/updates/world/reanemu/2012_05_07_100_world_ulduar_assembly.sql
new file mode 100644
index 0000000..7dab777
--- /dev/null
+++ b/sql/updates/world/reanemu/2012_05_07_100_world_ulduar_assembly.sql
@@ -0,0 +1,37 @@
+-- ##########################################################
+-- Assembly of Iron
+-- ##########################################################
+
+-- Limit Supercharge targets
+DELETE FROM `conditions` WHERE `SourceTypeOrReferenceId`=13 AND `SourceEntry`=61920;
+INSERT INTO `conditions` (`SourceTypeOrReferenceId`,`SourceEntry`,`ConditionTypeOrReference`,`ConditionValue1`,`ConditionValue2`) VALUES
+(13,61920,18,1,32857),
+(13,61920,18,1,32867),
+(13,61920,18,1,32927);
+
+-- Lightning Tendrils Visual
+DELETE FROM `spell_linked_spell` WHERE `spell_trigger` IN (61887,63486);
+INSERT INTO `spell_linked_spell` (`spell_trigger`,`spell_effect`,`type`,`comment`) VALUES
+(61887,61883,2, 'Lightning Tendrils - Visual'),
+(63486,61883,2, 'Lightning Tendrils - Visual');
+
+-- Electrical Charge
+DELETE FROM `conditions` WHERE `SourceTypeOrReferenceId`=13 AND `SourceEntry`=61901;
+INSERT INTO `conditions` (`SourceTypeOrReferenceId`,`SourceEntry`,`ConditionTypeOrReference`,`ConditionValue1`,`ConditionValue2`) VALUES
+(13,61901,18,1,32867);
+
+DELETE FROM `spell_script_names` WHERE `spell_id` IN (61911,63495);
+INSERT INTO `spell_script_names` (`spell_id`,`ScriptName`) VALUES
+(61911, 'spell_steelbreaker_static_disruption'),
+(63495, 'spell_steelbreaker_static_disruption');
+
+DELETE FROM `achievement_criteria_data` WHERE `ScriptName`='achievement_cant_do_that_while_stunned';
+INSERT INTO `achievement_criteria_data` (`criteria_id`, `type`, `value1`, `value2`, `ScriptName`) VALUES
+(10090,11,0,0,'achievement_cant_do_that_while_stunned'),
+(10422,11,0,0,'achievement_cant_do_that_while_stunned'),
+(10423,11,0,0,'achievement_cant_do_that_while_stunned'),
+(10091,11,0,0,'achievement_cant_do_that_while_stunned'),
+(10424,11,0,0,'achievement_cant_do_that_while_stunned'),
+(10425,11,0,0,'achievement_cant_do_that_while_stunned');
+
+DELETE FROM `disables` WHERE `sourceType`=4 AND `entry` IN (10090,10422,10423,10091,10424,10425);
\ No newline at end of file
diff --git a/src/server/scripts/Northrend/Ulduar/Ulduar/boss_assembly_of_iron.cpp b/src/server/scripts/Northrend/Ulduar/Ulduar/boss_assembly_of_iron.cpp
index 0967c38..ff352d3 100644
--- a/src/server/scripts/Northrend/Ulduar/Ulduar/boss_assembly_of_iron.cpp
+++ b/src/server/scripts/Northrend/Ulduar/Ulduar/boss_assembly_of_iron.cpp
@@ -15,91 +15,87 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
-/* ScriptData
-SDName: Assembly of Iron encounter
-SD%Complete: 60%
-SDComment: Runes need DB support, chain lightning won't cast, supercharge won't cast (target error?) - it worked before during debugging.
-SDCategory: Ulduar - Ulduar
-EndScriptData */
-
 #include "ScriptMgr.h"
 #include "ScriptedCreature.h"
 #include "SpellScript.h"
 #include "SpellAuraEffects.h"
 #include "ulduar.h"
 
-enum AssemblySpells
+enum Spells
 {
-    // General
-    SPELL_SUPERCHARGE                            = 61920,
-    SPELL_BERSERK                                = 47008, // Hard enrage, don't know the correct ID.
+    // Any boss
+    SPELL_SUPERCHARGE                   = 61920,
+    SPELL_BERSERK                       = 47008, // Hard enrage, don't know the correct ID.
+    SPELL_CREDIT_MARKER                 = 65195, // spell_dbc
+    SPELL_IRON_BOOT_FLASK               = 58501,
 
     // Steelbreaker
-    SPELL_HIGH_VOLTAGE                           = 61890,
-    SPELL_FUSION_PUNCH                           = 61903,
-    SPELL_STATIC_DISRUPTION                      = 44008,
-    SPELL_OVERWHELMING_POWER                     = 64637,
-    SPELL_ELECTRICAL_CHARGE                      = 61902,
+    SPELL_HIGH_VOLTAGE                  = 61890,
+    SPELL_HIGH_VOLTAGE_H                = 63498,
+    SPELL_FUSION_PUNCH                  = 61903,
+    SPELL_FUSION_PUNCH_H                = 63493,
+    SPELL_STATIC_DISRUPTION             = 61911,
+    SPELL_STATIC_DISRUPTION_H           = 63495,
+    SPELL_OVERWHELMING_POWER_H          = 61888,
+    SPELL_OVERWHELMING_POWER            = 64637,
+    SPELL_MELTDOWN                      = 61889,
+    SPELL_ELECTRICAL_CHARGE             = 61900,
+    SPELL_ELECTRICAL_CHARGE_TRIGGER     = 61901,
+    SPELL_ELECTRICAL_CHARGE_TRIGGERED   = 61902,
 
     // Runemaster Molgeim
-    SPELL_SHIELD_OF_RUNES                        = 62274,
-    SPELL_SHIELD_OF_RUNES_BUFF                   = 62277,
-    SPELL_SUMMON_RUNE_OF_POWER                   = 63513,
-    SPELL_RUNE_OF_POWER                          = 61974,
-    SPELL_RUNE_OF_DEATH                          = 62269,
-    SPELL_RUNE_OF_SUMMONING                      = 62273, // This is the spell that summons the rune
-    SPELL_RUNE_OF_SUMMONING_VIS                  = 62019, // Visual
-    SPELL_RUNE_OF_SUMMONING_SUMMON               = 62020, // Spell that summons
-    SPELL_LIGHTNING_ELEMENTAL_PASSIVE            = 62052,
+    SPELL_SHIELD_OF_RUNES               = 62274,
+    SPELL_SHIELD_OF_RUNES_BUFF          = 62277,
+    SPELL_SHIELD_OF_RUNES_H             = 63489,
+    SPELL_SHIELD_OF_RUNES_H_BUFF        = 63967,
+    SPELL_SUMMON_RUNE_OF_POWER          = 63513,
+    SPELL_RUNE_OF_POWER                 = 61974,
+    SPELL_RUNE_OF_DEATH                 = 62269,
+    SPELL_RUNE_OF_SUMMONING             = 62273, // This is the spell that summons the rune
+    SPELL_RUNE_OF_SUMMONING_VIS         = 62019, // Visual
+    SPELL_RUNE_OF_SUMMONING_SUMMON      = 62020, // Spell that summons
+    SPELL_LIGHTNING_BLAST_10            = 62054,
+    SPELL_LIGHTNING_BLAST_25            = 63491,
 
     // Stormcaller Brundir
-    SPELL_CHAIN_LIGHTNING                        = 61879,
-    SPELL_OVERLOAD                               = 61869,
-    SPELL_LIGHTNING_WHIRL                        = 61915,
-    SPELL_LIGHTNING_TENDRILS_10M                 = 61887,
-    SPELL_LIGHTNING_TENDRILS_25M                 = 63486,
-    SPELL_LIGHTNING_TENDRILS_VISUAL              = 61883,
-    SPELL_STORMSHIELD                            = 64187,
+    SPELL_CHAIN_LIGHTNING               = 61879,
+    SPELL_CHAIN_LIGHTNING_H             = 63479,
+    SPELL_OVERLOAD                      = 61869,
+    SPELL_OVERLOAD_H                    = 63481,
+    SPELL_LIGHTNING_WHIRL               = 61915,
+    SPELL_LIGHTNING_WHIRL_H             = 63483,
+    SPELL_LIGHTNING_WHIRL_DMG           = 61916,
+    SPELL_LIGHTNING_WHIRL_DMG_H         = 63482,
+    SPELL_LIGHTNING_TENDRILS            = 61887,
+    SPELL_LIGHTNING_TENDRILS_H          = 63486,
+    SPELL_STORMSHIELD                   = 64187
 };
 
-enum AssemblyEvents
+enum Events
 {
-    // General
-    EVENT_BERSERK                                = 1,
-
+    EVENT_UPDATEPHASE = 1,
+    EVENT_ENRAGE,
     // Steelbreaker
-    EVENT_FUSION_PUNCH                           = 2,
-    EVENT_STATIC_DISRUPTION                      = 3,
-    EVENT_OVERWHELMING_POWER                     = 4,
-
+    EVENT_FUSION_PUNCH,
+    EVENT_STATIC_DISRUPTION,
+    EVENT_OVERWHELMING_POWER,
     // Molgeim
-    EVENT_RUNE_OF_POWER                          = 5,
-    EVENT_SHIELD_OF_RUNES                        = 6,
-    EVENT_RUNE_OF_DEATH                          = 7,
-    EVENT_RUNE_OF_SUMMONING                      = 8,
-    EVENT_LIGHTNING_BLAST                        = 9,
-
+    EVENT_RUNE_OF_POWER,
+    EVENT_SHIELD_OF_RUNES,
+    EVENT_RUNE_OF_DEATH,
+    EVENT_RUNE_OF_SUMMONING,
+    EVENT_LIGHTNING_BLAST,
     // Brundir
-    EVENT_CHAIN_LIGHTNING                        = 10,
-    EVENT_OVERLOAD                               = 11,
-    EVENT_LIGHTNING_WHIRL                        = 12,
-    EVENT_LIGHTNING_TENDRILS                     = 13,
-    EVENT_FLIGHT                                 = 14,
-    EVENT_ENDFLIGHT                              = 15,
-    EVENT_GROUND                                 = 16,
-    EVENT_LAND                                   = 17,
-    EVENT_MOVE_POSITION                          = 18,
-};
-
-enum AssemblyActions
-{
-    ACTION_STEELBREAKER                          = 0,
-    ACTION_MOLGEIM                               = 1,
-    ACTION_BRUNDIR                               = 2,
-    ACTION_ADD_CHARGE                            = 3,
+    EVENT_CHAIN_LIGHTNING,
+    EVENT_OVERLOAD,
+    EVENT_LIGHTNING_WHIRL,
+    EVENT_LIGHTNING_TENDRILS_START,
+    EVENT_LIGHTNING_TENDRILS_END,
+    EVENT_THREAT_WIPE,
+    EVENT_STORMSHIELD,
 };
 
-enum AssemblyYells
+enum Yells
 {
     SAY_STEELBREAKER_AGGRO                      = -1603020,
     SAY_STEELBREAKER_SLAY_1                     = -1603021,
@@ -128,18 +124,24 @@ enum AssemblyYells
     SAY_BRUNDIR_BERSERK                         = -1603047,
 };
 
-enum AssemblyNPCs
+enum MovePoints
+{
+    POINT_FLY = 1,
+    POINT_LAND,
+    POINT_CHASE
+};
+
+enum Data
 {
-    NPC_WORLD_TRIGGER                            = 22515,
+    DATA_I_CHOOSE_YOU = 1,
+    DATA_CANT_DO_THAT
 };
 
-#define EMOTE_OVERLOAD                           "Stormcaller Brundir begins to Overload!" // Move it to DB
-#define FLOOR_Z                                  427.28f
-#define FINAL_FLIGHT_Z                           435.0f
+#define EMOTE_OVERLOAD "Stormcaller Brundir begins to Overload!"
 
 bool IsEncounterComplete(InstanceScript* instance, Creature* me)
 {
-    if (!instance || !me)
+   if (!instance || !me)
         return false;
 
     for (uint8 i = 0; i < 3; ++i)
@@ -148,7 +150,7 @@ bool IsEncounterComplete(InstanceScript* instance, Creature* me)
         if (!guid)
             return false;
 
-        if (Creature* boss = ObjectAccessor::GetCreature(*me, guid))
+        if (Creature* boss = Unit::GetCreature(*me, guid))
         {
             if (boss->isAlive())
                 return false;
@@ -156,7 +158,6 @@ bool IsEncounterComplete(InstanceScript* instance, Creature* me)
         else
             return false;
     }
-
     return true;
 }
 
@@ -168,7 +169,7 @@ void RespawnEncounter(InstanceScript* instance, Creature* me)
         if (!guid)
             continue;
 
-        if (Creature* boss = ObjectAccessor::GetCreature(*me, guid))
+        if (Creature* boss = Unit::GetCreature(*me, guid))
         {
             if (!boss->isAlive())
             {
@@ -192,11 +193,26 @@ void StartEncounter(InstanceScript* instance, Creature* me, Unit* /*target*/)
         if (!guid)
             continue;
 
-        if (Creature* boss = ObjectAccessor::GetCreature(*me, guid))
+        if (Creature* boss = Unit::GetCreature(*me, guid))
             boss->SetInCombatWithZone();
     }
 }
 
+bool UpdateSupercharge(Creature* target)
+{
+    if (Aura* supercharge = target->GetAura(SPELL_SUPERCHARGE))
+    {
+        supercharge->ModStackAmount(1);
+        if (UnitAI* AI = target->GetAI())
+        {
+            AI->DoAction(EVENT_UPDATEPHASE);
+            return true;
+        }
+    }
+
+    return false;
+}
+
 class boss_steelbreaker : public CreatureScript
 {
     public:
@@ -204,76 +220,154 @@ class boss_steelbreaker : public CreatureScript
 
         struct boss_steelbreakerAI : public BossAI
         {
-            boss_steelbreakerAI(Creature* creature) : BossAI(creature, BOSS_ASSEMBLY_OF_IRON)
+            boss_steelbreakerAI(Creature* c) : BossAI(c, BOSS_ASSEMBLY_OF_IRON)
             {
-                instance = me->GetInstanceScript();
             }
 
-            InstanceScript* instance;
-            uint32 phase;
-
             void Reset()
             {
                 _Reset();
-                phase = 0;
+                _phase = 0;
                 me->RemoveAllAuras();
-                RespawnEncounter(instance, me);
+                me->RemoveLootMode(LOOT_MODE_DEFAULT);
+                if (instance)
+                    RespawnEncounter(instance, me);
             }
 
             void EnterCombat(Unit* who)
             {
+                me->setActive(true);
                 StartEncounter(instance, me, who);
                 DoScriptText(SAY_STEELBREAKER_AGGRO, me);
                 DoZoneInCombat();
-                DoCast(me, SPELL_HIGH_VOLTAGE);
-                events.SetPhase(++phase);
-                events.ScheduleEvent(EVENT_BERSERK, 900000);
+                DoCast(me, RAID_MODE(SPELL_HIGH_VOLTAGE, SPELL_HIGH_VOLTAGE_H));
+                events.ScheduleEvent(EVENT_ENRAGE, 900000);
                 events.ScheduleEvent(EVENT_FUSION_PUNCH, 15000);
+                DoAction(EVENT_UPDATEPHASE);
+            }
+
+            uint32 GetData(uint32 type)
+            {
+                if (type == DATA_I_CHOOSE_YOU)
+                    return (_phase >= 3) ? 1 : 0;
+
+                return 0;
             }
 
             void DoAction(int32 const action)
             {
                 switch (action)
                 {
-                    case ACTION_STEELBREAKER:
-                        me->SetHealth(me->GetMaxHealth());
-                        me->AddAura(SPELL_SUPERCHARGE, me);
-                        events.SetPhase(++phase);
-                        events.RescheduleEvent(EVENT_FUSION_PUNCH, 15000);
-                        if (phase >= 2)
-                            events.RescheduleEvent(EVENT_STATIC_DISRUPTION, 30000);
-                        if (phase >= 3)
-                            events.RescheduleEvent(EVENT_OVERWHELMING_POWER, urand(2000, 5000));
-                        break;
-                    case ACTION_ADD_CHARGE:
-                        DoCast(me, SPELL_ELECTRICAL_CHARGE, true);
-                        break;
+                    case EVENT_UPDATEPHASE:
+                        events.SetPhase(++_phase);
+                        if (_phase == 2)
+                            events.ScheduleEvent(EVENT_STATIC_DISRUPTION, 30000);
+                        if (_phase == 3)
+                        {
+                            me->ResetLootMode();
+                            DoCast(me, SPELL_ELECTRICAL_CHARGE, true);
+                            events.ScheduleEvent(EVENT_OVERWHELMING_POWER, 3000);
+                        }
+                    break;
+                }
+            }
+
+            void DamageTaken(Unit* /*attacker*/, uint32 &damage)
+            {
+                if (damage >= me->GetHealth())
+                {
+                    bool has_supercharge = false;
+
+                    if (Creature* Brundir = Unit::GetCreature(*me, instance ? instance->GetData64(BOSS_BRUNDIR) : 0))
+                    {
+                        if (Brundir->isAlive())
+                        {
+                            Brundir->SetFullHealth();
+                            has_supercharge = UpdateSupercharge(Brundir);
+                        }
+                    }
+
+                    if (Creature* Molgeim = Unit::GetCreature(*me, instance ? instance->GetData64(BOSS_MOLGEIM) : 0))
+                    {
+                        if (Molgeim->isAlive())
+                        {
+                            Molgeim->SetFullHealth();
+                            has_supercharge = UpdateSupercharge(Molgeim);
+                        }
+                    }
+
+                    if (!has_supercharge)
+                        DoCast(me, SPELL_SUPERCHARGE, true);
                 }
             }
 
             void JustDied(Unit* /*killer*/)
             {
                 DoScriptText(RAND(SAY_STEELBREAKER_DEATH_1, SAY_STEELBREAKER_DEATH_2), me);
-                if (IsEncounterComplete(instance, me))
-                    instance->SetData(BOSS_ASSEMBLY_OF_IRON, DONE);
-                else
-                    me->SetLootRecipient(NULL);
+                if (IsEncounterComplete(instance, me) && instance)
+                {
+                    _JustDied();
+                    instance->DoUpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_BE_SPELL_TARGET, SPELL_CREDIT_MARKER);
+                }
+            }
 
-                if (Creature* Brundir = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_BRUNDIR)))
-                    if (Brundir->isAlive())
-                        Brundir->AI()->DoAction(ACTION_BRUNDIR);
+            void KilledUnit(Unit* who)
+            {
+                DoScriptText(RAND(SAY_STEELBREAKER_SLAY_1, SAY_STEELBREAKER_SLAY_2), me);
+            }
 
-                if (Creature* Molgeim = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_MOLGEIM)))
-                    if (Molgeim->isAlive())
-                        Molgeim->AI()->DoAction(ACTION_MOLGEIM);
+            void SpellHit(Unit* /*from*/, SpellInfo const* spell)
+            {
+                switch (spell->Id)
+                {
+                    case SPELL_SUPERCHARGE:
+                        DoAction(EVENT_UPDATEPHASE);
+                        break;
+                    case SPELL_ELECTRICAL_CHARGE_TRIGGERED:
+                        if (!me->isInCombat())
+                            me->RemoveAurasDueToSpell(SPELL_ELECTRICAL_CHARGE_TRIGGERED);
+                        break;
+                }
             }
 
-            void KilledUnit(Unit* /*who*/)
+            void SpellHitTarget(Unit* target, SpellInfo const* spell)
             {
-                DoScriptText(RAND(SAY_STEELBREAKER_SLAY_1, SAY_STEELBREAKER_SLAY_2), me);
+                if (spell->Id == SPELL_MELTDOWN && target && target->ToCreature())
+                    target->CastSpell(me, SPELL_ELECTRICAL_CHARGE_TRIGGER, true);
+            }
+
+            // try to prefer ranged targets
+            Unit* GetDisruptionTarget()
+            {
+                Map* map = me->GetMap();
+                if (map && map->IsDungeon())
+                {
+                    std::list<Player*> playerList;
+                    Map::PlayerList const& Players = map->GetPlayers();
+                    for (Map::PlayerList::const_iterator itr = Players.begin(); itr != Players.end(); ++itr)
+                    {
+                        if (Player* player = itr->getSource())
+                        {
+                            if (player->isDead() || player->isGameMaster())
+                                continue;
+
+                            float Distance = player->GetDistance(me->GetPositionX(), me->GetPositionY(), me->GetPositionZ());
+                            if (Distance < 15.0f || Distance > 100.0f)
+                                continue;
 
-                if (phase == 3)
-                    DoCast(me, SPELL_ELECTRICAL_CHARGE);
+                            playerList.push_back(player);
+                        }
+                    }
+
+                    if (playerList.empty())
+                        return NULL;
+
+                    std::list<Player*>::const_iterator itr = playerList.begin();
+                    std::advance(itr, urand(0, playerList.size() - 1));
+                    return *itr;
+                }
+                else
+                    return NULL;
             }
 
             void UpdateAI(uint32 const diff)
@@ -282,6 +376,7 @@ class boss_steelbreaker : public CreatureScript
                     return;
 
                 events.Update(diff);
+                _DoAggroPulse(diff);
 
                 if (me->HasUnitState(UNIT_STATE_CASTING))
                     return;
@@ -290,36 +385,116 @@ class boss_steelbreaker : public CreatureScript
                 {
                     switch (eventId)
                     {
-                        case EVENT_BERSERK:
+                        case EVENT_ENRAGE:
                             DoScriptText(SAY_STEELBREAKER_BERSERK, me);
                             DoCast(SPELL_BERSERK);
-                            events.CancelEvent(EVENT_BERSERK);
                             break;
                         case EVENT_FUSION_PUNCH:
-                            if (me->IsWithinMeleeRange(me->getVictim()))
-                                DoCastVictim(SPELL_FUSION_PUNCH);
+                            DoCastVictim(RAID_MODE<uint32>(SPELL_FUSION_PUNCH, SPELL_FUSION_PUNCH_H));
                             events.ScheduleEvent(EVENT_FUSION_PUNCH, urand(13000, 22000));
                             break;
                         case EVENT_STATIC_DISRUPTION:
-                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
-                                DoCast(target, SPELL_STATIC_DISRUPTION);
-                            events.ScheduleEvent(EVENT_STATIC_DISRUPTION, urand(20000, 40000));
+                        {
+                            Unit* target = GetDisruptionTarget();
+                            if (!target)
+                                target = SelectTarget(SELECT_TARGET_RANDOM, 0, 100.0f, true);
+                            if (target)
+                                DoCast(target, RAID_MODE<uint32>(SPELL_STATIC_DISRUPTION, SPELL_STATIC_DISRUPTION_H));
+                            events.ScheduleEvent(EVENT_STATIC_DISRUPTION, 20000);
                             break;
+                        }
                         case EVENT_OVERWHELMING_POWER:
-                            DoScriptText(SAY_STEELBREAKER_POWER, me);
-                            DoCastVictim(SPELL_OVERWHELMING_POWER);
-                            events.ScheduleEvent(EVENT_OVERWHELMING_POWER, RAID_MODE(60000, 35000));
+                            if (me->getVictim() && !me->getVictim()->HasAura(RAID_MODE<uint32>(SPELL_OVERWHELMING_POWER, SPELL_OVERWHELMING_POWER_H)))
+                            {
+                                DoScriptText(SAY_STEELBREAKER_POWER, me);
+                                DoCastVictim(RAID_MODE<uint32>(SPELL_OVERWHELMING_POWER, SPELL_OVERWHELMING_POWER_H));
+                            }
+                            events.ScheduleEvent(EVENT_OVERWHELMING_POWER, 2000);
                             break;
                     }
                 }
 
                 DoMeleeAttackIfReady();
             }
+
+        private:
+            uint32 _phase;
         };
 
         CreatureAI* GetAI(Creature* creature) const
         {
-            return GetUlduarAI<boss_steelbreakerAI>(creature);
+            return new boss_steelbreakerAI(creature);
+        }
+};
+
+class spell_steelbreaker_static_disruption : public SpellScriptLoader
+{
+    public:
+        spell_steelbreaker_static_disruption() : SpellScriptLoader("spell_steelbreaker_static_disruption") { }
+
+        class spell_steelbreaker_static_disruption_SpellScript : public SpellScript
+        {
+            PrepareSpellScript(spell_steelbreaker_static_disruption_SpellScript);
+
+            bool Validate(SpellInfo const* /*spell*/)
+            {
+                if (!sSpellMgr->GetSpellInfo(61912))
+                    return false;
+                if (!sSpellMgr->GetSpellInfo(63494))
+                    return false;
+                return true;
+            }
+
+            void HandleTriggerMissile(SpellEffIndex effIndex)
+            {
+                PreventHitDefaultEffect(effIndex);
+                Unit* caster = GetCaster();
+                Unit* target = GetTargetUnit();
+                if (caster && target)
+                {
+                    uint32 id = uint32(caster->GetMap()->GetDifficulty() == RAID_DIFFICULTY_10MAN_NORMAL ? 61912 : 63494);
+                    caster->CastSpell(target, id, true);
+                }
+            }
+
+            void Register()
+            {
+                OnEffectHitTarget += SpellEffectFn(spell_steelbreaker_static_disruption_SpellScript::HandleTriggerMissile, EFFECT_0, SPELL_EFFECT_TRIGGER_MISSILE);
+            }
+        };
+
+        SpellScript* GetSpellScript() const
+        {
+            return new spell_steelbreaker_static_disruption_SpellScript();
+        }
+};
+
+class spell_steelbreaker_electrical_charge : public SpellScriptLoader
+{
+    public:
+        spell_steelbreaker_electrical_charge() : SpellScriptLoader("spell_steelbreaker_electrical_charge") { }
+
+        class spell_steelbreaker_electrical_charge_AuraScript : public AuraScript
+        {
+            PrepareAuraScript(spell_steelbreaker_electrical_charge_AuraScript);
+
+            void OnRemove(AuraEffect const* /*aurEff*/, AuraEffectHandleModes /*mode*/)
+            {
+                Unit* target = GetTarget();
+                Unit* caster = GetCaster();
+                if (target && target->ToPlayer() && caster && GetTargetApplication()->GetRemoveMode() == AURA_REMOVE_BY_DEATH)
+                    target->CastSpell(caster, GetSpellInfo()->Effects[EFFECT_0].CalcValue(), true);
+            }
+
+            void Register()
+            {
+                AfterEffectRemove += AuraEffectRemoveFn(spell_steelbreaker_electrical_charge_AuraScript::OnRemove, EFFECT_0, SPELL_AURA_DUMMY, AURA_EFFECT_HANDLE_REAL);
+            }
+        };
+
+        AuraScript* GetAuraScript() const
+        {
+            return new spell_steelbreaker_electrical_charge_AuraScript();
         }
 };
 
@@ -330,66 +505,99 @@ class boss_runemaster_molgeim : public CreatureScript
 
         struct boss_runemaster_molgeimAI : public BossAI
         {
-            boss_runemaster_molgeimAI(Creature* creature) : BossAI(creature, BOSS_ASSEMBLY_OF_IRON)
+            boss_runemaster_molgeimAI(Creature* c) : BossAI(c, BOSS_ASSEMBLY_OF_IRON)
             {
-                instance = me->GetInstanceScript();
             }
 
-            InstanceScript* instance;
-            uint32 phase;
-
             void Reset()
             {
                 _Reset();
-                phase = 0;
+                _phase = 0;
                 me->RemoveAllAuras();
-                RespawnEncounter(instance, me);
+                me->RemoveLootMode(LOOT_MODE_DEFAULT);
+                if (instance)
+                    RespawnEncounter(instance, me);
             }
 
             void EnterCombat(Unit* who)
             {
+                me->setActive(true);
                 StartEncounter(instance, me, who);
                 DoScriptText(SAY_MOLGEIM_AGGRO, me);
                 DoZoneInCombat();
-                events.SetPhase(++phase);
-                events.ScheduleEvent(EVENT_BERSERK, 900000);
-                events.ScheduleEvent(EVENT_SHIELD_OF_RUNES, 30000);
-                events.ScheduleEvent(EVENT_RUNE_OF_POWER, 20000);
+                events.ScheduleEvent(EVENT_ENRAGE, 900000);
+                events.ScheduleEvent(EVENT_SHIELD_OF_RUNES, 27000);
+                events.ScheduleEvent(EVENT_RUNE_OF_POWER, 60000);
+                DoAction(EVENT_UPDATEPHASE);
+            }
+
+            uint32 GetData(uint32 type)
+            {
+                if (type == DATA_I_CHOOSE_YOU)
+                    return (_phase >= 3) ? 1 : 0;
+
+                return 0;
             }
 
             void DoAction(int32 const action)
             {
                 switch (action)
                 {
-                    case ACTION_MOLGEIM:
-                        me->SetHealth(me->GetMaxHealth());
-                        me->AddAura(SPELL_SUPERCHARGE, me);
-                        events.SetPhase(++phase);
-                        events.RescheduleEvent(EVENT_SHIELD_OF_RUNES, 27000);
-                        events.RescheduleEvent(EVENT_RUNE_OF_POWER, 25000);
-                        if (phase >= 2)
-                            events.RescheduleEvent(EVENT_RUNE_OF_DEATH, 30000);
-                        if (phase >= 3)
-                            events.RescheduleEvent(EVENT_RUNE_OF_SUMMONING, urand(20000, 30000));
+                    case EVENT_UPDATEPHASE:
+                        events.SetPhase(++_phase);
+                        if (_phase == 2)
+                            events.ScheduleEvent(EVENT_RUNE_OF_DEATH, 30000);
+                        if (_phase == 3)
+                        {
+                            me->ResetLootMode();
+                            events.ScheduleEvent(EVENT_RUNE_OF_SUMMONING, urand(20000, 30000));
+                        }
                     break;
                 }
             }
 
+            void DamageTaken(Unit* /*attacker*/, uint32 &damage)
+            {
+                if (damage >= me->GetHealth())
+                {
+                    bool has_supercharge = false;
+
+                    if (Creature* Steelbreaker = Unit::GetCreature(*me, instance ? instance->GetData64(BOSS_STEELBREAKER) : 0))
+                    {
+                        if (Steelbreaker->isAlive())
+                        {
+                            Steelbreaker->SetFullHealth();
+                            has_supercharge = UpdateSupercharge(Steelbreaker);
+                        }
+                    }
+
+                    if (Creature* Brundir = Unit::GetCreature((*me), instance ? instance->GetData64(BOSS_BRUNDIR) : 0))
+                    {
+                        if (Brundir->isAlive())
+                        {
+                            Brundir->SetFullHealth();
+                            has_supercharge = UpdateSupercharge(Brundir);
+                        }
+                    }
+
+                    if (!has_supercharge)
+                        DoCast(me, SPELL_SUPERCHARGE, true);
+                }
+            }
+
             void JustDied(Unit* /*killer*/)
             {
                 DoScriptText(RAND(SAY_MOLGEIM_DEATH_1, SAY_MOLGEIM_DEATH_2), me);
-                if (IsEncounterComplete(instance, me))
-                    instance->SetData(BOSS_ASSEMBLY_OF_IRON, DONE);
-                else
-                    me->SetLootRecipient(NULL);
-
-                if (Creature* Brundir = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_BRUNDIR)))
-                    if (Brundir->isAlive())
-                        Brundir->AI()->DoAction(ACTION_BRUNDIR);
+                if (IsEncounterComplete(instance, me) && instance)
+                {
+                    _JustDied();
+                    instance->DoUpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_BE_SPELL_TARGET, SPELL_CREDIT_MARKER);
+                }
+            }
 
-                if (Creature* Steelbreaker = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_STEELBREAKER)))
-                    if (Steelbreaker->isAlive())
-                        Steelbreaker->AI()->DoAction(ACTION_STEELBREAKER);
+            void JustSummoned(Creature* summon)
+            {
+                summons.Summon(summon);
             }
 
             void KilledUnit(Unit* /*who*/)
@@ -397,12 +605,19 @@ class boss_runemaster_molgeim : public CreatureScript
                 DoScriptText(RAND(SAY_MOLGEIM_SLAY_1, SAY_MOLGEIM_SLAY_2), me);
             }
 
+            void SpellHit(Unit* /*from*/, SpellInfo const* spell)
+            {
+                if (spell->Id == SPELL_SUPERCHARGE)
+                    DoAction(EVENT_UPDATEPHASE);
+            }
+
             void UpdateAI(uint32 const diff)
             {
                 if (!UpdateVictim())
                     return;
 
                 events.Update(diff);
+                _DoAggroPulse(diff);
 
                 if (me->HasUnitState(UNIT_STATE_CASTING))
                     return;
@@ -411,60 +626,48 @@ class boss_runemaster_molgeim : public CreatureScript
                 {
                     switch (eventId)
                     {
-                        case EVENT_BERSERK:
+                        case EVENT_ENRAGE:
                             DoScriptText(SAY_MOLGEIM_BERSERK, me);
                             DoCast(SPELL_BERSERK);
-                            events.CancelEvent(EVENT_BERSERK);
                             break;
                         case EVENT_RUNE_OF_POWER:
                         {
-                            Unit* target = NULL;
-                            switch (urand(0, 2))
-                            {
-                                case 0:
-                                    target = me;
-                                    break;
-                                case 1:
-                                    if (Creature* Steelbreaker = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_STEELBREAKER)))
-                                        if (Steelbreaker->isAlive())
-                                            target = Steelbreaker;
-                                    break;
-                                case 2:
-                                    if (Creature* Brundir = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_STEELBREAKER)))
-                                        if (Brundir->isAlive())
-                                            target = Brundir;
-                                    break;
-                            }
+                            Unit* target = DoSelectLowestHpFriendly(60);
+                            if (!target || !target->isAlive())
+                                target = me;
                             DoCast(target, SPELL_SUMMON_RUNE_OF_POWER);
                             events.ScheduleEvent(EVENT_RUNE_OF_POWER, 60000);
                             break;
                         }
                         case EVENT_SHIELD_OF_RUNES:
-                            DoCast(me, SPELL_SHIELD_OF_RUNES);
+                            DoCast(me, RAID_MODE(SPELL_SHIELD_OF_RUNES, SPELL_SHIELD_OF_RUNES_H));
                             events.ScheduleEvent(EVENT_SHIELD_OF_RUNES, urand(27000, 34000));
                             break;
                         case EVENT_RUNE_OF_DEATH:
                             DoScriptText(SAY_MOLGEIM_RUNE_DEATH, me);
-                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM))
                                 DoCast(target, SPELL_RUNE_OF_DEATH);
                             events.ScheduleEvent(EVENT_RUNE_OF_DEATH, urand(30000, 40000));
                             break;
                         case EVENT_RUNE_OF_SUMMONING:
                             DoScriptText(SAY_MOLGEIM_SUMMON, me);
-                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM))
                                 DoCast(target, SPELL_RUNE_OF_SUMMONING);
-                            events.ScheduleEvent(EVENT_RUNE_OF_SUMMONING, urand(30000, 45000));
+                            events.ScheduleEvent(EVENT_RUNE_OF_SUMMONING, urand(35000, 45000));
                             break;
                     }
                 }
 
                 DoMeleeAttackIfReady();
             }
+
+        private:
+            uint32 _phase;
         };
 
         CreatureAI* GetAI(Creature* creature) const
         {
-            return GetUlduarAI<boss_runemaster_molgeimAI>(creature);
+            return new boss_runemaster_molgeimAI(creature);
         }
 };
 
@@ -473,23 +676,23 @@ class mob_rune_of_power : public CreatureScript
     public:
         mob_rune_of_power() : CreatureScript("mob_rune_of_power") { }
 
+        CreatureAI* GetAI(Creature* creature) const
+        {
+            return new mob_rune_of_powerAI(creature);
+        }
+
         struct mob_rune_of_powerAI : public ScriptedAI
         {
-            mob_rune_of_powerAI(Creature* creature) : ScriptedAI(creature)
+            mob_rune_of_powerAI(Creature* c) : ScriptedAI(c)
             {
+                me->SetInCombatWithZone();
                 me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
                 me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
                 me->setFaction(16); // Same faction as bosses
                 DoCast(SPELL_RUNE_OF_POWER);
-
                 me->DespawnOrUnsummon(60000);
             }
         };
-
-        CreatureAI* GetAI(Creature* creature) const
-        {
-            return new mob_rune_of_powerAI(creature);
-        }
 };
 
 class mob_lightning_elemental : public CreatureScript
@@ -499,13 +702,37 @@ class mob_lightning_elemental : public CreatureScript
 
         struct mob_lightning_elementalAI : public ScriptedAI
         {
-            mob_lightning_elementalAI(Creature* creature) : ScriptedAI(creature)
+            mob_lightning_elementalAI(Creature* c) : ScriptedAI(c)
+            {
+                _Casted = false;
+                SetVictim();
+            }
+
+            void SetVictim()
             {
                 me->SetInCombatWithZone();
-                me->AddAura(SPELL_LIGHTNING_ELEMENTAL_PASSIVE, me);
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM))
+                {
+                    me->AddThreat(target, 99999.9f);
+                    AttackStart(target);
+                }
+            }
+
+            void UpdateAI(uint32 const /*diff*/)
+            {
+                if (!UpdateVictim())
+                    return;
+
+                if (me->IsWithinMeleeRange(me->getVictim()) && !_Casted)
+                {
+                    me->CastSpell(me, RAID_MODE(SPELL_LIGHTNING_BLAST_10, SPELL_LIGHTNING_BLAST_25), true);
+                    me->ForcedDespawn(500);
+                    _Casted = true;
+                }
             }
 
-            // Nothing to do here, just let the creature chase players and procflags == 2 on the applied aura will trigger explosion
+        private:
+            bool _Casted;
         };
 
         CreatureAI* GetAI(Creature* creature) const
@@ -521,32 +748,41 @@ class mob_rune_of_summoning : public CreatureScript
 
         struct mob_rune_of_summoningAI : public ScriptedAI
         {
-            mob_rune_of_summoningAI(Creature* creature) : ScriptedAI(creature)
+            mob_rune_of_summoningAI(Creature* c) : ScriptedAI(c)
             {
+                _summonCount = 0;
+                _summonTimer = 5000;
+                _instance = c->GetInstanceScript();
                 me->AddAura(SPELL_RUNE_OF_SUMMONING_VIS, me);
-                summonCount = 0;
-                summonTimer = 2000;
             }
 
-            uint32 summonCount;
-            uint32 summonTimer;
-
-            void UpdateAI(uint32 const diff)
+            void JustSummoned(Creature* summon)
             {
-                if (summonTimer <= diff)
-                    SummonLightningElemental();
-                else
-                    summonTimer -= diff;
+                if (Creature* Molgeim = Unit::GetCreature(*me, _instance ? _instance->GetData64(BOSS_MOLGEIM) : 0))
+                    Molgeim->AI()->JustSummoned(summon);
             }
 
             void SummonLightningElemental()
             {
                 me->CastSpell(me, SPELL_RUNE_OF_SUMMONING_SUMMON, false);
-                if (++summonCount == 10)                        // TODO: Find out if this amount is right
+                if (++_summonCount == 10)
                     me->DespawnOrUnsummon();
                 else
-                    summonTimer = 2000;                         // TODO: Find out of timer is right
+                    _summonTimer = 2000;
+            }
+
+            void UpdateAI(uint32 const diff)
+            {
+                if (_summonTimer <= diff)
+                    SummonLightningElemental();
+                else
+                    _summonTimer -= diff;
             }
+
+        private:
+            InstanceScript* _instance;
+            uint32 _summonCount;
+            uint32 _summonTimer;
         };
 
         CreatureAI* GetAI(Creature* creature) const
@@ -562,79 +798,141 @@ class boss_stormcaller_brundir : public CreatureScript
 
         struct boss_stormcaller_brundirAI : public BossAI
         {
-            boss_stormcaller_brundirAI(Creature* creature) : BossAI(creature, BOSS_ASSEMBLY_OF_IRON)
+            boss_stormcaller_brundirAI(Creature* c) : BossAI(c, BOSS_ASSEMBLY_OF_IRON)
             {
-                instance = me->GetInstanceScript();
             }
 
-            InstanceScript* instance;
-            uint32 phase;
-
             void Reset()
             {
                 _Reset();
-                phase = 0;
+                _phase = 0;
+                _forceLand = false;
+                _couldNotDoThat = true;
                 me->RemoveAllAuras();
-                me->SetDisableGravity(false);
-                me->ApplySpellImmune(0, IMMUNITY_MECHANIC, MECHANIC_INTERRUPT, false);  // Should be interruptable unless overridden by spell (Overload)
-                me->ApplySpellImmune(0, IMMUNITY_MECHANIC, MECHANIC_STUN, false);   // Reset immumity, Brundir should be stunnable by default
-                RespawnEncounter(instance, me);
+                me->RemoveLootMode(LOOT_MODE_DEFAULT);
+                me->ApplySpellImmune(0, IMMUNITY_MECHANIC, MECHANIC_STUN, false);
+                if (instance)
+                    RespawnEncounter(instance, me);
+
+                me->SetSpeed(MOVE_RUN, 1.42857f);
+                if (me->HasUnitMovementFlag(MOVEMENTFLAG_DISABLE_GRAVITY))
+                {
+                    me->RemoveUnitMovementFlag(MOVEMENTFLAG_DISABLE_GRAVITY);
+                    me->SendMovementFlagUpdate();
+                }
             }
 
             void EnterCombat(Unit* who)
             {
+                me->setActive(true);
                 StartEncounter(instance, me, who);
                 DoScriptText(SAY_BRUNDIR_AGGRO, me);
                 DoZoneInCombat();
-                events.SetPhase(++phase);
-                events.ScheduleEvent(EVENT_MOVE_POSITION, 1000);
-                events.ScheduleEvent(EVENT_BERSERK, 900000);
-                events.ScheduleEvent(EVENT_CHAIN_LIGHTNING, 4000);
-                events.ScheduleEvent(EVENT_OVERLOAD, urand(60000, 120000));
+                events.ScheduleEvent(EVENT_ENRAGE, 900000);
+                events.ScheduleEvent(EVENT_CHAIN_LIGHTNING, urand(9000, 17000), 1);
+                events.ScheduleEvent(EVENT_OVERLOAD, urand(60000, 80000), 1);
+                DoAction(EVENT_UPDATEPHASE);
+            }
+
+            uint32 GetData(uint32 type)
+            {
+                switch (type)
+                {
+                    case DATA_I_CHOOSE_YOU:
+                        return (_phase >= 3) ? 1 : 0;
+                    case DATA_CANT_DO_THAT:
+                        return _couldNotDoThat ? 1 : 0;
+                }
+
+                return 0;
+            }
+
+            void SpellHitTarget(Unit* /*target*/, SpellInfo const* spell)
+            {
+                switch (spell->Id)
+                {
+                    case SPELL_CHAIN_LIGHTNING:
+                    case SPELL_CHAIN_LIGHTNING_H:
+                    case SPELL_LIGHTNING_WHIRL_DMG:
+                    case SPELL_LIGHTNING_WHIRL_DMG_H:
+                        _couldNotDoThat = false;
+                        break;
+                }
             }
 
             void DoAction(int32 const action)
             {
                 switch (action)
                 {
-                    case ACTION_BRUNDIR:
-                        me->SetHealth(me->GetMaxHealth());
-                        me->AddAura(SPELL_SUPERCHARGE, me);
-                        events.SetPhase(++phase);
-                        events.RescheduleEvent(EVENT_CHAIN_LIGHTNING, urand(7000, 12000));
-                        events.RescheduleEvent(EVENT_OVERLOAD, urand(40000, 50000));
-                        if (phase >= 2)
-                            events.RescheduleEvent(EVENT_LIGHTNING_WHIRL, urand(15000, 250000));
-                        if (phase >= 3)
+                    case EVENT_UPDATEPHASE:
+                        events.SetPhase(++_phase);
+                        if (_phase == 2)
+                            events.ScheduleEvent(EVENT_LIGHTNING_WHIRL, urand(20000, 40000), 1);
+                        if (_phase == 3)
                         {
-                            DoCast(me, SPELL_STORMSHIELD);
-                            events.RescheduleEvent(EVENT_LIGHTNING_TENDRILS, urand(50000, 60000));
-                            me->ApplySpellImmune(0, IMMUNITY_MECHANIC, MECHANIC_STUN, true);    // Apply immumity to stuns
+                            me->ResetLootMode();
+                            me->ApplySpellImmune(0, IMMUNITY_MECHANIC, MECHANIC_STUN, true);
+                            DoCast(me, SPELL_STORMSHIELD, true);
+                            events.ScheduleEvent(EVENT_LIGHTNING_TENDRILS_START, urand(40000, 80000));
                         }
                     break;
 
                 }
             }
 
-            void JustDied(Unit* /*killer*/)
+            void DamageTaken(Unit* /*attacker*/, uint32 &damage)
             {
-                DoScriptText(RAND(SAY_BRUNDIR_DEATH_1, SAY_BRUNDIR_DEATH_2), me);
-                if (IsEncounterComplete(instance, me))
-                    instance->SetData(BOSS_ASSEMBLY_OF_IRON, DONE);
-                else
-                    me->SetLootRecipient(NULL);
+                if (damage >= me->GetHealth())
+                {
+                    // do not die flying
+                    if (me->HasUnitMovementFlag(MOVEMENTFLAG_DISABLE_GRAVITY))
+                    {
+                        damage = me->GetHealth() - 1;
 
-            if (Creature* Molgeim = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_MOLGEIM)))
-                if (Molgeim->isAlive())
-                    Molgeim->AI()->DoAction(ACTION_MOLGEIM);
+                        if (!_forceLand)
+                        {
+                            me->GetMotionMaster()->MovePoint(POINT_LAND, me->GetPositionX(), me->GetPositionY(), 427.28f);
+                            me->RemoveAurasDueToSpell(RAID_MODE(SPELL_LIGHTNING_TENDRILS, SPELL_LIGHTNING_TENDRILS_H));
+                            events.CancelEvent(EVENT_LIGHTNING_TENDRILS_END);
+                            events.CancelEvent(EVENT_THREAT_WIPE);
+                            _forceLand = true;
+                        }
+                        return;
+                    }
 
-            if (Creature* Steelbreaker = ObjectAccessor::GetCreature(*me, instance->GetData64(BOSS_STEELBREAKER)))
-                if (Steelbreaker->isAlive())
-                    Steelbreaker->AI()->DoAction(ACTION_STEELBREAKER);
+                    bool has_supercharge = false;
 
-                // Prevent to have Brundir somewhere in the air when he die in Air phase
-                if (me->GetPositionZ() > FLOOR_Z)
-                    me->GetMotionMaster()->MoveFall();
+                    if (Creature* Steelbreaker = Unit::GetCreature(*me, instance ? instance->GetData64(BOSS_STEELBREAKER) : 0))
+                    {
+                        if (Steelbreaker->isAlive())
+                        {
+                            Steelbreaker->SetFullHealth();
+                            has_supercharge = UpdateSupercharge(Steelbreaker);
+                        }
+                    }
+
+                    if (Creature* Molgeim = Unit::GetCreature(*me, instance ? instance->GetData64(BOSS_MOLGEIM) : 0))
+                    {
+                        if (Molgeim->isAlive())
+                        {
+                            Molgeim->SetFullHealth();
+                            has_supercharge = UpdateSupercharge(Molgeim);
+                        }
+                    }
+
+                    if (!has_supercharge)
+                        DoCast(me, SPELL_SUPERCHARGE, true);
+                }
+            }
+
+            void JustDied(Unit* /*killer*/)
+            {
+                DoScriptText(RAND(SAY_BRUNDIR_DEATH_1, SAY_BRUNDIR_DEATH_2), me);
+                if (IsEncounterComplete(instance, me) && instance)
+                {
+                    _JustDied();
+                    instance->DoUpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_BE_SPELL_TARGET, SPELL_CREDIT_MARKER);
+                }
             }
 
             void KilledUnit(Unit* /*who*/)
@@ -642,12 +940,54 @@ class boss_stormcaller_brundir : public CreatureScript
                 DoScriptText(RAND(SAY_BRUNDIR_SLAY_1, SAY_BRUNDIR_SLAY_2), me);
             }
 
+            void SpellHit(Unit* /*from*/, SpellInfo const* spell)
+            {
+                if (spell->Id == SPELL_SUPERCHARGE)
+                    DoAction(EVENT_UPDATEPHASE);
+            }
+
+            void MovementInform(uint32 type, uint32 id)
+            {
+                if (type != POINT_MOTION_TYPE)
+                    return;
+
+                switch (id)
+                {
+                    case POINT_FLY:
+                    {
+                        DoCast(RAID_MODE(SPELL_LIGHTNING_TENDRILS, SPELL_LIGHTNING_TENDRILS_H));
+                        events.ScheduleEvent(EVENT_LIGHTNING_TENDRILS_END, 30000);
+                        events.ScheduleEvent(EVENT_THREAT_WIPE, 0);
+                        break;
+                    }
+                    case POINT_LAND:
+                    {
+                        me->SetReactState(REACT_AGGRESSIVE);
+                        me->ApplySpellImmune(0, IMMUNITY_STATE, SPELL_AURA_MOD_TAUNT, false);
+                        me->ApplySpellImmune(0, IMMUNITY_EFFECT, SPELL_EFFECT_ATTACK_ME, false);
+                        me->SetSpeed(MOVE_RUN, 1.42857f);
+                        me->RemoveUnitMovementFlag(MOVEMENTFLAG_DISABLE_GRAVITY);
+                        me->SendMovementFlagUpdate();
+                        if (me->getVictim())
+                            me->GetMotionMaster()->MoveChase(me->getVictim());
+                        break;
+                    }
+                    case POINT_CHASE:
+                    {
+                        if (Unit* target = me->getVictim())
+                            me->GetMotionMaster()->MovePoint(POINT_CHASE, target->GetPositionX(), target->GetPositionY(), 435.0f);
+                        break;
+                    }
+                }
+            }
+
             void UpdateAI(uint32 const diff)
             {
                 if (!UpdateVictim())
                     return;
 
                 events.Update(diff);
+                _DoAggroPulse(diff);
 
                 if (me->HasUnitState(UNIT_STATE_CASTING))
                     return;
@@ -656,90 +996,66 @@ class boss_stormcaller_brundir : public CreatureScript
                 {
                     switch (eventId)
                     {
-                        case EVENT_BERSERK:
+                        case EVENT_ENRAGE:
                             DoScriptText(SAY_BRUNDIR_BERSERK, me);
                             DoCast(SPELL_BERSERK);
-                            events.CancelEvent(EVENT_BERSERK);
                             break;
                         case EVENT_CHAIN_LIGHTNING:
-                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
-                                DoCast(target, SPELL_CHAIN_LIGHTNING);
-                            events.ScheduleEvent(EVENT_CHAIN_LIGHTNING, urand(7000, 10000));
+                            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM))
+                                DoCast(target, RAID_MODE(SPELL_CHAIN_LIGHTNING, SPELL_CHAIN_LIGHTNING_H));
+                            events.ScheduleEvent(EVENT_CHAIN_LIGHTNING, urand(3000, 5000), 1);
                             break;
                         case EVENT_OVERLOAD:
-                            me->MonsterTextEmote(EMOTE_OVERLOAD, 0, true);
-                            DoScriptText(SAY_BRUNDIR_SPECIAL, me);
-                            DoCast(SPELL_OVERLOAD);
-                            events.ScheduleEvent(EVENT_OVERLOAD, urand(60000, 120000));
+                            if (!me->HasUnitState(UNIT_STATE_STUNNED))
+                                me->MonsterTextEmote(EMOTE_OVERLOAD, 0, true);
+                            DoCast(RAID_MODE(SPELL_OVERLOAD, SPELL_OVERLOAD_H));
+                            events.ScheduleEvent(EVENT_OVERLOAD, urand(60000, 80000), 1);
                             break;
                         case EVENT_LIGHTNING_WHIRL:
-                            DoCast(SPELL_LIGHTNING_WHIRL);
-                            events.ScheduleEvent(EVENT_LIGHTNING_WHIRL, urand(15000, 20000));
-                            break;
-                        case EVENT_LIGHTNING_TENDRILS:
-                            DoScriptText(SAY_BRUNDIR_FLIGHT, me);
-                            DoCast(RAID_MODE(SPELL_LIGHTNING_TENDRILS_10M, SPELL_LIGHTNING_TENDRILS_25M));
-                            DoCast(SPELL_LIGHTNING_TENDRILS_VISUAL);
-                            me->AttackStop();
-                            //me->SetLevitate(true);
-                            me->GetMotionMaster()->Initialize();
-                            me->GetMotionMaster()->MovePoint(0, me->GetPositionX(), me->GetPositionY(), FINAL_FLIGHT_Z);
-                            events.DelayEvents(35000);
-                            events.ScheduleEvent(EVENT_FLIGHT, 2500);
-                            events.ScheduleEvent(EVENT_ENDFLIGHT, 32500);
-                            events.ScheduleEvent(EVENT_LIGHTNING_TENDRILS, 90000);
+                            DoCast(RAID_MODE(SPELL_LIGHTNING_WHIRL, SPELL_LIGHTNING_WHIRL_H));
+                            events.ScheduleEvent(EVENT_LIGHTNING_WHIRL, urand(20000, 40000), 1);
                             break;
-                        case EVENT_FLIGHT:
+                        case EVENT_THREAT_WIPE:
+                            DoResetThreat();
                             if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
-                                me->GetMotionMaster()->MovePoint(0, target->GetPositionX(), target->GetPositionY(), FINAL_FLIGHT_Z);
-                            events.ScheduleEvent(EVENT_FLIGHT, 6000);
-                            break;
-                        case EVENT_ENDFLIGHT:
-                            me->GetMotionMaster()->Initialize();
-                            me->GetMotionMaster()->MovePoint(0, 1586.920166f, 119.848984f, FINAL_FLIGHT_Z);
-                            events.CancelEvent(EVENT_FLIGHT);
-                            events.CancelEvent(EVENT_ENDFLIGHT);
-                            events.ScheduleEvent(EVENT_LAND, 4000);
-                            break;
-                        case EVENT_LAND:
-                            me->GetMotionMaster()->Initialize();
-                            me->GetMotionMaster()->MovePoint(0, me->GetPositionX(), me->GetPositionY(), FLOOR_Z);
-                            events.CancelEvent(EVENT_LAND);
-                            events.ScheduleEvent(EVENT_GROUND, 2500);
-                            break;
-                        case EVENT_GROUND:
-                            //me->SetLevitate(false);
-                            me->RemoveAurasDueToSpell(RAID_MODE(SPELL_LIGHTNING_TENDRILS_10M, SPELL_LIGHTNING_TENDRILS_25M));
-                            me->RemoveAurasDueToSpell(SPELL_LIGHTNING_TENDRILS_VISUAL);
-                            DoStartMovement(me->getVictim());
-                            events.CancelEvent(EVENT_GROUND);
-                            me->getThreatManager().resetAllAggro();
-                            break;
-                        case EVENT_MOVE_POSITION:
-                            if (me->IsWithinMeleeRange(me->getVictim()))
                             {
-                                float x = float(irand(-25, 25));
-                                float y = float(irand(-25, 25));
-                                me->GetMotionMaster()->MovePoint(0, me->GetPositionX() + x, me->GetPositionY() + y, FLOOR_Z);
-                                // Prevention to go outside the room or into the walls
-                                if (Creature* trigger = me->FindNearestCreature(NPC_WORLD_TRIGGER, 100.0f, true))
-                                    if (me->GetDistance(trigger) >= 50.0f)
-                                        me->GetMotionMaster()->MovePoint(0, trigger->GetPositionX(), trigger->GetPositionY(), FLOOR_Z);
+                                me->AddThreat(target, 99999.9f);
+                                me->GetMotionMaster()->MovePoint(POINT_CHASE, target->GetPositionX(), target->GetPositionY(), 435.0f);
                             }
-                            events.ScheduleEvent(EVENT_MOVE_POSITION, urand(7500, 10000));
+                            events.ScheduleEvent(EVENT_THREAT_WIPE, 5000);
+                            break;
+                        case EVENT_LIGHTNING_TENDRILS_START:
+                            me->SetSpeed(MOVE_RUN, 0.7f);
+                            me->SetReactState(REACT_PASSIVE);
+                            me->ApplySpellImmune(0, IMMUNITY_STATE, SPELL_AURA_MOD_TAUNT, true);
+                            me->ApplySpellImmune(0, IMMUNITY_EFFECT, SPELL_EFFECT_ATTACK_ME, true);
+                            me->AddUnitMovementFlag(MOVEMENTFLAG_DISABLE_GRAVITY);
+                            me->SendMovementFlagUpdate();
+                            me->GetMotionMaster()->MovePoint(POINT_FLY, me->GetPositionX(), me->GetPositionY(), 435.0f);
+                            events.DelayEvents(35000, 1);
                             break;
-                        default:
+                        case EVENT_LIGHTNING_TENDRILS_END:
+                            me->GetMotionMaster()->MovePoint(POINT_LAND, me->GetPositionX(), me->GetPositionY(), 427.28f);
+                            me->RemoveAurasDueToSpell(RAID_MODE(SPELL_LIGHTNING_TENDRILS, SPELL_LIGHTNING_TENDRILS_H));
+                            events.ScheduleEvent(EVENT_LIGHTNING_TENDRILS_START, urand(40000, 80000));
+                            events.CancelEvent(EVENT_THREAT_WIPE);
                             break;
                     }
                 }
 
-                DoMeleeAttackIfReady();
+                if (!me->HasAura(RAID_MODE(SPELL_LIGHTNING_TENDRILS, SPELL_LIGHTNING_TENDRILS_H)))
+                    DoMeleeAttackIfReady();
             }
+
+        private:
+            uint32 _phase;
+            bool _forceLand;
+            bool _couldNotDoThat;
         };
 
         CreatureAI* GetAI(Creature* creature) const
         {
-            return GetUlduarAI<boss_stormcaller_brundirAI>(creature);
+            return new boss_stormcaller_brundirAI(creature);
         }
 };
 
@@ -752,16 +1068,20 @@ class spell_shield_of_runes : public SpellScriptLoader
         {
             PrepareAuraScript(spell_shield_of_runes_AuraScript);
 
-            void OnRemove(AuraEffect const* /*aurEff*/, AuraEffectHandleModes /*mode*/)
+            void OnAbsorb(AuraEffect* /*aurEff*/, DamageInfo& dmgInfo, uint32& absorbAmount)
             {
+                uint32 damage = dmgInfo.GetDamage();
+
+                if (absorbAmount > damage)
+                    return;
+
                 if (Unit* caster = GetCaster())
-                    if (GetTargetApplication()->GetRemoveMode() != AURA_REMOVE_BY_EXPIRE)
-                        caster->CastSpell(caster, SPELL_SHIELD_OF_RUNES_BUFF, false);
+                    caster->CastSpell(caster, SPELL_SHIELD_OF_RUNES_BUFF, true);
             }
 
             void Register()
             {
-                 AfterEffectRemove += AuraEffectRemoveFn(spell_shield_of_runes_AuraScript::OnRemove, EFFECT_0, SPELL_AURA_SCHOOL_ABSORB, AURA_EFFECT_HANDLE_REAL);
+                OnEffectAbsorb += AuraEffectAbsorbFn(spell_shield_of_runes_AuraScript::OnAbsorb, EFFECT_0);
             }
         };
 
@@ -799,9 +1119,74 @@ class spell_assembly_meltdown : public SpellScriptLoader
         }
 };
 
+class achievement_i_choose_you : public AchievementCriteriaScript
+{
+    public:
+        achievement_i_choose_you() : AchievementCriteriaScript("achievement_i_choose_you")
+        {
+        }
+
+        bool OnCheck(Player* /*player*/, Unit* target)
+        {
+            if (!target)
+                return false;
+
+            if (Creature* boss = target->ToCreature())
+                if (boss->AI()->GetData(DATA_I_CHOOSE_YOU))
+                    return true;
+
+            return false;
+        }
+};
+
+class achievement_but_i_am_on_your_side : public AchievementCriteriaScript
+{
+    public:
+        achievement_but_i_am_on_your_side() : AchievementCriteriaScript("achievement_but_i_am_on_your_side")
+        {
+        }
+
+        bool OnCheck(Player* player, Unit* target)
+        {
+            if (!target || !player)
+                return false;
+
+            if (Creature* boss = target->ToCreature())
+                if (boss->AI()->GetData(DATA_I_CHOOSE_YOU) && player->HasAura(SPELL_IRON_BOOT_FLASK))
+                    return true;
+
+            return false;
+        }
+};
+
+class achievement_cant_do_that_while_stunned : public AchievementCriteriaScript
+{
+    public:
+        achievement_cant_do_that_while_stunned() : AchievementCriteriaScript("achievement_cant_do_that_while_stunned")
+        {
+        }
+
+        bool OnCheck(Player* /*player*/, Unit* target)
+        {
+            if (!target)
+                return false;
+
+            if (Creature* boss = target->ToCreature())
+                if (boss->AI()->GetData(DATA_I_CHOOSE_YOU))
+                    if (InstanceScript* instance = boss->GetInstanceScript())
+                        if (Creature* brundir = ObjectAccessor::GetCreature(*boss, instance->GetData64(BOSS_BRUNDIR)))
+                            if (brundir->AI()->GetData(DATA_CANT_DO_THAT))
+                                return true;
+
+            return false;
+        }
+};
+
 void AddSC_boss_assembly_of_iron()
 {
     new boss_steelbreaker();
+    new spell_steelbreaker_static_disruption();
+    new spell_steelbreaker_electrical_charge();
     new boss_runemaster_molgeim();
     new boss_stormcaller_brundir();
     new mob_lightning_elemental();
@@ -809,4 +1194,7 @@ void AddSC_boss_assembly_of_iron()
     new mob_rune_of_power();
     new spell_shield_of_runes();
     new spell_assembly_meltdown();
+    new achievement_i_choose_you();
+    new achievement_but_i_am_on_your_side();
+    new achievement_cant_do_that_while_stunned();
 }
-- 
1.7.8.msysgit.0

