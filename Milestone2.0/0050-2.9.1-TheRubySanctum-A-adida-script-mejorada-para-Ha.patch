From 63dd11d057370b3f92b9d94dca04a43fc1a632fa Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Mon, 5 Mar 2012 11:49:37 -0500
Subject: [PATCH 50/70] =?UTF-8?q?2.9.1=20TheRubySanctum:=20A=C3=B1adida=20sc?=
 =?UTF-8?q?ript=20mejorada=20para=20Halion=20y=20trashmobs?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../reanemu/2011_12_27_100_world_ruby_sanctum.sql  |  336 ++++
 src/server/game/Scripting/ScriptLoader.cpp         |    4 +-
 src/server/scripts/Northrend/CMakeLists.txt        |    2 +-
 .../RubySanctum/boss_baltharus_the_warborn.cpp     |  750 ++++++---
 .../RubySanctum/boss_general_zarithrian.cpp        |  413 ++---
 .../ChamberOfAspects/RubySanctum/boss_halion.cpp   | 1833 ++++++++++++++++++++
 .../RubySanctum/boss_saviana_ragefire.cpp          |  522 ++++--
 .../RubySanctum/instance_ruby_sanctum.cpp          |  926 ++++++++---
 .../ChamberOfAspects/RubySanctum/ruby_sanctum.h    |  168 +--
 9 files changed, 3935 insertions(+), 1019 deletions(-)
 create mode 100644 sql/updates/world/reanemu/2011_12_27_100_world_ruby_sanctum.sql
 create mode 100644 src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_halion.cpp

diff --git a/sql/updates/world/reanemu/2011_12_27_100_world_ruby_sanctum.sql b/sql/updates/world/reanemu/2011_12_27_100_world_ruby_sanctum.sql
new file mode 100644
index 0000000..11b88d1
--- /dev/null
+++ b/sql/updates/world/reanemu/2011_12_27_100_world_ruby_sanctum.sql
@@ -0,0 +1,336 @@
+-- ------------- Script name Instance fix Eilo ----------------
+-- ------------------------------------------------------------
+UPDATE `instance_template` SET `Script`='instance_ruby_sanctum' WHERE `map`=724;
+-- -------------- Script name Npcs fix ws ---------------------
+-- ------------------------------------------------------------
+UPDATE `creature_template` SET `ScriptName`='npc_convocadora_carboescala' WHERE `entry`=40417;
+UPDATE `creature_template` SET `ScriptName`='npc_acometedor_carboescala' WHERE `entry`=40419;
+UPDATE `creature_template` SET `ScriptName`='npc_elite_carboescala'  WHERE `entry`=40421;
+UPDATE `creature_template` SET `ScriptName`='npc_comandante_carboescala'  WHERE `entry`=40423;
+UPDATE `creature_template` SET `ScriptName`='boss_halion_real'  WHERE `entry`=39751;
+UPDATE `creature_template` SET `ScriptName`='mob_baltharus_clone'  WHERE `entry`=39899;
+UPDATE `creature_template` SET `ScriptName`='mob_xerestrasza'  WHERE `entry`=40429;
+UPDATE `creature_template` SET `ScriptName`='boss_halion_twilight'  WHERE `entry`=40142;
+UPDATE `creature_template` SET `ScriptName`='mob_halion_meteor'  WHERE `entry`=40029;
+UPDATE `creature_template` SET `ScriptName`='mob_halion_flame'  WHERE `entry`=40041;
+UPDATE `creature_template` SET `ScriptName`='mob_halion_orb'  WHERE `entry`=40083;
+UPDATE `creature_template` SET `ScriptName`='mob_halion_control'  WHERE `entry`=40146;
+UPDATE `creature_template` SET `ScriptName`='mob_orb_rotation_focus'  WHERE `entry`=40091;
+UPDATE `creature_template` SET `ScriptName`='mob_orb_carrier'  WHERE `entry`=40081;
+UPDATE `creature_template` SET `ScriptName`='mob_soul_consumption'  WHERE `entry`=40135;
+UPDATE `creature_template` SET `ScriptName`='mob_fiery_combustion'  WHERE `entry`=40001;
+UPDATE `creature_template` SET `ScriptName`='boss_ragefire'  WHERE `entry`=39747;
+UPDATE `creature_template` SET `ScriptName`='boss_zarithrian'  WHERE `entry`=39746;
+UPDATE `creature_template` SET `ScriptName`='mob_flamecaller_ruby'  WHERE `entry`=39814;
+UPDATE `creature_template` SET `ScriptName`='boss_baltharus' WHERE `entry`=39751;
+-- ---------------- Respawn Npcs fix Eilo ---------------------
+-- ------------------------------------------------------------
+-- Bosses
+UPDATE `creature` SET `spawntimesecs`=604800 WHERE `id` IN (39751,39746,39747);
+-- Trash mobs
+UPDATE `creature` SET `spawntimesecs`=1209600 WHERE `map`=724 AND `id` NOT IN (39751,39746,39747);
+-- --------- Dragones fin evento (custom) fix ws --------------
+-- ------------------------------------------------------------
+REPLACE INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`) VALUES
+(3470008, 0, 0, 0, 0, 0, 2718, 0, 0, 0, 'Ruby Dragon', 'WS-CORE', 'WS-CORE', 0, 80, 80, 0, 2010, 2010, 0, 3, 3, 1.4, 0, 420, 630, 0, 158, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 2, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 378.538, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 'npc_D_ws2', 0);
+-- --------- Script name objetos fix ws -----------------------
+-- ------------------------------------------------------------
+UPDATE `gameobject_template` SET `data10` = 74807, `faction` = '0', `ScriptName` = 'go_halion_portal_twilight' WHERE `gameobject_template`.`entry` IN (202794,202795);
+UPDATE `gameobject_template` SET `faction` = '0', `ScriptName` = 'go_halion_portal_real' WHERE `gameobject_template`.`entry` IN (202796);
+-- --------- Spell script de rubi fix ws ----------------------
+-- ------------------------------------------------------------
+-- spell_halion_fiery_combustion 74562
+DELETE FROM `spell_script_names` WHERE `spell_id`=74562 AND `ScriptName`='spell_halion_fiery_combustion';
+INSERT INTO `spell_script_names` (`spell_id`, `ScriptName`) VALUES (74562,'spell_halion_fiery_combustion');
+-- spell_halion_soul_consumption 74792
+DELETE FROM `spell_script_names` WHERE `spell_id`=74792 AND `ScriptName`='spell_halion_soul_consumption';
+INSERT INTO `spell_script_names` (`spell_id`, `ScriptName`) VALUES (74792,'spell_halion_soul_consumption');
+-- spell_twilight_cutter 74768
+DELETE FROM `spell_script_names` WHERE `spell_id`=74768 AND `ScriptName`='spell_twilight_cutter';
+INSERT INTO `spell_script_names` (`spell_id`, `ScriptName`) VALUES (74768,'spell_twilight_cutter');
+-- ---------- Ws core Traduccion de Rubi event ---------------
+-- -------- Textos añadidos por Eilo y retoques --------------
+-- -----------------------------------------------------------
+replace into `script_texts`(`npc_entry`,`entry`,`content_default`,`content_loc1`,`content_loc2`,`content_loc3`,`content_loc4`,`content_loc5`,`content_loc6`,`content_loc7`,`content_loc8`,`sound`,`type`,`language`,`emote`,`comment`) values
+(40429,-1666000,'Help! I am trapped within this tree! I require aid!',NULL,NULL,NULL,NULL,NULL,'Ayuda estoy atrapada dentro del arbol! ayudadme!',NULL,NULL,17490,6,0,0,'SAY_XERESTRASZA_YELL_1'),
+(40429,-1666001,'Thank you! I could have not held out for much longer. A terrible thing has happened here.',NULL,NULL,NULL,NULL,NULL,'Gracias no podia aguantar mucho mas! Aqui ha sucedido algo terrible!',NULL,NULL,17491,0,0,0,'SAY_XERESTRASZA_YELL_2'),
+(40429,-1666002,'We believed that the Sanctum was well fortified, but we were not prepareted for the nature of this assault.',NULL,NULL,NULL,NULL,NULL,'creiamos que el sagrario estaba bien protegido, pero no estabamos preparado para un ataque como este',NULL,NULL,17492,0,0,0,'SAY_XERESTRASZA_SAY_1'),
+(40429,-1666003,'The Black Dragonkin materialized from thin air, and set upon us before we could react.',NULL,NULL,NULL,NULL,NULL,'Los dragoneantes negros aparecieron de la nada y atacaron antes de que pudieramos reaccionar.',NULL,NULL,17493,0,0,0,'SAY_XERESTRASZA_SAY_2'),
+(40429,-1666004,'We did not stand a chance. As my brethren perished around me, I managed to retreat here and bar the entrance.',NULL,NULL,NULL,NULL,NULL,'La defensa fue inutil! Mientras mis hermanos morian consegui retirarme aqui y bloquear la entrada',NULL,NULL,17494,0,0,0,'SAY_XERESTRASZA_SAY_3'),
+(40429,-1666005,'They slaughtered us with cold efficiency, but the true focus of their interest seemed to be the eggs kept here in the sanctum.',NULL,NULL,NULL,NULL,NULL,'Fue una masacre calculada y eficaz pero su verdadero objetivo eran los huevos que guardamos en el sagrario.',NULL,NULL,17495,0,0,0,'SAY_XERESTRASZA_SAY_4'),
+(40429,-1666006,'The commander of the forces on the ground here is a cruel brute named Zarithrian. But I fear there are greater powers at work.',NULL,NULL,NULL,NULL,NULL,'El comandante de las fuerzas terrestre es un bruto cruel llamado Zarithrian, pero me temo que hay implicados poderes mayores',NULL,NULL,17496,0,0,0,'SAY_XERESTRASZA_SAY_5'),
+(40429,-1666007,'In their initial assault I caught a glimpse of their true leader, a fearsome full-grown Twilight Dragon.',NULL,NULL,NULL,NULL,NULL,'En el ataque inicial, pude ver a su verdadero lider, un temible dragon crepuscular adulto.',NULL,NULL,17497,0,0,0,'SAY_XERESTRASZA_SAY_6'),
+(40429,-1666008,'I know not the extent of their plans heroes, but I know this: they cannot be allowed to succeed!',NULL,NULL,NULL,NULL,NULL,'No conozco todos sus planes heroes pero se, que no debemos permitir que tengan exito.',NULL,NULL,17498,0,0,0,'SAY_XERESTRASZA_SAY_7'),
+(39863,-1666100,'Meddlesome insects, you\'re too late! The Ruby Sanctum is lost.',NULL,NULL,NULL,NULL,NULL,'Insectos entrometidos... llegais tarde... el sagrario rubi esta perdido.',NULL,NULL,17499,6,0,0,'SAY_HALION_SPAWN'),
+(39863,-1666101,'Your world teeters on the brink of annihilation. You will all bear witness to the coming of a new age of destruction!',NULL,NULL,NULL,NULL,NULL,'Vuestro mundo esta al borde de la aniquilacion. todos sereis testigo de la llegada de una nueva era de destruccion!',NULL,NULL,17500,6,0,0,'SAY_HALION_AGGRO'),
+(39863,-1666102,'Another hero falls.',NULL,NULL,NULL,NULL,NULL,'Cae... otro... heroe!',NULL,NULL,17501,6,0,0,'SAY_HALION_SLAY_1'),
+(39863,-1666103,'Ha Ha Ha!',NULL,NULL,NULL,NULL,NULL,'jajajajaja...',NULL,NULL,17502,6,0,0,'SAY_HALION_SLAY_2'),
+(39863,-1666104,'Relish this victory mortals, for it will be your last. This world will burn with the Master\'s return!',NULL,NULL,NULL,NULL,NULL,'Disfrutad la victoria mortales por que sera la ultima. este mundo ardera cuando vuelva el maestro.',NULL,NULL,17503,6,0,0,'SAY_HALION_DEATH'),
+(39863,-1666105,'Not good enough!',NULL,NULL,NULL,NULL,NULL,'No es suficiente.',NULL,NULL,17504,6,0,0,'SAY_HALION_BERSERK'),
+(39863,-1666106,'The heavens burn!',NULL,NULL,NULL,NULL,NULL,'Los cielos arden.',NULL,NULL,17505,6,0,0,'SAY_HALION_SPECIAL_1'),
+(39863,-1666107,'Beware the shadow!',NULL,NULL,NULL,NULL,NULL,'Temed la sombra.',NULL,NULL,17506,6,0,0,'SAY_HALION_SPECIAL_2'),
+(39863,-1666108,'You will find only suffering within the realm of Twilight. Enter if you dare.',NULL,NULL,NULL,NULL,NULL,'En el reino del crepusculo solo encontrareis sufrimiento. Entrad si os atreveis.',NULL,NULL,17507,6,0,0,'SAY_HALION_PHASE_2'),
+(39863,-1666109,'I am the light AND the darkness! Cower mortals before the Herald of Deathwing!',NULL,NULL,NULL,NULL,NULL,'Yo soy la luz y la oscuridad. Temed mortales la llegada de Alamuerte.',NULL,NULL,17508,6,0,0,'SAY_HALION_PHASE_3'),
+(39863,-1666110,'The orbiting spheres pulse with dark energy!',NULL,NULL,NULL,NULL,NULL,'Los orbes rotan pulsando energia oscura!',NULL,NULL,0,3,0,0,''),
+(39863,-1666111,'Your efforts have forced Halion further into the Physical realm!',NULL,NULL,NULL,NULL,NULL,'Tus esfuerzos han enviado a Halion al reino fisico!',NULL,NULL,0,3,0,0,''),
+(39863,-1666112,'Your efforts have forced Halion further into the Twilight realm!',NULL,NULL,NULL,NULL,NULL,'Tus esfuerzos han enviado a Halion al reino crepuscular!',NULL,NULL,0,3,0,0,''),
+(39863,-1666113,'Without pressure in both realms, Halion begins to regenerate.',NULL,NULL,NULL,NULL,NULL,'Sin presion en ambos reinos, Halion restaurara vitalidad.',NULL,NULL,0,3,0,0,''),
+(39746,-1666200,'Alexstrasza has chosen capable allies. A pity that I must end you!',NULL,NULL,NULL,NULL,NULL,'Alexstrasza sabe elegir bien a sus aliados. Lastima tener que mataros.',NULL,NULL,17512,6,0,0,'SAY_ZARITHRIAN_AGGRO'),
+(39746,-1666201,'You thought you stood a chance?',NULL,NULL,NULL,NULL,NULL,'¿Pensabas sobrevivir?',NULL,NULL,17513,6,0,0,'SAY_ZARITHRIAN_SLAY_1'),
+(39746,-1666202,'It\'s for the best.',NULL,NULL,NULL,NULL,NULL,'Es por tu bien...',NULL,NULL,17514,6,0,0,'SAY_ZARITHRIAN_SLAY_2'),
+(39746,-1666203,'Halion! I\'m...aah!',NULL,NULL,NULL,NULL,NULL,'Halion... yo... ohhhggg...',NULL,NULL,17515,6,0,0,'SAY_ZARITHRIAN_DEATH'),
+(39746,-1666204,'Turn them to ash, minions!',NULL,NULL,NULL,NULL,NULL,'¡Reducidlos a cenizas, esbirros!!',NULL,NULL,17516,6,0,0,'SAY_ZARITHRIAN_SPECIAL_1'),
+(39751,-1666300,'Ah, the entertainment has arrived...',NULL,NULL,NULL,NULL,NULL,'ahh... ¡Ha llegado la diversion',NULL,NULL,17520,6,0,0,'SAY_BALTHARUS_AGGRO'),
+(39751,-1666301,'Baltharus leaves no survivors!',NULL,NULL,NULL,NULL,NULL,'¡Baltharus no deja supervivientes!',NULL,NULL,17521,6,0,0,'SAY_BALTHARUS_SLAY_1'),
+(39751,-1666302,'This world has enough heroes!',NULL,NULL,NULL,NULL,NULL,'¡Ya es suficiente heroes!',NULL,NULL,17522,6,0,0,'SAY_BALTHARUS_SLAY_2'),
+(39751,-1666303,'I...didn\'t see that coming...',NULL,NULL,NULL,NULL,NULL,'AArG¦ ¡no lo vi venir!!',NULL,NULL,17523,1,0,0,'SAY_BALTHARUS_DEATH'),
+(39751,-1666304,'Twice the pain and half the fun!',NULL,NULL,NULL,NULL,NULL,'El doble de dolor y la mitad de diversion',NULL,NULL,17524,6,0,0,'SAY_BALTHARUS_SPECIAL_1'),
+(39751,-1666305,'Your power wanes, ancient one! Soon, you will join your friends!',NULL,NULL,NULL,NULL,NULL,'Tu poder decae, ancestro. Pronto te uniras a tus amigos.',NULL,NULL,17525,6,0,0,'SAY_BALTHARUS_YELL'),
+(39747,-1666400,'You will suffer for this intrusion...',NULL,NULL,NULL,NULL,NULL,'Sufrireis por esta intrusion!',NULL,NULL,17528,6,0,0,'SAY_SAVIANA_AGGRO'),
+(39747,-1666401,'As it should be!',NULL,NULL,NULL,NULL,NULL,'¡Como debe ser!',NULL,NULL,17529,6,0,0,'SAY_SAVIANA_SLAY_1'),
+(39747,-1666402,'Halion will be pleased...',NULL,NULL,NULL,NULL,NULL,'Halion estara satisfecho',NULL,NULL,17530,6,0,0,'SAY_SAVIANA_SLAY_2'),
+(39747,-1666403,'OOHHAH...',NULL,NULL,NULL,NULL,NULL,'OOHHAH...',NULL,NULL,17531,6,0,0,'SAY_SAVIANA_DEATH'),
+(39747,-1666404,'Burn in the master\'s flame!',NULL,NULL,NULL,NULL,NULL,'Arded en la llama del maestro!',NULL,NULL,17532,6,0,0,'SAY_SAVIANA_SPECIAL_1'),
+(39747,-1666405,'|3-3(%s) fall into a trance!\r\n',NULL,NULL,NULL,NULL,NULL,'|3-3(%s) cae en un trance!\r\n',NULL,NULL,0,3,0,0,'');
+-- ---------- Spawn del Anillo de fuego fix Eilo --------------
+-- ------------------------------------------------------------
+SET @OGUID = 152192; -- Need 1 (Set by TDB team)
+DELETE FROM `gameobject` WHERE `guid`=@OGUID;
+INSERT INTO `gameobject` (`guid`,`id`, `map`, `spawnMask`, `phaseMask`, `position_x`, `position_y`, `position_z`, `orientation`, `rotation0`, `rotation1`, `rotation2`, `rotation3`, `spawntimesecs`, `animprogress`, `state`) VALUES
+(@OGUID,203624,724,15,1,3154.99,535.637,72.887,3.14159,0,0,0,0,120,0,0); -- GO_TWILIGHT_FLAME_RING
+-- ---------------- Spawn hero y otros fix ws -----------------
+-- ------------------------------------------------------------
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40081, 40470, 40471, 40472, 0, 0, 169, 11686, 0, 0, 'Orb Carrier', '', '', 0, 80, 80, 2, 14, 14, 0, 1.2, 0.428571, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 1, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 128, 'mob_orb_carrier', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40083, 0, 0, 0, 0, 0, 32754, 0, 0, 0, 'Shadow Orb', '', '', 0, 80, 80, 2, 14, 14, 0, 2.4, 0.857143, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 106, 1, 0, 0, 0, 'mob_halion_orb', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40091, 43280, 43281, 43282, 0, 0, 169, 11686, 0, 0, 'Orb Rotation Focus', '', '', 0, 80, 80, 2, 14, 14, 0, 2.2, 0.785714, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 98, 1, 0, 0, 128, 'mob_orb_rotation_focus', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40100, 0, 0, 0, 0, 0, 32754, 0, 0, 0, 'Shadow Orb', '', '', 0, 80, 80, 2, 14, 14, 0, 2.4, 0.857143, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 4, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 106, 1, 0, 0, 0, 'mob_halion_orb', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40142, 40143, 40144, 40145, 0, 0, 31952, 0, 0, 0, 'Halion', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1.6, 1.42857, 1, 3, 468, 702, 0, 175, 74.6, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 1132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 800, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, 'boss_halion_twilight', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40146, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Halion Controller', '', '', 0, 80, 80, 2, 14, 14, 0, 2.8, 1, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 118, 1, 0, 0, 128, 'mob_halion_control', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39863, 39864, 39944, 39945, 0, 0, 31952, 0, 0, 0, 'Halion', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1, 1.42857, 1, 3, 468, 702, 0, 175, 74.2, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 108, 39863, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 800, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, 'boss_halion_real', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39751, 39920, 0, 0, 0, 0, 31761, 0, 0, 0, 'Baltharus the Warborn', '', '', 0, 83, 83, 2, 103, 103, 0, 2.8, 1.71429, 1, 3, 351, 526, 0, 132, 80, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 39947, 0, 0, 0, 0, 0, 0, 0, 0, 75125, 40504, 74502, 74509, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 250, 1, 1, 0, 0, 0, 0, 0, 0, 0, 171, 1, 1568, 803160063, 1, 'boss_baltharus', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39899, 39922, 0, 0, 0, 0, 31761, 0, 0, 0, 'Baltharus the Warborn', '', '', 0, 83, 83, 2, 103, 103, 0, 2.8, 1.71429, 1, 3, 351, 526, 0, 132, 80, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75125, 40504, 74502, 74509, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 250, 1, 1, 0, 0, 0, 0, 0, 0, 0, 171, 1, 1568, 803160063, 1, 'mob_baltharus_clone', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39746, 39805, 0, 0, 0, 0, 32179, 0, 0, 0, 'General Zarithrian', '', '', 0, 83, 83, 2, 16, 16, 0, 0.888888, 1.42857, 1, 3, 351, 526, 0, 132, 74.8, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 39946, 0, 0, 0, 0, 0, 0, 0, 0, 74367, 74384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 297, 1, 1, 0, 0, 0, 0, 0, 0, 0, 144, 1, 1764, 803160063, 1, 'boss_zarithrian', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39747, 39823, 0, 0, 0, 0, 31577, 0, 0, 0, 'Saviana Ragefire', '', '', 0, 83, 83, 2, 103, 103, 0, 2, 2.14286, 1, 3, 351, 526, 0, 132, 74.8, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 39948, 0, 0, 0, 0, 0, 0, 0, 0, 74452, 78722, 74404, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 300, 1, 1, 0, 0, 0, 0, 0, 0, 0, 191, 1, 0, 803160063, 1, 'boss_ragefire', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40429, 0, 0, 0, 0, 0, 31962, 0, 0, 0, 'Sanctum Guardian Xerestrasza', '', '', 0, 80, 80, 2, 2010, 2010, 2, 1, 1.14286, 1, 0, 230, 345, 0, 86, 1.4, 1500, 1500, 8, 0, 0, 0, 0, 0, 0, 0, 184, 276, 69, 2, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 189, 832, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 'mob_xerestrasza', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (26712, 0, 0, 0, 0, 0, 169, 17188, 0, 0, 'Crystal Channel Target', '', '', 0, 70, 70, 2, 14, 14, 0, 1, 1.14286, 1, 0, 260, 390, 0, 97, 1, 2000, 2000, 1, 33555200, 8, 0, 0, 0, 0, 0, 208, 312, 78, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39794, 0, 0, 0, 0, 0, 169, 16925, 0, 0, 'Zarithrian Spawn Stalker', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 0.992063, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 130, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40470, 0, 0, 0, 0, 0, 0, 0, 0, 0, 'Orb Carrier (1)', NULL, NULL, 0, 1, 1, 0, 0, 0, 0, 1, 1.14286, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, '', 1);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40143, 0, 0, 0, 0, 0, 31952, 0, 0, 0, 'Halion (1)', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1.6, 1.42857, 1, 3, 468, 702, 0, 175, 112.6, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 1132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 2900, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (43280, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Orb Rotation Focus (1)', '', '', 0, 80, 80, 2, 14, 14, 0, 2.2, 0.785714, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 98, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39864, 0, 0, 0, 0, 0, 31952, 0, 0, 0, 'Halion (1)', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1, 1.42857, 1, 3, 468, 702, 0, 175, 112.2, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 108, 39864, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 2900, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39920, 0, 0, 0, 0, 0, 31761, 0, 0, 0, 'Baltharus the Warborn (1)', '', '', 0, 83, 83, 2, 103, 103, 0, 2.8, 1.71429, 1, 3, 351, 526, 0, 132, 112.8, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75125, 40504, 74502, 74509, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 800, 1, 1, 0, 0, 0, 0, 0, 0, 0, 171, 1, 1568, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39922, 0, 0, 0, 0, 0, 31761, 0, 0, 0, 'Baltharus the Warborn (1)', '', '', 0, 83, 83, 2, 103, 103, 0, 2.8, 1.71429, 1, 3, 351, 526, 0, 132, 112.8, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75125, 40504, 74502, 74509, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 800, 1, 1, 0, 0, 0, 0, 0, 0, 0, 171, 1, 1568, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39805, 0, 0, 0, 0, 0, 32179, 0, 0, 0, 'General Zarithrian (1)', '', '', 0, 83, 83, 2, 16, 16, 0, 0.888888, 1.42857, 1, 3, 351, 526, 0, 132, 112.8, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74367, 74384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1011, 1, 1, 0, 0, 0, 0, 0, 0, 0, 144, 1, 1764, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39823, 0, 0, 0, 0, 0, 31577, 0, 0, 0, 'Saviana Ragefire (1)', '', '', 0, 83, 83, 2, 103, 103, 0, 2, 2.14286, 1, 3, 351, 526, 0, 132, 112.8, 1500, 1500, 1, 0, 0, 0, 0, 0, 0, 0, 281, 421, 106, 2, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74452, 78722, 74404, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1000, 1, 1, 0, 0, 0, 0, 0, 0, 0, 191, 1, 0, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40471, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Orb Carrier (2)', '', '', 0, 80, 80, 2, 14, 14, 0, 1.2, 0.428571, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40472, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Orb Carrier (3)', '', '', 0, 80, 80, 2, 14, 14, 0, 1.2, 0.428571, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 718, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (43281, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Orb Rotation Focus (2)', '', '', 0, 80, 80, 2, 14, 14, 0, 2.2, 0.785714, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 118, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (43282, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Orb Rotation Focus (3)', '', '', 0, 80, 80, 2, 14, 14, 0, 2.2, 0.785714, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 1048576, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 118, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40144, 0, 0, 0, 0, 0, 31952, 0, 0, 0, 'Halion (2)', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1.6, 1.42857, 1, 3, 468, 702, 0, 175, 150, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 1132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1100, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40145, 0, 0, 0, 0, 0, 31952, 0, 0, 0, 'Halion (3)', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1.6, 1.42857, 1, 3, 468, 702, 0, 175, 168.6, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 1132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 4200, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39944, 0, 0, 0, 0, 0, 31952, 0, 0, 0, 'Halion (2)', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1, 1.42857, 1, 3, 468, 702, 0, 175, 112.2, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 108, 39944, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1100, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (39945, 0, 0, 0, 0, 0, 31952, 0, 0, 0, 'Halion (3)', 'The Twilight Destroyer', '', 0, 83, 83, 2, 14, 14, 0, 1, 1.42857, 1, 3, 468, 702, 0, 175, 168.2, 2000, 2000, 1, 768, 0, 0, 0, 0, 0, 0, 374, 562, 140, 2, 108, 39945, 0, 0, 0, 0, 0, 0, 0, 0, 26662, 74524, 74562, 74531, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 4200, 1, 1, 0, 0, 0, 0, 0, 0, 0, 150, 1, 0, 803160063, 1, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40001, 40670, 40671, 40672, 0, 0, 169, 16946, 0, 0, 'Combustion', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 391, 585, 0, 146, 1.1, 2000, 2000, 2, 0, 0, 0, 0, 0, 0, 0, 313, 468, 117, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, 'mob_fiery_combustion', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40670, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Combustion (1)', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 391, 585, 0, 146, 1.1, 2000, 2000, 2, 0, 0, 0, 0, 0, 0, 0, 313, 468, 117, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40671, 0, 0, 0, 0, 0, 169, 16946, 0, 0, 'Combustion (2)', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 391, 585, 0, 146, 1.1, 2000, 2000, 2, 0, 0, 0, 0, 0, 0, 0, 313, 468, 117, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40672, 0, 0, 0, 0, 0, 169, 16946, 0, 0, 'Combustion (3)', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 391, 585, 0, 146, 1.1, 2000, 2000, 2, 0, 0, 0, 0, 0, 0, 0, 313, 468, 117, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40135, 40673, 40674, 40675, 0, 0, 169, 16946, 0, 0, 'Consumption', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, 'mob_soul_consumption', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40673, 0, 0, 0, 0, 0, 169, 16946, 0, 0, 'Consumption (1)', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40674, 0, 0, 0, 0, 0, 169, 16946, 0, 0, 'Consumption (2)', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40675, 0, 0, 0, 0, 0, 169, 16946, 0, 0, 'Consumption (3)', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 16778240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1.35, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40029, 0, 0, 0, 0, 0, 169, 15880, 0, 0, 'Meteor Strike', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, 'mob_halion_meteor', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40041, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Meteor Strike', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, 'mob_halion_flame', 12340);
+
+REPLACE INTO creature_template
+   (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`)
+VALUES
+   (40042, 0, 0, 0, 0, 0, 169, 11686, 0, 0, 'Meteor Strike', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 420, 630, 0, 157, 1, 2000, 2000, 1, 0, 0, 0, 0, 0, 0, 0, 336, 504, 126, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 7, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 128, '', 12340);
+
+REPLACE INTO gameobject_template
+   (`entry`, `type`, `displayId`, `name`, `IconName`, `castBarCaption`, `unk1`, `faction`, `flags`, `size`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `data0`, `data1`, `data2`, `data3`, `data4`, `data5`, `data6`, `data7`, `data8`, `data9`, `data10`, `data11`, `data12`, `data13`, `data14`, `data15`, `data16`, `data17`, `data18`, `data19`, `data20`, `data21`, `data22`, `data23`, `AIName`, `ScriptName`, `WDBVerified`)
+VALUES
+   (202794, 10, 1327, 'Twilight Portal', '', '', '', 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 'go_halion_portal_twilight', 12340);
+
+REPLACE INTO gameobject_template
+   (`entry`, `type`, `displayId`, `name`, `IconName`, `castBarCaption`, `unk1`, `faction`, `flags`, `size`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `data0`, `data1`, `data2`, `data3`, `data4`, `data5`, `data6`, `data7`, `data8`, `data9`, `data10`, `data11`, `data12`, `data13`, `data14`, `data15`, `data16`, `data17`, `data18`, `data19`, `data20`, `data21`, `data22`, `data23`, `AIName`, `ScriptName`, `WDBVerified`)
+VALUES
+   (202795, 10, 1327, 'Twilight Portal', '', '', '', 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 'go_halion_portal_twilight', 12340);
+
+REPLACE INTO gameobject_template
+   (`entry`, `type`, `displayId`, `name`, `IconName`, `castBarCaption`, `unk1`, `faction`, `flags`, `size`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `data0`, `data1`, `data2`, `data3`, `data4`, `data5`, `data6`, `data7`, `data8`, `data9`, `data10`, `data11`, `data12`, `data13`, `data14`, `data15`, `data16`, `data17`, `data18`, `data19`, `data20`, `data21`, `data22`, `data23`, `AIName`, `ScriptName`, `WDBVerified`)
+VALUES
+   (202796, 10, 1327, 'Twilight Portal', '', '', '', 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74812, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 'go_halion_portal_real', 12340);
+
+REPLACE INTO gameobject_template
+   (`entry`, `type`, `displayId`, `name`, `IconName`, `castBarCaption`, `unk1`, `faction`, `flags`, `size`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `data0`, `data1`, `data2`, `data3`, `data4`, `data5`, `data6`, `data7`, `data8`, `data9`, `data10`, `data11`, `data12`, `data13`, `data14`, `data15`, `data16`, `data17`, `data18`, `data19`, `data20`, `data21`, `data22`, `data23`, `AIName`, `ScriptName`, `WDBVerified`)
+VALUES
+   (203005, 0, 9484, 'Fire Field', '', '', '', 0, 48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', '', 12340);
+
+REPLACE INTO gameobject_template
+   (`entry`, `type`, `displayId`, `name`, `IconName`, `castBarCaption`, `unk1`, `faction`, `flags`, `size`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `data0`, `data1`, `data2`, `data3`, `data4`, `data5`, `data6`, `data7`, `data8`, `data9`, `data10`, `data11`, `data12`, `data13`, `data14`, `data15`, `data16`, `data17`, `data18`, `data19`, `data20`, `data21`, `data22`, `data23`, `AIName`, `ScriptName`, `WDBVerified`)
+VALUES
+   (203006, 0, 9485, 'Flame Walls', '', '', '', 0, 48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', '', 12340);
+
+REPLACE INTO gameobject_template
+   (`entry`, `type`, `displayId`, `name`, `IconName`, `castBarCaption`, `unk1`, `faction`, `flags`, `size`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `data0`, `data1`, `data2`, `data3`, `data4`, `data5`, `data6`, `data7`, `data8`, `data9`, `data10`, `data11`, `data12`, `data13`, `data14`, `data15`, `data16`, `data17`, `data18`, `data19`, `data20`, `data21`, `data22`, `data23`, `AIName`, `ScriptName`, `WDBVerified`)
+VALUES
+   (203007, 0, 9482, 'Ruby Sanctum Halion Flame Ring', '', '', '', 0, 48, 1.6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', '', 12340);
diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
index 60f16b0..1ca0506 100755
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -487,7 +487,7 @@ void AddSC_icecrown_citadel_teleport();
 void AddSC_instance_icecrown_citadel();
 void AddSC_icecrown_citadel();
 void AddSC_instance_ruby_sanctum();      // Ruby Sanctum
-void AddSC_ruby_sanctum();
+void AddSC_boss_halion();
 void AddSC_boss_baltharus_the_warborn();
 void AddSC_boss_saviana_ragefire();
 void AddSC_boss_general_zarithrian();
@@ -1197,7 +1197,7 @@ void AddNorthrendScripts()
     AddSC_instance_icecrown_citadel();
     AddSC_icecrown_citadel();
     AddSC_instance_ruby_sanctum();      // Ruby Sanctum
-    AddSC_ruby_sanctum();
+    AddSC_boss_halion();
     AddSC_boss_baltharus_the_warborn();
     AddSC_boss_saviana_ragefire();
     AddSC_boss_general_zarithrian();
diff --git a/src/server/scripts/Northrend/CMakeLists.txt b/src/server/scripts/Northrend/CMakeLists.txt
index 6b1788a..e8c0849 100644
--- a/src/server/scripts/Northrend/CMakeLists.txt
+++ b/src/server/scripts/Northrend/CMakeLists.txt
@@ -47,7 +47,7 @@ set(scripts_STAT_SRCS
   Northrend/ChamberOfAspects/ObsidianSanctum/mob_obsidian_sanctum.cpp
   Northrend/ChamberOfAspects/RubySanctum/instance_ruby_sanctum.cpp
   Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.h
-  Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.cpp
+  Northrend/ChamberOfAspects/RubySanctum/boss_halion.cpp
   Northrend/ChamberOfAspects/RubySanctum/boss_baltharus_the_warborn.cpp
   Northrend/ChamberOfAspects/RubySanctum/boss_saviana_ragefire.cpp
   Northrend/ChamberOfAspects/RubySanctum/boss_general_zarithrian.cpp
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_baltharus_the_warborn.cpp b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_baltharus_the_warborn.cpp
index e848c29..43f1a2a 100644
--- a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_baltharus_the_warborn.cpp
+++ b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_baltharus_the_warborn.cpp
@@ -15,332 +15,592 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
-#include "ObjectMgr.h"
-#include "ScriptMgr.h"
-#include "ScriptedCreature.h"
-#include "SpellAuraEffects.h"
+/*
+ * WowRean Script www.wowrean.com
+ */
+
+#include "ScriptPCH.h"
 #include "ruby_sanctum.h"
 
-enum Texts
+struct Locations
 {
-    SAY_BALTHARUS_INTRO         = 0,    // Your power wanes, ancient one.... Soon you will join your friends.
-    SAY_AGGRO                   = 1,    // Ah, the entertainment has arrived.
-    SAY_KILL                    = 2,    // Baltharus leaves no survivors! - This world has enough heroes.
-    SAY_CLONE                   = 3,    // Twice the pain and half the fun.
-    SAY_DEATH                   = 4,    // I... didn't see that coming....
+    float x, y, z;
 };
 
-enum Spells
+static Locations SpawnLoc[]=
 {
-    SPELL_BARRIER_CHANNEL       = 76221,
-    SPELL_ENERVATING_BRAND      = 74502,
-    SPELL_SIPHONED_MIGHT        = 74507,
-    SPELL_CLEAVE                = 40504,
-    SPELL_BLADE_TEMPEST         = 75125,
-    SPELL_CLONE                 = 74511,
-    SPELL_REPELLING_WAVE        = 74509,
-    SPELL_CLEAR_DEBUFFS         = 34098,
-    SPELL_SPAWN_EFFECT          = 64195,
+    {3152.329834f, 359.41757f, 85.301605f},    // Baltharus target point
+    {3153.06f, 389.486f, 86.2596f},            // Baltharus initial point
 };
 
-enum Events
+enum Equipment
 {
-    EVENT_BLADE_TEMPEST         = 1,
-    EVENT_CLEAVE                = 2,
-    EVENT_ENERVATING_BRAND      = 3,
-    EVENT_INTRO_TALK            = 4,
-    EVENT_OOC_CHANNEL           = 5,
+    EQUIP_MAIN           = 28365, // corregi equipamiento WS
+    EQUIP_OFFHAND        = EQUIP_NO_CHANGE,
+    EQUIP_RANGED         = EQUIP_NO_CHANGE,
+    EQUIP_DONE           = EQUIP_NO_CHANGE,
 };
 
-enum Actions
+enum BossSpells
 {
-    ACTION_CLONE                = 1,
+    SPELL_BLADE_TEMPEST              = 75125, // every 22 secs
+    SPELL_ENERVATING_BRAND           = 74502, // friendlys in 12yards = 74505
+    SPELL_REPELLING_WAVE             = 74509, // once if call clone
+    SPELL_SABER_LASH                 = 40504, // every 10-15 secs
+    SPELL_SUMMON_CLONE               = 74511, // summons npc 39899 (Clone)
+    SPELL_CHANNEL_SPELL              = 76221, // Channeling dummy spell
 };
 
-enum Phases
+/*######
+## boss_baltharus
+######*/
+
+class boss_baltharus : public CreatureScript
 {
-    PHASE_ALL       = 0,
-    PHASE_INTRO     = 1,
-    PHASE_COMBAT    = 2,
+public:
+    boss_baltharus() : CreatureScript("boss_baltharus") { }
 
-    PHASE_INTRO_MASK    = 1 << PHASE_INTRO,
-};
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new boss_baltharusAI(pCreature);
+    }
 
-class boss_baltharus_the_warborn : public CreatureScript
-{
-    public:
-        boss_baltharus_the_warborn() : CreatureScript("boss_baltharus_the_warborn") { }
+    struct boss_baltharusAI : public ScriptedAI
+    {
+        boss_baltharusAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            pInstance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* pInstance;
+        Creature* pDummyTarget;
+        Creature* pClone;
+        bool inCombat;
+        bool intro;
+        uint8 uiStage;
 
-        struct boss_baltharus_the_warbornAI : public BossAI
+        uint32 m_uiChannelTimer;
+        uint32 m_uiEnevatingTimer;
+        uint32 m_uiSaberLashTimer;
+
+        void Reset()
         {
-            boss_baltharus_the_warbornAI(Creature* creature) : BossAI(creature, DATA_BALTHARUS_THE_WARBORN)
+            if(!pInstance)
+                return;
+
+            if (me->isAlive()) pInstance->SetData(TYPE_BALTHARUS, NOT_STARTED);
+            me->SetRespawnDelay(7*DAY);
+
+            uiStage = 0;
+            pClone = NULL;
+            inCombat = false;
+            intro = false;
+
+            m_uiChannelTimer = 1*IN_MILLISECONDS;
+            m_uiEnevatingTimer = urand(10*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            m_uiSaberLashTimer = urand(10*IN_MILLISECONDS,15*IN_MILLISECONDS);
+
+            if (pDummyTarget = me->GetMap()->GetCreature( pInstance->GetData64(NPC_BALTHARUS_TARGET)))
             {
-                _introDone = false;
-            }
+                if (!pDummyTarget->isAlive()) pDummyTarget->Respawn();
 
-            void Reset()
+                pDummyTarget->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                pDummyTarget->GetMotionMaster()->MoveIdle();
+            }
+            else if (pDummyTarget = me->SummonCreature(NPC_BALTHARUS_TARGET, SpawnLoc[0].x, SpawnLoc[0].y, SpawnLoc[0].z, 0.0f, TEMPSUMMON_MANUAL_DESPAWN, 1000))
             {
-                _Reset();
-                events.SetPhase(PHASE_INTRO);
-                events.ScheduleEvent(EVENT_OOC_CHANNEL, 0, 0, PHASE_INTRO);
-                _cloneCount = RAID_MODE<uint8>(1, 2, 2, 2);
-                instance->SetData(DATA_BALTHARUS_SHARED_HEALTH, me->GetMaxHealth());
+                pDummyTarget->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                pDummyTarget->GetMotionMaster()->MoveIdle();
             }
 
-            void DoAction(int32 const action)
-            {
-                switch (action)
-                {
-                    case ACTION_INTRO_BALTHARUS:
-                        if (_introDone)
-                            return;
-                        _introDone = true;
-                        me->setActive(true);
-                        events.ScheduleEvent(EVENT_INTRO_TALK, 7000, 0, PHASE_INTRO);
-                        break;
-                    case ACTION_CLONE:
-                    {
-                        DoCast(me, SPELL_CLEAR_DEBUFFS);
-                        DoCast(me, SPELL_CLONE);
-                        DoCast(me, SPELL_REPELLING_WAVE);
-                        Talk(SAY_CLONE);
-                        --_cloneCount;
-                        break;
-                    }
-                    default:
-                        break;
-                }
+            if(Creature* pTarget = me->GetMap()->GetCreature( pInstance->GetData64(NPC_XERESTRASZA)))
+                me->SetUInt64Value(UNIT_FIELD_TARGET, pTarget->GetGUID());
+        }
+
+        void JustReachedHome()
+        {
+            if (!pInstance) return;
+
+            pInstance->SetData(TYPE_BALTHARUS, FAIL);
+        }
+
+        void MoveInLineOfSight(Unit* pWho)
+        {
+            if(!pInstance || intro ||
+                pWho->GetTypeId() != TYPEID_PLAYER ||
+                !pWho->IsWithinDistInMap(me, 60.0f)) return;
+
+            pInstance->SetData(TYPE_EVENT, 10);
+            DoScriptText(-1666305,me);
+            intro = true;
+        }
+
+        void JustDied(Unit* pKiller)
+        {
+            if (!pInstance) return;
+
+          //  if (pDummyTarget && pDummyTarget->isSummon())
+          //      pDummyTarget->ForcedDespawn();
+
+            DoScriptText(-1666303,me);
+            pInstance->SetData(TYPE_BALTHARUS, DONE);
+        }
+
+        void KilledUnit(Unit* pVictim)
+        {
+        switch (urand(0,1)) {
+            case 0:
+                   DoScriptText(-1666301,me,pVictim);
+                   break;
+            case 1:
+                   DoScriptText(-1666302,me,pVictim);
+                   break;
             }
+        }
 
-            void EnterCombat(Unit* /*who*/)
+        void JustSummoned(Creature* summoned)
+        {
+            if(!pInstance || !summoned) return;
+
+            if ( summoned->GetEntry() != NPC_BALTHARUS_TARGET )
             {
-                me->InterruptNonMeleeSpells(false);
-                _EnterCombat();
-                events.Reset();
-                events.SetPhase(PHASE_COMBAT);
-                events.ScheduleEvent(EVENT_CLEAVE, 11000, 0, PHASE_COMBAT);
-                events.ScheduleEvent(EVENT_ENERVATING_BRAND, 13000, 0, PHASE_COMBAT);
-                events.ScheduleEvent(EVENT_BLADE_TEMPEST, 15000, 0, PHASE_COMBAT);
-                Talk(SAY_AGGRO);
+                 if (!pClone) pClone = summoned;
+                 else if (!pClone->isAlive()) pClone = summoned;
+                 pClone->SetInCombatWithZone();
             }
+        }
+
+        void SummonedCreatureJustDied(Creature* summoned)
+        {
+             if (!pInstance || !summoned) return;
+
+             if (summoned == pClone) pClone = NULL;
+        }
+
+        void EnterCombat(Unit* pWho)
+        {
+            if (!pInstance) return;
+            if (pWho->GetTypeId() != TYPEID_PLAYER) return;
+
+            if (pDummyTarget) pDummyTarget->ForcedDespawn();
+
+            SetEquipmentSlots(false, EQUIP_MAIN, EQUIP_OFFHAND, EQUIP_RANGED);
+
+            inCombat = true;
+            me->InterruptNonMeleeSpells(true);
+            SetCombatMovement(true);
+            pInstance->SetData(TYPE_BALTHARUS, IN_PROGRESS);
+            DoScriptText(-1666300,me);
+        }
+
+        void DamageTaken(Unit* pDoneBy, uint32 &uiDamage)
+        {
+            if (!pInstance) return;
+
+            if (!me || !me->isAlive())
+                return;
 
-            void JustDied(Unit* /*killer*/)
+            if(pDoneBy->GetGUID() == me->GetGUID())
+              return;
+
+            if (pClone && pClone->isAlive())
             {
-                _JustDied();
-                Talk(SAY_DEATH);
-                if (Creature* xerestrasza = ObjectAccessor::GetCreature(*me, instance->GetData64(DATA_XERESTRASZA)))
-                    xerestrasza->AI()->DoAction(ACTION_BALTHARUS_DEATH);
+                pDoneBy->DealDamage(pClone, uiDamage, NULL, DIRECT_DAMAGE, SPELL_SCHOOL_MASK_NORMAL, NULL, false);
+                uiDamage = 0;
             }
+        }
+
+        void UpdateAI(uint32 const diff)
+        {
+            if (!pInstance) return;
 
-            void KilledUnit(Unit* victim)
+            if (!inCombat && !me->IsNonMeleeSpellCasted(false))
             {
-                if (victim->GetTypeId() == TYPEID_PLAYER)
-                    Talk(SAY_KILL);
+                if (m_uiChannelTimer <= diff)
+                {
+                    DoCast(pDummyTarget, SPELL_CHANNEL_SPELL);
+                    m_uiChannelTimer = 1*IN_MILLISECONDS;
+                } else m_uiChannelTimer -= diff;
             }
 
-            void JustSummoned(Creature* summon)
+            if (!UpdateVictim())
+                return;
+
+            switch (uiStage)
             {
-                summons.Summon(summon);
-                summon->SetHealth(me->GetHealth());
-                summon->CastSpell(summon, SPELL_SPAWN_EFFECT, true);
+                case 0:
+                     if ( HealthBelowPct(67)) uiStage = 1;
+                     break;
+
+                case 1:
+                     me->InterruptNonMeleeSpells(true);
+                     if (Is25ManRaid())
+                         DoCast(SPELL_SUMMON_CLONE);
+                     uiStage = 2;
+                     break;
+
+                case 2:
+                     if (me->IsNonMeleeSpellCasted(false)) return;
+                     DoCast(SPELL_REPELLING_WAVE);
+                     uiStage = 3;
+
+                case 3:
+                     if ( HealthBelowPct(51)) uiStage = 4;
+                     break;
+
+                case 4:
+                     me->InterruptNonMeleeSpells(true);
+                     if (!Is25ManRaid())
+                            DoCast(SPELL_SUMMON_CLONE);
+                     uiStage = 5;
+                     break;
+
+                case 5:
+                     if (me->IsNonMeleeSpellCasted(false)) return;
+                     DoCast(SPELL_REPELLING_WAVE);
+                     uiStage = 6;
+
+                case 6:
+                     if ( HealthBelowPct(34)) uiStage = 7;
+                     break;
+
+                case 7:
+                     me->InterruptNonMeleeSpells(true);
+                     if (Is25ManRaid())
+                         DoCast(SPELL_SUMMON_CLONE);
+                     uiStage = 8;
+                     break;
+
+                case 8:
+                     if (me->IsNonMeleeSpellCasted(false)) return;
+                     DoCast(SPELL_REPELLING_WAVE);
+                     uiStage = 9;
+
+                case 9:
+                default:
+                     break;
             }
 
-            void DamageTaken(Unit* /*attacker*/, uint32& damage)
+            if (m_uiEnevatingTimer <= diff)
             {
-                if (GetDifficulty() == RAID_DIFFICULTY_10MAN_NORMAL)
-                {
-                    if (me->HealthBelowPctDamaged(50, damage) && _cloneCount == 1)
-                        DoAction(ACTION_CLONE);
-                }
-                else
-                {
-                    if (me->HealthBelowPctDamaged(66, damage) && _cloneCount == 2)
-                        DoAction(ACTION_CLONE);
-                    else if (me->HealthBelowPctDamaged(33, damage) && _cloneCount == 1)
-                        DoAction(ACTION_CLONE);
-                }
-
-                if (me->GetHealth() > damage)
-                    instance->SetData(DATA_BALTHARUS_SHARED_HEALTH, me->GetHealth() - damage);
-            }
+                DoCast(SPELL_ENERVATING_BRAND);
+                m_uiEnevatingTimer = urand(10*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            } else m_uiEnevatingTimer -= diff;
 
-            void UpdateAI(uint32 const diff)
+            if (m_uiSaberLashTimer <= diff)
             {
-                if (!UpdateVictim() && !(events.GetPhaseMask() & PHASE_INTRO_MASK))
-                    return;
+                DoCast(SPELL_SABER_LASH);
+                m_uiSaberLashTimer = urand(10*IN_MILLISECONDS,15*IN_MILLISECONDS);
+            } else m_uiSaberLashTimer -= diff;
+
+            DoMeleeAttackIfReady();
+        }
+    };
+};
 
-                if (!(events.GetPhaseMask() & PHASE_INTRO_MASK))
-                    me->SetHealth(instance->GetData(DATA_BALTHARUS_SHARED_HEALTH));
+/*######
+## mob_baltharus_clone
+######*/
 
-                events.Update(diff);
+class mob_baltharus_clone : public CreatureScript
+{
+public:
+    mob_baltharus_clone() : CreatureScript("mob_baltharus_clone") { }
 
-                if (me->HasUnitState(UNIT_STATE_CASTING) && !(events.GetPhaseMask() & PHASE_INTRO_MASK))
-                    return;
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_baltharus_cloneAI(pCreature);
+    }
 
-                while (uint32 eventId = events.ExecuteEvent())
-                {
-                    switch (eventId)
-                    {
-                        case EVENT_INTRO_TALK:
-                            Talk(SAY_BALTHARUS_INTRO);
-                            break;
-                        case EVENT_OOC_CHANNEL:
-                            if (Creature* channelTarget = ObjectAccessor::GetCreature(*me, instance->GetData64(DATA_CRYSTAL_CHANNEL_TARGET)))
-                                DoCast(channelTarget, SPELL_BARRIER_CHANNEL);
-                            events.ScheduleEvent(EVENT_OOC_CHANNEL, 7000, 0, PHASE_INTRO);
-                            break;
-                        case EVENT_CLEAVE:
-                            DoCastVictim(SPELL_CLEAVE);
-                            events.ScheduleEvent(EVENT_CLEAVE, 24000, 0, PHASE_COMBAT);
-                            break;
-                        case EVENT_BLADE_TEMPEST:
-                            DoCast(me, SPELL_BLADE_TEMPEST);
-                            events.ScheduleEvent(EVENT_BLADE_TEMPEST, 24000, 0, PHASE_COMBAT);
-                            break;
-                        case EVENT_ENERVATING_BRAND:
-                            for (uint8 i = 0; i < RAID_MODE<uint8>(4, 8, 8, 10); i++)
-                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 45.0f, true))
-                                    DoCast(target, SPELL_ENERVATING_BRAND);
-                            events.ScheduleEvent(EVENT_ENERVATING_BRAND, 26000, 0, PHASE_COMBAT);
-                            break;
-                        default:
-                            break;
-                    }
-                }
+    struct mob_baltharus_cloneAI : public ScriptedAI
+    {
+        mob_baltharus_cloneAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            pInstance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
 
-                DoMeleeAttackIfReady();
-            }
+        InstanceScript* pInstance;
 
-        private:
-            uint8 _cloneCount;
-            bool _introDone;
-        };
+        uint32 m_uiBladeTempestTimer;
+        uint32 m_uiEnevatingTimer;
+        uint32 m_uiSaberLashTimer;
 
-        CreatureAI* GetAI(Creature* creature) const
+        void Reset()
         {
-            return GetRubySanctumAI<boss_baltharus_the_warbornAI>(creature);
-        }
-};
+            if(!pInstance) return;
 
-class npc_baltharus_the_warborn_clone : public CreatureScript
-{
-    public:
-        npc_baltharus_the_warborn_clone() : CreatureScript("npc_baltharus_the_warborn_clone") { }
+            m_uiBladeTempestTimer = 22*IN_MILLISECONDS;
+            m_uiEnevatingTimer = urand(10*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            m_uiSaberLashTimer = urand(10*IN_MILLISECONDS,15*IN_MILLISECONDS);
+
+            me->SetRespawnDelay(7*DAY);
+        }
 
-        struct npc_baltharus_the_warborn_cloneAI : public ScriptedAI
+        void KilledUnit(Unit* pVictim)
         {
-            npc_baltharus_the_warborn_cloneAI(Creature* creature) : ScriptedAI(creature),
-                _instance(creature->GetInstanceScript())
-            {
+        switch (urand(0,1)) {
+            case 0:
+                   DoScriptText(-1666301,me,pVictim);
+                   break;
+            case 1:
+                   DoScriptText(-1666302,me,pVictim);
+                   break;
             }
+        }
 
-            void EnterCombat(Unit* /*who*/)
-            {
-                DoZoneInCombat();
-                _events.Reset();
-                _events.ScheduleEvent(EVENT_CLEAVE, urand(5000, 10000));
-                _events.ScheduleEvent(EVENT_BLADE_TEMPEST, urand(18000, 25000));
-                _events.ScheduleEvent(EVENT_ENERVATING_BRAND, urand(10000, 15000));
-            }
+        void JustDied(Unit* pKiller)
+        {
+            if (!pInstance) return;
+        }
+
+        void EnterCombat(Unit* pWho)
+        {
+            if (!pInstance) return;
+
+            SetEquipmentSlots(false, EQUIP_MAIN, EQUIP_OFFHAND, EQUIP_RANGED);
+
+            me->SetInCombatWithZone();
+        }
+
+        void UpdateAI(uint32 const diff)
+        {
+
+            if (!pInstance) return;
+
+            if (pInstance->GetData(TYPE_BALTHARUS) != IN_PROGRESS)
+                me->ForcedDespawn();
+
+            if (!UpdateVictim())
+                return;
 
-            void DamageTaken(Unit* /*attacker*/, uint32& damage)
+            if (m_uiBladeTempestTimer <= diff)
             {
-                // Setting DATA_BALTHARUS_SHARED_HEALTH to 0 when killed would bug the boss.
-                if (_instance && me->GetHealth() > damage)
-                    _instance->SetData(DATA_BALTHARUS_SHARED_HEALTH, me->GetHealth() - damage);
-            }
+                DoCast(me,SPELL_BLADE_TEMPEST);
+                m_uiBladeTempestTimer = 22*IN_MILLISECONDS;
+            } else m_uiBladeTempestTimer -= diff;
 
-            void JustDied(Unit* killer)
+            if (m_uiEnevatingTimer <= diff)
             {
-                // This is here because DamageTaken wont trigger if the damage is deadly.
-                if (_instance)
-                    if (Creature* baltharus = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_BALTHARUS_THE_WARBORN)))
-                        killer->Kill(baltharus);
-            }
+                DoCast(SPELL_ENERVATING_BRAND);
+                m_uiEnevatingTimer = urand(10*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            } else m_uiEnevatingTimer -= diff;
 
-            void UpdateAI(uint32 const diff)
+            if (m_uiSaberLashTimer <= diff)
             {
-                if (!UpdateVictim())
-                    return;
+                DoCast(SPELL_SABER_LASH);
+                m_uiSaberLashTimer = urand(10*IN_MILLISECONDS,15*IN_MILLISECONDS);
+            } else m_uiSaberLashTimer -= diff;
 
-                if (_instance)
-                    me->SetHealth(_instance->GetData(DATA_BALTHARUS_SHARED_HEALTH));
+            DoMeleeAttackIfReady();
+        }
+    };
+};
 
-                _events.Update(diff);
+/*######
+##  mob_xerestrasza
+######*/
 
-                if (me->HasUnitState(UNIT_STATE_CASTING))
-                    return;
+static Locations SpawnLocXer[]=
+{
+    {3155.540039f, 342.391998f, 84.596802f},   // 0 - start point
+    {3152.329834f, 359.41757f, 85.301605f},    // 1 - second say
+    {3152.078369f, 383.939178f, 86.337875f},   // 2 - other says and staying
+    {3154.99f, 535.637f, 72.8887f},            // 3 - Halion spawn point
+};
 
-                while (uint32 eventId = _events.ExecuteEvent())
-                {
-                    switch (eventId)
-                    {
-                        case EVENT_CLEAVE:
-                            DoCastVictim(SPELL_CLEAVE);
-                            _events.ScheduleEvent(EVENT_CLEAVE, 24000);
-                            break;
-                        case EVENT_BLADE_TEMPEST:
-                            DoCastVictim(SPELL_BLADE_TEMPEST);
-                            _events.ScheduleEvent(EVENT_BLADE_TEMPEST, 24000);
-                           break;
-                        case EVENT_ENERVATING_BRAND:
-                            for (uint8 i = 0; i < RAID_MODE<uint8>(4, 8, 8, 10); i++)
-                                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 45.0f, true))
-                                    DoCast(target, SPELL_ENERVATING_BRAND);
-                            _events.ScheduleEvent(EVENT_ENERVATING_BRAND, 26000);
-                            break;
-                        default:
-                            break;
-                    }
-               }
+class mob_xerestrasza : public CreatureScript
+{
+public:
+    mob_xerestrasza() : CreatureScript("mob_xerestrasza") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_xerestraszaAI(pCreature);
+    }
 
-                DoMeleeAttackIfReady();
+    struct mob_xerestraszaAI : public ScriptedAI
+    {
+        mob_xerestraszaAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            pInstance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* pInstance;
+        uint32 nextEvent;
+        uint32 nextPoint;
+        uint32 UpdateTimer;
+        bool movementstarted;
+        bool onSessionEvent;
+
+        void Reset()
+        {
+            if(!pInstance) return;
+            nextEvent = 0;
+            nextPoint = 0;
+            movementstarted = false;
+            UpdateTimer = 2000;
+            me->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_QUESTGIVER);
+            me->RemoveFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+            pInstance->SetData(TYPE_XERESTRASZA, NOT_STARTED);
+            me->AddUnitMovementFlag(MOVEMENTFLAG_WALKING);
+            me->SetSpeed(MOVE_WALK, 0.8f, true);
+            me->SetRespawnDelay(7*DAY);
+       }
+
+        void MovementInform(uint32 type, uint32 id)
+        {
+            if (type != POINT_MOTION_TYPE || !movementstarted) return;
+            if (id == nextPoint)
+            {
+                movementstarted = false;
+                pInstance->SetData(TYPE_EVENT,nextEvent);
+                me->GetMotionMaster()->MovementExpired();
             }
+        }
 
-        private:
-            EventMap _events;
-            InstanceScript* _instance;
-        };
+        void StartMovement(uint32 id, uint32 _nextEvent)
+        {
+            nextPoint = id;
+            nextEvent = _nextEvent;
+            me->GetMotionMaster()->Clear();
+            me->GetMotionMaster()->MovePoint(id, SpawnLocXer[id].x, SpawnLocXer[id].y, SpawnLocXer[id].z);
+            pInstance->SetData(TYPE_EVENT,0);
+            movementstarted = true;
+        }
 
-        CreatureAI* GetAI(Creature* creature) const
+        void AttackStart(Unit *who)
         {
-            return GetRubySanctumAI<npc_baltharus_the_warborn_cloneAI>(creature);
+            //ignore all attackstart commands
+            return;
         }
-};
 
-class spell_baltharus_enervating_brand_trigger : public SpellScriptLoader
-{
-    public:
-        spell_baltharus_enervating_brand_trigger() : SpellScriptLoader("spell_baltharus_enervating_brand_trigger") { }
+        void MoveInLineOfSight(Unit *who)
+        {
+            if(!pInstance || !who || who->GetTypeId() != TYPEID_PLAYER)
+                return;
+
+            if (pInstance->GetData(TYPE_BALTHARUS) != DONE
+                || pInstance->GetData(TYPE_XERESTRASZA) != NOT_STARTED) return;
+
+            if(!who->IsWithinDistInMap(me, 60.0f)) return;
+
+            pInstance->SetData(TYPE_XERESTRASZA, IN_PROGRESS);
+            pInstance->SetData(TYPE_EVENT, 30);
+            onSessionEvent = true;
+        }
 
-        class spell_baltharus_enervating_brand_trigger_SpellScript : public SpellScript
+        void UpdateAI(uint32 const diff)
         {
-            PrepareSpellScript(spell_baltharus_enervating_brand_trigger_SpellScript);
+            if(!pInstance) return;
 
-            void CheckDistance()
+            if (pInstance->GetData(TYPE_EVENT_NPC) == NPC_XERESTRASZA)
             {
-                if (Unit* caster = GetOriginalCaster())
+                UpdateTimer = pInstance->GetData(TYPE_EVENT_TIMER);
+                if (UpdateTimer <= diff)
                 {
-                    if (Unit* target = GetHitUnit())
-                        target->CastSpell(caster, SPELL_SIPHONED_MIGHT, true);
-                }
-            }
+                    switch (pInstance->GetData(TYPE_EVENT))
+                    {
+// Xerestrasza intro
+                        case 10:
+                              UpdateTimer = 7000;
+                              pInstance->SetData(TYPE_EVENT, 20);
+                              break;
+                        case 20:
+                              DoScriptText(-1666000,me);
+                              pInstance->SetData(TYPE_EVENT,0);
+                              break;
+// Xerestrasza event
+                        case 30:
+                             // me->SetActive(true);
+                              DoScriptText(-1666001,me);
+                              StartMovement(1,40);
+                              break;
+                        case 40:
+                              DoScriptText(-1666002,me);
+                              StartMovement(2,50);
+                              break;
+                        case 50:
+                              DoScriptText(-1666003,me);
+                              UpdateTimer = 12000;
+                              pInstance->SetData(TYPE_EVENT,60);
+                              break;
+                        case 60:
+                              DoScriptText(-1666004,me);
+                              UpdateTimer = 12000;
+                              pInstance->SetData(TYPE_EVENT,70);
+                              break;
+                        case 70:
+                              DoScriptText(-1666005,me);
+                              UpdateTimer = 10000;
+                              pInstance->SetData(TYPE_EVENT,80);
+                              break;
+                        case 80:
+                              DoScriptText(-1666006,me);
+                              UpdateTimer = 10000;
+                              pInstance->SetData(TYPE_EVENT,90);
+                              break;
+                        case 90:
+                              DoScriptText(-1666007,me);
+                              UpdateTimer = 10000;
+                              pInstance->SetData(TYPE_EVENT,100);
+                              break;
+                        case 100:
+                              DoScriptText(-1666008,me);
+                              UpdateTimer = 4000;
+                              pInstance->SetData(TYPE_EVENT,110);
+                              break;
+                        case 110:
+                              UpdateTimer = 2000;
+                              pInstance->SetData(TYPE_EVENT,0);
+                              pInstance->SetData(TYPE_XERESTRASZA, DONE);
+                              me->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_QUESTGIVER);
+                              me->SetFlag(UNIT_NPC_FLAGS, UNIT_NPC_FLAG_GOSSIP);
+                             // me->SetActive(false);
+                              break;
+// Halion spawn
+                        case 200:
+                              //me->SetActive(true);
+                              {
+                              Creature* pHalion = me->GetMap()->GetCreature(pInstance->GetData64(NPC_HALION_REAL));
+                              if (pInstance->GetData(TYPE_BALTHARUS) == DONE &&
+                                  pInstance->GetData(TYPE_RAGEFIRE) == DONE &&
+                                  pInstance->GetData(TYPE_XERESTRASZA) == DONE &&
+                                  pInstance->GetData(TYPE_ZARITHRIAN) == DONE &&
+                                  pInstance->GetData(TYPE_HALION) != DONE)
+                                  {
+                                  if (!pHalion)
+                                      pHalion = me->SummonCreature(NPC_HALION_REAL, SpawnLocXer[3].x, SpawnLocXer[3].y, SpawnLocXer[3].z, 6.23f, TEMPSUMMON_MANUAL_DESPAWN, HOUR*IN_MILLISECONDS);
+                                  if (pHalion && !pHalion->isAlive())
+                                      pHalion->Respawn();
+                                  if (pHalion)
+                                      pHalion->SetCreatorGUID(0);
+                                  }
+                              }
+                              UpdateTimer = 4000;
+                              pInstance->SetData(TYPE_EVENT,210);
+                              break;
+                        case 210:
+                              //me->SetActive(false);
+                              UpdateTimer = 2000;
+                              pInstance->SetData(TYPE_EVENT,0);
+                              break;
 
-            void Register()
-            {
-                OnHit += SpellHitFn(spell_baltharus_enervating_brand_trigger_SpellScript::CheckDistance);
+                        default:
+                          break;
+                    }
+                 } else UpdateTimer -= diff;
+                 pInstance->SetData(TYPE_EVENT_TIMER, UpdateTimer);
             }
-        };
-
-        SpellScript* GetSpellScript() const
-        {
-            return new spell_baltharus_enervating_brand_trigger_SpellScript();
         }
+    };
 };
 
 void AddSC_boss_baltharus_the_warborn()
 {
-    new boss_baltharus_the_warborn();
-    new npc_baltharus_the_warborn_clone();
-    new spell_baltharus_enervating_brand_trigger();
+    new boss_baltharus();
+    new mob_baltharus_clone();
+    new mob_xerestrasza();
 }
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_general_zarithrian.cpp b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_general_zarithrian.cpp
index f41522f..97aca4c 100644
--- a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_general_zarithrian.cpp
+++ b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_general_zarithrian.cpp
@@ -15,292 +15,237 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+ /*
+ * WowRean Script www.wowrean.com
+ */
+
 #include "ScriptPCH.h"
-#include "ScriptedEscortAI.h"
 #include "ruby_sanctum.h"
 
-enum Texts
+enum BossSpells
 {
-    SAY_AGGRO                   = 0,    // Alexstrasza has chosen capable allies.... A pity that I must END YOU!
-    SAY_KILL                    = 1,    // You thought you stood a chance? - It's for the best.
-    SAY_ADDS                    = 2,    // Turn them to ash, minions!
-    SAY_DEATH                   = 3,    // HALION! I...
+    SPELL_CALL_FLAMECALLER           = 74398,
+    SPELL_CLEAVE_ARMOR               = 74367,
+    SPELL_IMTIMIDATING_ROAR          = 74384,
+    SPELL_LAVA_GOUT                  = 74394,
+    SPELL_BLAST_NOVA                 = 74392,
+
+    NPC_FLAMECALLER                  = 39814,
 };
 
-enum Spells
+enum Equipment
 {
-    // General Zarithrian
-    SPELL_INTIMIDATING_ROAR     = 74384,
-    SPELL_CLEAVE_ARMOR          = 74367,
-    // Zarithrian Spawn Stalker
-    SPELL_SUMMON_FLAMECALLER    = 74398,
-    // Onyx Flamecaller
-    SPELL_BLAST_NOVA            = 74392,
-    SPELL_LAVA_GOUT             = 74394,
+    EQUIP_MAIN           = 43111, // fix ws correcion de arma
+    EQUIP_OFFHAND        = 51812,
+    EQUIP_RANGED         = EQUIP_NO_CHANGE,
+    EQUIP_DONE           = EQUIP_NO_CHANGE,
 };
 
-enum Events
+struct Locations
 {
-    // General Zarithrian
-    EVENT_CLEAVE                    = 1,
-    EVENT_INTIDMDATING_ROAR         = 2,
-    EVENT_SUMMON_ADDS               = 3,
-    // Onyx Flamecaller
-    EVENT_BLAST_NOVA                = 4,
-    EVENT_LAVA_GOUT                 = 5,
+    float x, y, z, o;
 };
 
-uint32 const MAX_PATH_FLAMECALLER_WAYPOINTS = 12;
-
-Position const FlamecallerWaypoints[MAX_PATH_FLAMECALLER_WAYPOINTS*2] =
+static Locations SpawnLoc[]=
 {
-    // East
-    {3042.971f, 419.8809f, 86.94320f, 0.0f},
-    {3043.971f, 419.8809f, 86.94320f, 0.0f},
-    {3044.885f, 428.8281f, 86.19320f, 0.0f},
-    {3045.494f, 434.7930f, 85.56398f, 0.0f},
-    {3045.900f, 438.7695f, 84.81398f, 0.0f},
-    {3045.657f, 456.8290f, 85.95601f, 0.0f},
-    {3043.657f, 459.0790f, 87.20601f, 0.0f},
-    {3042.157f, 460.5790f, 87.70601f, 0.0f},
-    {3040.907f, 462.0790f, 88.45601f, 0.0f},
-    {3038.907f, 464.0790f, 89.20601f, 0.0f},
-    {3025.907f, 478.0790f, 89.70601f, 0.0f},
-    {3003.832f, 501.2510f, 89.47303f, 0.0f},
-    // West
-    {3062.596f, 636.9980f, 82.50338f, 0.0f},
-    {3062.514f, 624.9980f, 83.70634f, 0.0f},
-    {3062.486f, 620.9980f, 84.33134f, 0.0f},
-    {3062.445f, 613.9930f, 84.45634f, 0.0f},
-    {3062.445f, 613.9930f, 84.45634f, 0.0f},
-    {3059.208f, 610.6501f, 85.39581f, 0.0f},
-    {3055.958f, 606.9001f, 86.14581f, 0.0f},
-    {3046.458f, 596.4001f, 86.89581f, 0.0f},
-    {3043.958f, 593.4001f, 87.64581f, 0.0f},
-    {3040.458f, 589.9001f, 88.39581f, 0.0f},
-    {3034.458f, 583.1501f, 88.89581f, 0.0f},
-    {3014.970f, 561.8073f, 88.83527f, 0.0f},
+    {3008.552734f, 530.471680f, 89.195290f, 6.16f},    // 0 - zarithrian start point, o = 6,16
+    {3014.313477f, 486.453735f, 89.255096f, 6.16f},    // 1 - Mob spawn 1
+    {3025.324951f, 580.588501f, 88.593185f, 6.16f},    // 2 - Mob spawn 2
 };
 
-class boss_general_zarithrian : public CreatureScript
+class boss_zarithrian : public CreatureScript
 {
-    public:
-        boss_general_zarithrian() : CreatureScript("boss_general_zarithrian") { }
+public:
+    boss_zarithrian() : CreatureScript("boss_zarithrian") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new boss_zarithrianAI(pCreature);
+    }
 
-        struct boss_general_zarithrianAI : public BossAI
+    struct boss_zarithrianAI : public ScriptedAI
+    {
+        boss_zarithrianAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
-            boss_general_zarithrianAI(Creature* creature) : BossAI(creature, DATA_GENERAL_ZARITHRIAN)
-            {
-            }
+            pInstance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
 
-            void Reset()
-            {
-                _Reset();
-                if (instance->GetBossState(DATA_SAVIANA_RAGEFIRE) == DONE && instance->GetBossState(DATA_BALTHARUS_THE_WARBORN) == DONE)
-                    me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC);
-            }
+        InstanceScript* pInstance;
+
+        uint32 m_uiSummonTimer;
+        uint32 m_uiCleaveTimer;
+        uint32 m_uiImtimidatingTimer;
+
+        void Reset()
+        {
+            if(!pInstance)
+                return;
 
-            void EnterCombat(Unit* /*who*/)
+            m_uiSummonTimer = 45*IN_MILLISECONDS;
+            m_uiCleaveTimer = urand(10*IN_MILLISECONDS,20*IN_MILLISECONDS);
+            m_uiImtimidatingTimer = urand(15*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            me->SetRespawnDelay(7*DAY);
+
+            if (me->isAlive())
             {
-                _EnterCombat();
-                Talk(SAY_AGGRO);
-                events.Reset();
-                events.ScheduleEvent(EVENT_CLEAVE, 15000);
-                events.ScheduleEvent(EVENT_INTIDMDATING_ROAR, 42000);
-                events.ScheduleEvent(EVENT_SUMMON_ADDS, 40000);
+                pInstance->SetData(TYPE_ZARITHRIAN, NOT_STARTED);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
             }
+        }
 
-            void JustReachedHome()
-            {
-                _JustReachedHome();
-                instance->SetBossState(DATA_GENERAL_ZARITHRIAN, FAIL);
+        void MoveInLineOfSight(Unit* pWho)
+        {
+            if (pInstance->GetData(TYPE_XERESTRASZA) == DONE &&
+                 pInstance->GetData(TYPE_BALTHARUS) == DONE &&
+                 pInstance->GetData(TYPE_RAGEFIRE) == DONE)
+                 {
+                     me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                 }
+        }
+
+        void KilledUnit(Unit* pVictim)
+        {
+        switch (urand(0,1)) {
+            case 0:
+                   DoScriptText(-1666201,me,pVictim);
+                   break;
+            case 1:
+                   DoScriptText(-1666202,me,pVictim);
+                   break;
             }
+        }
+
+        void JustReachedHome()
+        {
+            if (!pInstance) return;
+            pInstance->SetData(TYPE_ZARITHRIAN, FAIL);
+        }
+
+        void JustSummoned(Creature* summoned)
+        {
+            if(!pInstance || !summoned) return;
 
-            // Override to not set adds in combat yet.
-            void JustSummoned(Creature* summon)
+            summoned->SetInCombatWithZone();
+            if (Unit* pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0, 60, true))
             {
-                summons.Summon(summon);
+                summoned->AddThreat(pTarget, 100.0f);
+                summoned->GetMotionMaster()->MoveChase(pTarget);
             }
+        }
+
+        void EnterCombat(Unit *who)
+        {
+            if(!pInstance) return;
+
+            SetEquipmentSlots(false, EQUIP_MAIN, EQUIP_OFFHAND, EQUIP_RANGED);
+            pInstance->SetData(TYPE_ZARITHRIAN, IN_PROGRESS);
+            DoScriptText(-1666200,me);
+        }
+
+        void JustDied(Unit *killer)
+        {
+            if(!pInstance) return;
 
-            void JustDied(Unit* /*killer*/)
+            pInstance->SetData(TYPE_ZARITHRIAN, DONE);
+            DoScriptText(-1666203,me);
+        }
+
+        void UpdateAI(uint32 const diff)
+        {
+            if (!UpdateVictim())
+                return;
+
+            if (m_uiSummonTimer <= diff)
             {
-                _JustDied();
-                Talk(SAY_DEATH);
-            }
+                me->SummonCreature(NPC_FLAMECALLER, SpawnLoc[1].x, SpawnLoc[1].y, SpawnLoc[1].z, SpawnLoc[1].o, TEMPSUMMON_TIMED_OR_DEAD_DESPAWN, 120000);
+                me->SummonCreature(NPC_FLAMECALLER, SpawnLoc[2].x, SpawnLoc[2].y, SpawnLoc[2].z, SpawnLoc[2].o, TEMPSUMMON_TIMED_OR_DEAD_DESPAWN, 120000);
 
-            void KilledUnit(Unit* victim)
+                if (pInstance->instance->GetSpawnMode() == RAID_DIFFICULTY_25MAN_NORMAL || pInstance->instance->GetSpawnMode() == RAID_DIFFICULTY_25MAN_HEROIC)
+                    DoCast(SPELL_CALL_FLAMECALLER);
+
+                DoScriptText(-1666204,me);
+                m_uiSummonTimer = 45*IN_MILLISECONDS;
+            } else m_uiSummonTimer -= diff;
+
+            if (m_uiCleaveTimer <= diff)
             {
-                if (victim->GetTypeId() == TYPEID_PLAYER)
-                    Talk(SAY_KILL);
-            }
+                DoCast(SPELL_CLEAVE_ARMOR);
+                m_uiCleaveTimer = urand(10*IN_MILLISECONDS,20*IN_MILLISECONDS);
+            } else m_uiCleaveTimer -= diff;
 
-            void UpdateAI(uint32 const diff)
+            if (m_uiImtimidatingTimer <= diff)
             {
-                if (!UpdateVictim())
-                    return;
-
-                // Can't use room boundary here, the gameobject is spawned at the same position as the boss. This is just as good anyway.
-                if (me->GetPositionX() > 3060.0f)
-                {
-                    EnterEvadeMode();
-                    return;
-                }
-
-                events.Update(diff);
-
-                if (me->HasUnitState(UNIT_STATE_CASTING))
-                    return;
-
-                while (uint32 eventId = events.ExecuteEvent())
-                {
-                    switch (eventId)
-                    {
-                        case EVENT_SUMMON_ADDS:
-                        {
-                            if (Creature* stalker1 = ObjectAccessor::GetCreature(*me, instance->GetData64(DATA_ZARITHIAN_SPAWN_STALKER_1)))
-                                stalker1->AI()->DoCast(stalker1, SPELL_SUMMON_FLAMECALLER);
-                            if (Creature* stalker2 = ObjectAccessor::GetCreature(*me, instance->GetData64(DATA_ZARITHIAN_SPAWN_STALKER_2)))
-                                stalker2->AI()->DoCast(stalker2, SPELL_SUMMON_FLAMECALLER);
-                            Talk(SAY_ADDS);
-                            events.ScheduleEvent(EVENT_SUMMON_ADDS, 42000);
-                            break;
-                        }
-                        case EVENT_INTIDMDATING_ROAR:
-                            DoCast(me, SPELL_INTIMIDATING_ROAR, true);
-                            events.ScheduleEvent(EVENT_INTIDMDATING_ROAR, 42000);
-                        case EVENT_CLEAVE:
-                            DoCastVictim(SPELL_CLEAVE_ARMOR);
-                            events.ScheduleEvent(EVENT_CLEAVE, 15000);
-                            break;
-                        default:
-                            break;
-                    }
-                }
-
-                DoMeleeAttackIfReady();
-            }
-        };
+                DoCast(SPELL_IMTIMIDATING_ROAR);
+                m_uiImtimidatingTimer = urand(15*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            } else m_uiImtimidatingTimer -= diff;
 
-        CreatureAI* GetAI(Creature* creature) const
-        {
-            return GetRubySanctumAI<boss_general_zarithrianAI>(creature);
+            DoMeleeAttackIfReady();
         }
+    };
 };
 
-class npc_onyx_flamecaller : public CreatureScript
+class mob_flamecaller_ruby : public CreatureScript
 {
-    public:
-        npc_onyx_flamecaller() : CreatureScript("npc_onyx_flamecaller") { }
+public:
+    mob_flamecaller_ruby() : CreatureScript("mob_flamecaller_ruby") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_flamecaller_rubyAI(pCreature);
+    }
 
-        struct npc_onyx_flamecallerAI : public npc_escortAI
+    struct mob_flamecaller_rubyAI : public ScriptedAI
+    {
+        mob_flamecaller_rubyAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
-            npc_onyx_flamecallerAI(Creature* creature) : npc_escortAI(creature)
-            {
-                _instance = creature->GetInstanceScript();
-                npc_escortAI::SetDespawnAtEnd(false);
-            }
+            pInstance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
 
-            void Reset()
-            {
-                _lavaGoutCount = 0;
-                me->setActive(true);
-                AddWaypoints();
-                Start(true, true);
-            }
+        InstanceScript* pInstance;
 
-            void EnterCombat(Unit* /*who*/)
-            {
-                _events.Reset();
-                _events.ScheduleEvent(EVENT_BLAST_NOVA, urand(20000, 30000));
-                _events.ScheduleEvent(EVENT_LAVA_GOUT, 5000);
-            }
+        uint32 m_uiLavaGoutTimer;
+        uint32 m_uiBlastNovaTimer;
 
-            void EnterEvadeMode()
-            {
-                // Prevent EvadeMode
-            }
+        void Reset()
+        {
+            if(!pInstance) return;
 
-            void IsSummonedBy(Unit* /*summoner*/)
-            {
-                // Let Zarithrian count as summoner. _instance cant be null since we got GetRubySanctumAI
-                if (Creature* zarithrian = ObjectAccessor::GetCreature(*me, _instance->GetData64(DATA_GENERAL_ZARITHRIAN)))
-                    zarithrian->AI()->JustSummoned(me);
-            }
+            m_uiLavaGoutTimer = urand(8*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            m_uiBlastNovaTimer = urand(10*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            me->SetRespawnDelay(7*DAY);
+        }
 
-            void WaypointReached(uint32 pointId)
-            {
-                if (pointId == MAX_PATH_FLAMECALLER_WAYPOINTS || pointId == MAX_PATH_FLAMECALLER_WAYPOINTS*2)
-                {
-                    DoZoneInCombat();
-                    SetEscortPaused(true);
-                }
-            }
+        void UpdateAI(uint32 const diff)
+        {
+
+            if (pInstance && pInstance->GetData(TYPE_ZARITHRIAN) != IN_PROGRESS)
+                me->ForcedDespawn();
+
+            if (!UpdateVictim())
+                return;
 
-            void AddWaypoints()
+            if (m_uiLavaGoutTimer <= diff)
             {
-                if (me->GetPositionY() < 500.0f)
-                {
-                    for (uint8 i = 0; i < MAX_PATH_FLAMECALLER_WAYPOINTS; i++)
-                        AddWaypoint(i, FlamecallerWaypoints[i].GetPositionX(), FlamecallerWaypoints[i].GetPositionY(), FlamecallerWaypoints[i].GetPositionZ());
-                }
-                else
-                {
-                    for (uint8 i = 0, j = MAX_PATH_FLAMECALLER_WAYPOINTS; j < MAX_PATH_FLAMECALLER_WAYPOINTS*2; j++, i++)
-                        AddWaypoint(i, FlamecallerWaypoints[j].GetPositionX(), FlamecallerWaypoints[j].GetPositionY(), FlamecallerWaypoints[j].GetPositionZ());
-                }
-            }
+                if (Unit *pTarget = SelectTarget(SELECT_TARGET_RANDOM,0))
+                    DoCast(pTarget,SPELL_LAVA_GOUT);
+                m_uiLavaGoutTimer = urand(8*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            } else m_uiLavaGoutTimer -= diff;
 
-            void UpdateEscortAI(uint32 const diff)
+            if (m_uiBlastNovaTimer <= diff)
             {
-                if (!UpdateVictim())
-                    return;
-
-                _events.Update(diff);
-
-                if (me->HasUnitState(UNIT_STATE_CASTING))
-                    return;
-
-                while (uint32 eventId = _events.ExecuteEvent())
-                {
-                    switch (eventId)
-                    {
-                        case EVENT_BLAST_NOVA:
-                            DoCastAOE(SPELL_BLAST_NOVA);
-                            _events.ScheduleEvent(EVENT_BLAST_NOVA, urand(20000, 30000));
-                            break;
-                        case EVENT_LAVA_GOUT:
-                            if (_lavaGoutCount >= 3)
-                            {
-                                _lavaGoutCount = 0;
-                                _events.ScheduleEvent(EVENT_LAVA_GOUT, 8000);
-                                break;
-                            }
-                            DoCastVictim(SPELL_LAVA_GOUT);
-                            _lavaGoutCount++;
-                            _events.ScheduleEvent(EVENT_LAVA_GOUT, 1500);
-                            break;
-                        default:
-                            break;
-                    }
-                }
-
-                DoMeleeAttackIfReady();
-            }
-        private:
-            EventMap _events;
-            bool _movementComplete;
-            InstanceScript* _instance;
-            uint8 _lavaGoutCount;
-        };
-
-        CreatureAI* GetAI(Creature* creature) const
-        {
-            return GetRubySanctumAI<npc_onyx_flamecallerAI>(creature);
+                DoCast(SPELL_BLAST_NOVA);
+                m_uiBlastNovaTimer = urand(10*IN_MILLISECONDS,25*IN_MILLISECONDS);
+            } else m_uiBlastNovaTimer -= diff;
+
+            DoMeleeAttackIfReady();
         }
+    };
 };
 
 void AddSC_boss_general_zarithrian()
 {
-    new boss_general_zarithrian();
-    new npc_onyx_flamecaller();
+    new boss_zarithrian();
+    new mob_flamecaller_ruby();
 }
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_halion.cpp b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_halion.cpp
new file mode 100644
index 0000000..4c04ec1
--- /dev/null
+++ b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_halion.cpp
@@ -0,0 +1,1833 @@
+/*
+ * Copyright (C) 2008 - 2011 Trinity <http://www.trinitycore.org/>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 of the License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+ /* Original de Vlad
+ * Adcicionales y mejoras por Ws
+ * Ajustes/Complementos y limpieza por Eilo (https://github.com/eilo)
+ * WowRean Script www.wowrean.com
+ *
+ * Esta script funciona las zonas de vacio cuando dispelea el pj el combustion y el consuption
+ * ademas tiene el tema de no seleccionar al tank para el meteoro y combustion/consumption tambien
+ * al final se ejecuta un mini evento con unos dragones volando para darle mayor lore a la instance
+ */
+
+#include "ScriptPCH.h"
+#include "ruby_sanctum.h"
+
+enum
+{
+    //SPELLS
+    //All
+    SPELL_TWILIGHT_PRECISION                    = 78243, // Increases Halion's chance to hit by 5% and decreases all players' chance to dodge by 20%
+    SPELL_BERSERK                               = 26662, // Increases the caster's attack and movement speeds by 150% and all damage it deals by 500% for 5 min.  Also grants immunity to Taunt effects.
+    SPELL_START_PHASE2                          = 74808, // Phases the caster into the Twilight realm, leaving behind a large rift.
+    SPELL_TWILIGHT_ENTER                        = 74807, // Phases the caster into the Twilight realm - phase 32
+    SPELL_TWILIGHT_ENTER2                       = 74812, //
+    SPELL_SUMMON_TWILIGHT_PORTAL                = 74809, //
+
+    SPELL_FIRE_PILLAR                           = 76006, // Visual intro
+    SPELL_FIERY_EXPLOSION                       = 76010, // Visual intro
+
+    //NEED SCRIPT
+    SPELL_TAIL_LASH                             = 74531, // A sweeping tail strike hits all enemies behind the caster, inflicting 3063 to 3937 damage and stunning them for 2 sec.
+    SPELL_TWILIGHT_DIVISION                     = 75063, // Phases the caster, allowing him to exist and act simultaneously in both the material and Twilight realms.
+    SPELL_TWILIGHT_CUTTER                       = 77844, // 68114  77844 74769dont work (( Inflicts 13,875 to 16,125 Shadow damage every second to players touched by the shadow beam
+    SPELL_TWILIGHT_CUTTER_CHANNEL               = 74768, // Visual effect triggers 74769
+    //CORPOREALITY
+    SPELL_CORPOREALITY_EVEN                     = 74826, // Deals & receives normal damage
+    SPELL_CORPOREALITY_20I                      = 74827, // Damage dealt increased by 10% & Damage taken increased by 15%
+    SPELL_CORPOREALITY_40I                      = 74828, // Damage dealt increased by 30% & Damage taken increased by 50%
+    SPELL_CORPOREALITY_60I                      = 74829, // Damage dealt increased by 60% & Damage taken increased by 100%
+    SPELL_CORPOREALITY_80I                      = 74830, // Damage dealt increased by 100% & Damage taken increased by 200%
+    SPELL_CORPOREALITY_100I                     = 74831, // Damage dealt increased by 200% & Damage taken increased by 400%
+    SPELL_CORPOREALITY_20D                      = 74832, // Damage dealt reduced by 10% & Damage taken reduced by 15%
+    SPELL_CORPOREALITY_40D                      = 74833, // Damage dealt reduced by 30% & Damage taken reduced by 50%
+    SPELL_CORPOREALITY_60D                      = 74834, // Damage dealt reduced by 60% & Damage taken reduced by 100%
+    SPELL_CORPOREALITY_80D                      = 74835, // Damage dealt reduced by 100% & Damage taken reduced by 200%
+    SPELL_CORPOREALITY_100D                     = 74836, // Damage dealt reduced by 200% & Damage taken reduced by 400%
+    //METEOR STRIKE
+    SPELL_METEOR                                = 74637, // Script Start (summon NPC_METEOR_STRIKE)
+    SPELL_METEOR_IMPACT                         = 74641, // IMPACT ZONE FOR METEOR
+    SPELL_METEOR_STRIKE                         = 74648, // Inflicts 18,750 to 21,250 Fire damage to enemies within 12 yards of the targeted area. Takes about 5 seconds to land.
+    SPELL_METEOR_FLAME                          = 74718, // FLAME FROM METEOR
+    //N10
+    SPELL_FLAME_BREATH                          = 74525, // Inflicts 17,500 to 22,500 Fire damage to players in front of Halion
+    SPELL_DARK_BREATH                           = 74806, // Inflicts 17,500 to 22,500 Shadow damage to players in front of Halion
+    SPELL_DUSK_SHROUD                           = 75484, // Inflicts 3,000 Shadow damage every 2 seconds to everyone in the Twilight Realm
+    //Combustion
+    NPC_COMBUSTION                              = 40001,
+    SPELL_MARK_OF_COMBUSTION                    = 74567, // Dummy effect only
+    SPELL_FIERY_COMBUSTION                      = 74562, // Inflicts 4,000 Fire damage every 2 seconds for 30 seconds to a random raider. Every time Fiery Combustion does damage, it applies a stackable Mark of Combustion.
+    SPELL_COMBUSTION_EXPLODE                    = 74607,
+    SPELL_COMBUSTION_AURA                       = 74629,
+    //Consumption
+    NPC_CONSUMPTION                             = 40135,
+    SPELL_MARK_OF_CONSUMPTION                   = 74795, // Dummy effect only
+    SPELL_SOUL_CONSUMPTION                      = 74792, // Inflicts 4,000 Shadow damage every 2 seconds for 30 seconds to a random raider. Every time Soul Consumption does damage, it applies a stackable Mark of Consumption.
+    SPELL_CONSUMPTION_EXPLODE                   = 74799,
+    SPELL_CONSUMPTION_AURA                      = 74803,
+    //Summons
+    NPC_METEOR_STRIKE                           = 40029, //casts "impact zone" then meteor
+    NPC_METEOR_STRIKE_1                         = 40041,
+    NPC_METEOR_STRIKE_2                         = 40042,
+
+    FR_RADIUS                                   = 45,
+
+    //SAYS
+    SAY_HALION_SPAWN                = -1666100, //17499 Meddlesome insects, you're too late! The Ruby Sanctum is lost.
+    SAY_HALION_AGGRO                = -1666101, //17500 Your world teeters on the brink of annihilation. You will all bear witness to the coming of a new age of destruction!
+    SAY_HALION_SLAY_1               = -1666102, //17501 Another hero falls.
+    SAY_HALION_SLAY_2               = -1666103, //17502 Ha Ha Ha!
+    SAY_HALION_DEATH                = -1666104, //17503 Relish this victory mortals, for it will be your last. This world will burn with the Master's return!
+    SAY_HALION_BERSERK              = -1666105, //17504 Not good enough!
+    SAY_HALION_SPECIAL_1            = -1666106, //17505 The heavens burn!
+    SAY_HALION_SPECIAL_2            = -1666107, //17506 Beware the shadow!
+    SAY_HALION_PHASE_2              = -1666108, //17507 You will find only suffering within the realm of Twilight. Enter if you dare.
+    SAY_HALION_PHASE_3              = -1666109, //17508 I am the light AND the darkness! Cower mortals before the Herald of Deathwing!
+    EMOTE_WARNING                   = -1666110, //orbs charge warning
+    EMOTE_REAL                      = -1666111, // To real world message
+    EMOTE_TWILIGHT                  = -1666112, // To twilight world message
+    EMOTE_NEITRAL                   = -1666113, // Halion reveal HP message
+};
+
+struct Locations
+{
+    float x, y, z;
+};
+
+static Locations SpawnLoc[]=
+{
+    {3154.99f, 535.637f, 72.8887f},            // 0 - Halion spawn point (center)
+};
+
+class boss_halion_real : public CreatureScript
+{
+public:
+    boss_halion_real() : CreatureScript("boss_halion_real") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new boss_halion_realAI(pCreature);
+    }
+
+    struct boss_halion_realAI : public ScriptedAI
+    {
+        boss_halion_realAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* instance;
+
+        bool intro;
+        uint8 stage;
+        uint8 nextPoint;
+        uint32 m_uiIntroTimer;
+        uint32 m_uiIntroAppTimer;
+        uint32 m_uiEnrage;
+        uint32 m_uiFlameTimer;
+        uint32 m_uiFieryTimer;
+        uint32 m_uiMeteorTimer;
+        uint32 m_uiTailLashTimer;
+        bool MovementStarted;
+
+        void Reset()
+        {
+            if(!instance)
+                return;
+
+            me->SetRespawnDelay(7*DAY);
+
+            if (me->isAlive())
+            {
+                instance->SetData(TYPE_HALION, NOT_STARTED);
+                instance->SetData(TYPE_HALION_EVENT, FAIL);
+                me->SetDisplayId(11686);
+            }
+
+            setStage(0);
+            nextPoint = 0;
+            intro = false;
+            m_uiIntroTimer = 1*IN_MILLISECONDS;
+            m_uiIntroAppTimer = 30*IN_MILLISECONDS;
+            m_uiEnrage = 600*IN_MILLISECONDS;
+            m_uiFlameTimer = urand(10*IN_MILLISECONDS,18*IN_MILLISECONDS);
+            m_uiFieryTimer = urand(30*IN_MILLISECONDS,40*IN_MILLISECONDS);
+            m_uiMeteorTimer = urand(30*IN_MILLISECONDS,35*IN_MILLISECONDS);
+            m_uiTailLashTimer = urand(15*IN_MILLISECONDS,25*IN_MILLISECONDS);
+
+            SetCombatMovement(true);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+
+            if (GameObject* pGoPortal = me->FindNearestGameObject(GO_HALION_PORTAL_1, 50.0f))
+                pGoPortal->Delete();
+            if (GameObject* pGoPortal = me->FindNearestGameObject(GO_HALION_PORTAL_2, 50.0f))
+                pGoPortal->Delete();
+            if (GameObject* pGoPortal = me->FindNearestGameObject(GO_HALION_PORTAL_3, 50.0f))
+                pGoPortal->Delete();
+        }
+
+        void setStage(uint8 phase)
+        {
+            stage = phase;
+        }
+
+        uint8 getStage()
+        {
+            return stage;
+        }
+
+        void MoveInLineOfSight(Unit* pWho)
+        {
+            if (!instance)
+                return;
+
+            if (!pWho || pWho->GetTypeId() != TYPEID_PLAYER)
+                return;
+
+            if (!intro && pWho->IsWithinDistInMap(me, 80.0f))
+                {
+                    DoScriptText(-1666100,me);
+                    intro = true;
+                }
+
+            if (intro && !me->isInCombat() && pWho->IsWithinDistInMap(me, 30.0f))
+            {
+               // AttackStart(pWho);
+               me->SetInCombatWith(pWho);
+               SetCombatMovement(false);
+               me->SetFlag(UNIT_FIELD_FLAGS,UNIT_FLAG_DISABLE_MOVE);
+               me->GetMotionMaster()->MoveIdle();
+               setStage(10);
+            }
+
+        }
+
+        void EnterEvadeMode()
+        {
+            if (!instance)
+                return;
+
+            if (instance->GetData(TYPE_HALION_EVENT) != FAIL)
+                return;
+
+            ScriptedAI::EnterEvadeMode();
+        }
+
+        void JustDied(Unit* pKiller)
+        {
+            if (!instance)
+                return;
+
+            DoScriptText(-1666104,me);
+
+            Creature* pclone = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_TWILIGHT));
+
+            if (!pclone || !pclone->isAlive())
+            {
+
+                instance->SetData(TYPE_HALION, DONE);
+                //invoca dragones <HALION> al termino del evento. WS-CORE.
+                me->SummonCreature(NPC_DRAGON, 3236.96f, 556.85f, 113.36f, 3.32f);
+                me->SummonCreature(NPC_DRAGON, 3229.16f, 497.82f, 111.209f, 2.7f);
+                me->SummonCreature(NPC_DRAGON, 3193.10f, 533.63f, 103.49f, 3.14f);
+                me->SummonCreature(NPC_DRAGON, 3153.33f, 574.20f, 97.13f, 4.8f);
+                me->SummonCreature(NPC_DRAGON, 3151.94f, 492.30f, 97.28f, 1.5f);
+                me->SummonCreature(NPC_DRAGON, 3119.94f, 535.65f, 100.36f, 6.2f);
+                me->isAlive();
+                me->SetFlag(UNIT_DYNAMIC_FLAGS, UNIT_DYNFLAG_LOOTABLE);
+                instance->SetData(TYPE_COUNTER, 0);
+            }
+            else
+            {
+                me->RemoveFlag(UNIT_DYNAMIC_FLAGS, UNIT_DYNFLAG_LOOTABLE);
+            }
+        }
+
+        void KilledUnit(Unit* pVictim)
+        {
+            switch (urand(0,1))
+            {
+                case 0:
+                    DoScriptText(-1631006,me,pVictim);
+                    break;
+                case 1:
+                    DoScriptText(-1631007,me,pVictim);
+                    break;
+            }
+        }
+
+        void EnterCombat(Unit* pWho)
+        {
+            if (!instance)
+                return;
+
+            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            DoCast(SPELL_TWILIGHT_PRECISION);
+            me->SetInCombatWithZone();
+            instance->SetData(TYPE_HALION, IN_PROGRESS);
+            DoScriptText(-1666101, me);
+        }
+
+        void MovementInform(uint32 type, uint32 id)
+        {
+            if (!instance)
+                return;
+
+            if (type != POINT_MOTION_TYPE || !MovementStarted)
+                return;
+
+            if (id == nextPoint)
+            {
+                me->GetMotionMaster()->MovementExpired();
+                MovementStarted = false;
+            }
+        }
+
+        void StartMovement(uint32 id)
+        {
+            nextPoint = id;
+            me->GetMotionMaster()->Clear();
+            me->GetMotionMaster()->MovePoint(id, SpawnLoc[id].x, SpawnLoc[id].y, SpawnLoc[id].z);
+            MovementStarted = true;
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!instance)
+                return;
+
+            if (!UpdateVictim())
+                return;
+
+            switch (getStage())
+            {
+                case 10: //PHASE INTRO
+                    if (m_uiIntroTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_FIRE_PILLAR);
+                        m_uiIntroAppTimer = 10*IN_MILLISECONDS;
+                        m_uiIntroTimer = 30*IN_MILLISECONDS;
+                    } else m_uiIntroTimer -= uiDiff;
+
+                    if (m_uiIntroAppTimer <= uiDiff)
+                    {
+                        me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                        me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC);
+                        me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                        me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
+                        me->RemoveFlag(UNIT_FIELD_FLAGS,UNIT_FLAG_DISABLE_MOVE);
+                        DoCast(SPELL_FIERY_EXPLOSION);
+                        me->SetDisplayId(31952);
+                        SetCombatMovement(true);
+                        me->GetMotionMaster()->MoveChase(me->getVictim());
+                        setStage(0);
+                        m_uiIntroAppTimer = 30*IN_MILLISECONDS;
+                    } else m_uiIntroAppTimer -= uiDiff;
+
+                    break;
+
+                case 0: //PHASE 1 PHYSICAL REALM
+                    if (m_uiFlameTimer <= uiDiff)
+                    {
+                        DoCast(me, SPELL_FLAME_BREATH);
+                        m_uiFlameTimer = urand(12*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiFlameTimer -= uiDiff;
+
+                    if (m_uiTailLashTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_TAIL_LASH);
+                        m_uiTailLashTimer = urand(10*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiTailLashTimer -= uiDiff;
+
+                    if (m_uiMeteorTimer <= uiDiff)
+                    {
+                        Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 45.0f, true);
+                        if (target)
+                        {
+                            DoCast(target, SPELL_METEOR);
+                            m_uiMeteorTimer = urand(30*IN_MILLISECONDS,35*IN_MILLISECONDS);
+                        }
+                    } else m_uiMeteorTimer -= uiDiff;
+
+                    if (m_uiFieryTimer <= uiDiff)
+                    {
+                        Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 45.0f, true);
+                        if (target)
+                        {
+                            DoCast(target, SPELL_FIERY_COMBUSTION);
+                            m_uiFieryTimer = urand(25*IN_MILLISECONDS,40*IN_MILLISECONDS);
+                        }
+                    } else m_uiFieryTimer -= uiDiff;
+
+                    if ( HealthBelowPct(76))
+                    {
+                        setStage(1);
+                        me->AttackStop();
+                        me->InterruptNonMeleeSpells(true);
+                        SetCombatMovement(false);
+                        me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                        me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                    }
+                    break;
+
+                case 1: // Switch to phase 2
+                    {
+                        DoScriptText(-1666108,me);
+                        instance->SetData(TYPE_HALION_EVENT, NOT_STARTED);
+                        StartMovement(0);
+                            Creature* pControl = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_CONTROL));
+                            if (!pControl)
+                                pControl = me->SummonCreature(NPC_HALION_CONTROL, SpawnLoc[0].x, SpawnLoc[0].y, SpawnLoc[0].z, 0, TEMPSUMMON_MANUAL_DESPAWN, 1000);
+                            else if (!pControl->isAlive())
+                                pControl->Respawn();
+                            pControl->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                            me->SetInCombatWith(pControl);
+                            pControl->SetInCombatWith(me);
+                        setStage(2);
+                        break;
+                    }
+                case 2:
+                    if (MovementStarted)
+                        return;
+
+                    DoCast(me, SPELL_SUMMON_TWILIGHT_PORTAL);
+                    setStage(3);
+                    if (GameObject* pGoPortal = instance->instance->GetGameObject(instance->GetData64(GO_HALION_PORTAL_1)))
+                        pGoPortal->SetPhaseMask(31,true);
+                    if (GameObject* pGoRing = instance->instance->GetGameObject(instance->GetData64(GO_FLAME_CREP)))
+                        pGoRing->SetPhaseMask(65535,true);
+                    //Ahora se queman los arboles < script HALION> WS-CORE
+                    if (GameObject* pGO = GameObject::GetGameObject(*me, instance->GetData64(GO_ARBOL)))
+                        instance->HandleGameObject(pGO->GetGUID(),true);
+
+                    if (GameObject* pGO = GameObject::GetGameObject(*me, instance->GetData64(GO_ARBOL1)))
+                        instance->HandleGameObject(pGO->GetGUID(),true);
+
+                    if (GameObject* pGO = GameObject::GetGameObject(*me, instance->GetData64(GO_ARBOL2)))
+                        instance->HandleGameObject(pGO->GetGUID(),true);
+
+                    if (GameObject* pGO = GameObject::GetGameObject(*me, instance->GetData64(GO_ARBOL3)))
+                        instance->HandleGameObject(pGO->GetGUID(),true);
+
+                    break;
+
+                case 3:
+                    if (me->IsNonMeleeSpellCasted(false))
+                        return;
+                    DoCast(SPELL_START_PHASE2);
+                    setStage(4);
+                    break;
+
+                case 4:
+                    if (!me->IsNonMeleeSpellCasted(false))
+                    {
+                        if (Creature* pControl = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_CONTROL)))
+                        {
+                            me->SetInCombatWith(pControl);
+                            pControl->SetInCombatWith(me);
+                        }
+                        Creature* pTwilight = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_TWILIGHT));
+                        if (!pTwilight)
+                            pTwilight = me->SummonCreature(NPC_HALION_TWILIGHT, SpawnLoc[0].x, SpawnLoc[0].y, SpawnLoc[0].z, 0, TEMPSUMMON_MANUAL_DESPAWN, 1000);
+                        else if (!pTwilight->isAlive())
+                            pTwilight->Respawn();
+                        pTwilight->SetCreatorGUID(0);
+                        me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                        setStage(5);
+                    }
+                    break;
+                case 5: // HALION awaiting end battle in TWILIGHT REALM
+                    if (instance->GetData(TYPE_HALION_EVENT) == IN_PROGRESS)
+                        {
+//                            instance->SetData(TYPE_HALION_EVENT, SPECIAL);
+                            me->RemoveAurasDueToSpell(SPELL_START_PHASE2);
+                            if (Creature* pControl = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_CONTROL)))
+                            {
+                                me->SetInCombatWith(pControl);
+                                pControl->SetInCombatWith(me);
+                            }
+                            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC);
+                            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
+                            me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+                            me->SetHealth(me->GetMaxHealth()/2);
+                            me->SetInCombatWithZone();
+                            setStage(6);
+                        }
+                    return;
+
+                case 6: // Switch to phase 3
+//                    DoCast(SPELL_TWILIGHT_DIVISION);
+                    DoScriptText(-1666109,me);
+                    instance->SetData(TYPE_HALION_EVENT, SPECIAL);
+                    setStage(7);
+                    break;
+
+                case 7:
+                    if (me->IsNonMeleeSpellCasted(false))
+                        return;
+                    if (me->getVictim()->GetTypeId() != TYPEID_PLAYER)
+                        return;
+                    SetCombatMovement(true);
+                    me->GetMotionMaster()->MoveChase(me->getVictim());
+                    setStage(8);
+                    break;
+
+                case 8: //PHASE 3 BOTH REALMS
+                    if (m_uiFlameTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_FLAME_BREATH);
+                        m_uiFlameTimer = urand(12*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiFlameTimer -= uiDiff;
+
+                    if (m_uiTailLashTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_TAIL_LASH);
+                        m_uiTailLashTimer = urand(10*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiTailLashTimer -= uiDiff;
+
+                    if (m_uiMeteorTimer <= uiDiff)
+                    {
+                        Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 45.0f, true);
+                        if (target)
+                        {
+                            DoCast(target, SPELL_METEOR);
+                            m_uiMeteorTimer = urand(30*IN_MILLISECONDS,35*IN_MILLISECONDS);
+                        }
+                    } else m_uiMeteorTimer -= uiDiff;
+
+                    if (m_uiFieryTimer <= uiDiff)
+                    {
+                        Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 45.0f, true);
+                        if (target)
+                        {
+                            DoCast(target, SPELL_FIERY_COMBUSTION);
+                            m_uiFieryTimer = urand(25*IN_MILLISECONDS,40*IN_MILLISECONDS);
+                        }
+                    } else m_uiFieryTimer -= uiDiff;
+
+                    break;
+
+                default:
+                    break;
+            }
+
+            if (m_uiEnrage <= uiDiff)
+            {
+                DoCast(SPELL_BERSERK);
+                m_uiEnrage = 600*IN_MILLISECONDS;
+                DoScriptText(-1666105,me);
+            } else m_uiEnrage -= uiDiff;
+
+            DoMeleeAttackIfReady();
+        }
+    };
+};
+
+class boss_halion_twilight : public CreatureScript
+{
+public:
+    boss_halion_twilight() : CreatureScript("boss_halion_twilight") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new boss_halion_twilightAI(pCreature);
+    }
+
+    struct boss_halion_twilightAI : public ScriptedAI
+    {
+        boss_halion_twilightAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* instance;
+
+        uint8 stage;
+        bool intro;
+        uint32 m_uiEnrage;
+        uint32 m_uiDuskTimer;
+        uint32 m_uiDarkBreathTimer;
+        uint32 m_uiSoulCunsumTimer;
+        uint32 m_uiTailLashTimer;
+
+        void Reset()
+        {
+            if(!instance)
+                return;
+            me->SetRespawnDelay(7*DAY);
+            setStage(0);
+            intro = false;
+
+            m_uiEnrage = 600*IN_MILLISECONDS;
+            m_uiDuskTimer = 2*IN_MILLISECONDS;
+            m_uiDarkBreathTimer = urand(12*IN_MILLISECONDS,20*IN_MILLISECONDS);
+            m_uiSoulCunsumTimer = urand(30*IN_MILLISECONDS,40*IN_MILLISECONDS);
+            m_uiTailLashTimer = urand(10*IN_MILLISECONDS,20*IN_MILLISECONDS);
+            me->SummonGameObject(GO_FLAME_CREP, 3154.56f, 535.418f, 72.8889f, 4.47206f, 0, 0, 0.786772f, -0.617243f, 0); // circulo crepuscular
+            if (GameObject* pGoRing = instance->instance->GetGameObject(instance->GetData64(GO_FLAME_CREP)))
+                pGoRing->SetPhaseMask(65535,true);
+
+            me->SetInCombatWithZone();
+            if (Creature* pControl = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_CONTROL)))
+            {
+                me->SetInCombatWith(pControl);
+                pControl->SetInCombatWith(me);
+            }
+
+            Creature* pFocus = me->GetMap()->GetCreature(instance->GetData64(NPC_ORB_ROTATION_FOCUS));
+            if (!pFocus )
+                pFocus = me->SummonCreature(NPC_ORB_ROTATION_FOCUS, SpawnLoc[0].x, SpawnLoc[0].y, SpawnLoc[0].z, 0, TEMPSUMMON_MANUAL_DESPAWN, 1000);
+            else if (!pFocus->isAlive())
+                pFocus->Respawn();
+
+            if (Creature* pReal = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_REAL)))
+                if (pReal->isAlive())
+                    me->SetHealth(pReal->GetHealth());
+            if (!me->HasAura(SPELL_TWILIGHT_ENTER))
+                DoCast(me, SPELL_TWILIGHT_ENTER);
+        }
+
+        void setStage(uint8 phase)
+        {
+            stage = phase;
+        }
+
+        uint8 getStage()
+        {
+            return stage;
+        }
+
+        void JustReachedHome()
+        {
+            if (!instance)
+                return;
+
+            if (instance->GetData(TYPE_HALION_EVENT) != FAIL || getStage() == 0)
+                return;
+            if (GameObject* pGOTemp = me->FindNearestGameObject(GO_FLAME_CREP, 100.0f))
+                   pGOTemp->Delete();
+        }
+
+        void EnterEvadeMode()
+        {
+
+            if (!instance)
+                return;
+
+            if (instance->GetData(TYPE_HALION_EVENT) != FAIL || getStage() == 0)
+                return;
+
+            ScriptedAI::EnterEvadeMode();
+        }
+
+        void MoveInLineOfSight(Unit* pWho)
+        {
+            if (!instance) return;
+
+            if (!pWho || pWho->GetTypeId() != TYPEID_PLAYER)
+                return;
+
+            if ( !intro && pWho->IsWithinDistInMap(me, 20.0f))
+            {
+                me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC);
+                me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_NPC);
+                intro = true;
+                AttackStart(pWho);
+                setStage(1);
+                DoCast(SPELL_TWILIGHT_PRECISION);
+                if (Creature* pReal = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_REAL)))
+                    if (pReal->isAlive())
+                       me->SetHealth(pReal->GetHealth());
+            }
+
+        }
+
+        void JustDied(Unit* pKiller)
+        {
+            if (!instance)
+                return;
+            DoScriptText(-1666104,me);
+            instance->DoRemoveAurasDueToSpellOnPlayers(SPELL_TWILIGHT_ENTER);
+
+            if (GameObject* pGoPortal = me->FindNearestGameObject(GO_HALION_PORTAL_1, 50.0f))
+                   pGoPortal->Delete();
+            if (GameObject* pGoPortal = me->FindNearestGameObject(GO_HALION_PORTAL_2, 50.0f))
+                   pGoPortal->Delete();
+            if (GameObject* pGoPortal = me->FindNearestGameObject(GO_HALION_PORTAL_3, 50.0f))
+                   pGoPortal->Delete();
+            if (GameObject* pGOTemp = me->FindNearestGameObject(GO_FLAME_CREP, 100.0f))
+                   pGOTemp->Delete();
+
+            if (Creature* pReal = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_REAL)))
+                if (!pReal->isAlive())
+                {
+                    instance->SetData(TYPE_HALION, DONE);
+                    pReal->SetFlag(UNIT_DYNAMIC_FLAGS, UNIT_DYNFLAG_LOOTABLE);
+                    instance->SetData(TYPE_COUNTER, 0);
+                }
+            me->ForcedDespawn();
+        }
+
+        void KilledUnit(Unit* pVictim)
+        {
+            switch (urand(0,1))
+            {
+                case 0:
+                    DoScriptText(-1631006,me,pVictim);
+                    break;
+                case 1:
+                    DoScriptText(-1631007,me,pVictim);
+                    break;
+            }
+        }
+
+        void EnterCombat(Unit* pWho)
+        {
+            if (!instance)
+                return;
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+
+            if (!me->HasAura(SPELL_TWILIGHT_ENTER))
+                DoCast(me, SPELL_TWILIGHT_ENTER);
+
+            if (!instance)
+            {
+                me->ForcedDespawn();
+                    return;
+            }
+
+            if (!instance || instance->GetData(TYPE_HALION) != IN_PROGRESS || instance->GetData(TYPE_HALION_EVENT) == FAIL)
+            {
+                if (Creature* pReal = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_REAL)))
+                    if (!pReal->isAlive())
+                        pReal->Respawn();
+
+                me->ForcedDespawn();
+            }
+
+            if (!UpdateVictim())
+                return;
+
+            switch (getStage())
+            {
+                case 1:           //SPAWNED - Twilight realm
+//                DoCast(SPELL_TWILIGHT_DIVISION);
+
+                    if (m_uiDuskTimer <= uiDiff)
+                    {
+                        if (!me->IsNonMeleeSpellCasted(false))
+                            DoCast(SPELL_DUSK_SHROUD);
+                        m_uiDuskTimer = 2*IN_MILLISECONDS;
+                    } else m_uiDuskTimer -= uiDiff;
+
+                    if (m_uiDarkBreathTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_DARK_BREATH);
+                        m_uiDarkBreathTimer = urand(12*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiDarkBreathTimer -= uiDiff;
+
+                    if (m_uiTailLashTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_TAIL_LASH);
+                        m_uiTailLashTimer = urand(10*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiTailLashTimer -= uiDiff;
+
+                    if (m_uiSoulCunsumTimer <= uiDiff)
+                    {
+                        Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 45.0f, true);
+                        if (target)
+                        {
+                            DoCast(target, SPELL_SOUL_CONSUMPTION);
+                            m_uiSoulCunsumTimer = urand(25*IN_MILLISECONDS,40*IN_MILLISECONDS);
+                        }
+                    } else m_uiSoulCunsumTimer -= uiDiff;
+
+                    if ( HealthBelowPct(51) )
+                        setStage(2);
+                    break;
+
+                case 2:           //To two realms
+                    instance->SetData(TYPE_HALION_EVENT, IN_PROGRESS);
+                    DoScriptText(-1666109,me);
+                    if (GameObject* pGoPortal = me->SummonGameObject(GO_HALION_PORTAL_3, SpawnLoc[0].x, SpawnLoc[0].y, SpawnLoc[0].z, 4.47206f, 0, 0, 0.786772f, -0.617243f, 99999999))
+                    {
+                        pGoPortal->SetPhaseMask(32,true);
+                        pGoPortal->SetRespawnTime(9999999);
+                        pGoPortal->SetOwnerGUID(NULL);
+                    }
+                    DoCast(SPELL_TWILIGHT_DIVISION);
+                    setStage(3);
+                    break;
+                case 3: //PHASE 3 BOTH REALMS
+                    if (m_uiDuskTimer <= uiDiff)
+                    {
+                        if (!me->IsNonMeleeSpellCasted(false))
+                            DoCast(SPELL_DUSK_SHROUD);
+                        m_uiDuskTimer = 2*IN_MILLISECONDS;
+                    } else m_uiDuskTimer -= uiDiff;
+
+                    if (m_uiDarkBreathTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_DARK_BREATH);
+                        m_uiDarkBreathTimer = urand(12*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiDarkBreathTimer -= uiDiff;
+
+                    if (m_uiTailLashTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_TAIL_LASH);
+                        m_uiTailLashTimer = urand(10*IN_MILLISECONDS,20*IN_MILLISECONDS);
+                    } else m_uiTailLashTimer -= uiDiff;
+
+                    if (m_uiSoulCunsumTimer <= uiDiff)
+                    {
+                        Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 45.0f, true);
+                        if (target)
+                        {
+                            DoCast(target, SPELL_SOUL_CONSUMPTION);
+                            m_uiSoulCunsumTimer = urand(25*IN_MILLISECONDS,40*IN_MILLISECONDS);
+                        }
+                    } else m_uiSoulCunsumTimer -= uiDiff;
+                    break;
+                default:
+                    break;
+            }
+
+            if (m_uiEnrage <= uiDiff)
+            {
+                 DoCast(SPELL_BERSERK);
+                 m_uiEnrage = 600*IN_MILLISECONDS;
+                 DoScriptText(-1666105,me);
+            } else m_uiEnrage -= uiDiff;
+
+            DoMeleeAttackIfReady();
+        }
+    };
+};
+
+struct HalionBuffLine
+{
+    float diff;                // Health diff in percent
+    uint32 real, twilight;     // Buff pair
+};
+
+static HalionBuffLine Buff[]=
+{
+    {-10.0f,SPELL_CORPOREALITY_100I, SPELL_CORPOREALITY_100D},
+    {-8.0f,SPELL_CORPOREALITY_80I, SPELL_CORPOREALITY_80D},
+    {-6.0f,SPELL_CORPOREALITY_60I, SPELL_CORPOREALITY_60D},
+    {-4.0f,SPELL_CORPOREALITY_40I, SPELL_CORPOREALITY_40D},
+    {-2.0f,SPELL_CORPOREALITY_20I, SPELL_CORPOREALITY_20D},
+    {-1.0f,SPELL_CORPOREALITY_EVEN, SPELL_CORPOREALITY_EVEN},
+    {1.0f,SPELL_CORPOREALITY_EVEN, SPELL_CORPOREALITY_EVEN},
+    {2.0f,SPELL_CORPOREALITY_20D, SPELL_CORPOREALITY_20I},
+    {4.0f,SPELL_CORPOREALITY_40D, SPELL_CORPOREALITY_40I},
+    {6.0f,SPELL_CORPOREALITY_60D, SPELL_CORPOREALITY_60I},
+    {8.0f,SPELL_CORPOREALITY_80D, SPELL_CORPOREALITY_80I},
+    {10.0f,SPELL_CORPOREALITY_100D, SPELL_CORPOREALITY_100I},
+};
+
+class mob_halion_control : public CreatureScript
+{
+public:
+    mob_halion_control() : CreatureScript("mob_halion_control") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_halion_controlAI(pCreature);
+    }
+
+    struct mob_halion_controlAI : public ScriptedAI
+    {
+        mob_halion_controlAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* instance;
+        Creature* pHalionReal;
+        Creature* pHalionTwilight;
+        uint32 m_lastBuffReal, m_lastBuffTwilight;
+        uint32 m_uiCorporealityTimer;
+        bool m_detectplayers;
+
+        void Reset()
+        {
+            if (!instance)
+                return;
+
+            m_uiCorporealityTimer = 5*IN_MILLISECONDS;
+            m_detectplayers = true;
+            me->SetDisplayId(11686);
+            me->SetPhaseMask(65535, true);
+//        me->SetDisplayId(10045);
+            me->SetRespawnDelay(7*DAY);
+            SetCombatMovement(false);
+            m_lastBuffReal = 0;
+            m_lastBuffTwilight = 0;
+            instance->SetData(TYPE_COUNTER, 0);
+            instance->SetData(TYPE_HALION_EVENT, NOT_STARTED);
+        }
+
+        void AttackStart(Unit *who)
+        {
+            //ignore all attackstart commands
+            return;
+        }
+
+        bool doSearchPlayerAtRange(float range)
+        {
+            Map* pMap = me->GetMap();
+            if (pMap && pMap->IsDungeon())
+            {
+                Map::PlayerList const &PlayerList = pMap->GetPlayers();
+                if (!PlayerList.isEmpty())
+                   for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
+                    {
+                       if (!i->getSource()->IsInMap(me)) continue;
+                       if (i->getSource()->isGameMaster()) continue;
+                       if (i->getSource()->isAlive()  && i->getSource()->IsWithinDistInMap(me, range))
+                           return true;
+                    }
+            }
+            return false;
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if (!instance)
+            {
+                me->ForcedDespawn();
+                return;
+            }
+
+            if (instance->GetData(TYPE_HALION) != IN_PROGRESS)
+            {
+                me->ForcedDespawn();
+                return;
+            }
+
+            if (m_uiCorporealityTimer <= diff)
+            {
+                if (!doSearchPlayerAtRange(100.0f))
+                {
+                    sLog->outDebug(LOG_FILTER_MAPS, "ruby_sanctum: cannot detect players in range! ");
+                    if (!m_detectplayers)
+                    {
+                        instance->SetData(TYPE_HALION_EVENT, FAIL);
+                        instance->SetData(TYPE_HALION, FAIL);
+                        me->ForcedDespawn();
+                    } else m_detectplayers = false;
+                } else m_detectplayers = true;
+
+                if (instance->GetData(TYPE_HALION_EVENT) != SPECIAL)
+                    return;
+
+                pHalionReal = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_REAL));
+                pHalionTwilight = me->GetMap()->GetCreature(instance->GetData64(NPC_HALION_TWILIGHT));
+
+                float p_RealHP = (pHalionReal && pHalionReal->isAlive()) ? pHalionReal->GetHealthPct() : 100.0f;
+                float p_TwilightHP = (pHalionTwilight && pHalionTwilight->isAlive()) ? pHalionTwilight->GetHealthPct() : 100.0f;
+
+                float m_diff = (p_RealHP - p_TwilightHP);
+
+                uint8 buffnum;
+
+                if (m_diff <= Buff[0].diff) buffnum = 0;
+                else for (uint8 i = 0; i < 11; i++)
+                    if (m_diff >= Buff[i].diff)
+                        buffnum = i+1;
+                    else
+                    break;
+
+                if (!m_lastBuffReal || m_lastBuffReal != Buff[buffnum].real)
+                {
+                    if (pHalionReal && pHalionReal->isAlive())
+                    {
+                        if (m_lastBuffReal) pHalionReal->RemoveAurasDueToSpell(m_lastBuffReal);
+                            pHalionReal->CastSpell(pHalionReal, Buff[buffnum].real, true);
+                        m_lastBuffReal = Buff[buffnum].real;
+                    }
+                }
+
+                if (!m_lastBuffTwilight || m_lastBuffTwilight != Buff[buffnum].twilight)
+                {
+                    if (pHalionTwilight && pHalionTwilight->isAlive())
+                    {
+                        if (m_lastBuffTwilight) pHalionTwilight->RemoveAurasDueToSpell(m_lastBuffTwilight);
+                            pHalionTwilight->CastSpell(pHalionTwilight, Buff[buffnum].twilight, true);
+                        m_lastBuffTwilight = Buff[buffnum].twilight;
+                    }
+                }
+
+                instance->SetData(TYPE_COUNTER, 50 + (int)Buff[buffnum].diff);
+                m_uiCorporealityTimer = 5*IN_MILLISECONDS;
+            } else m_uiCorporealityTimer -= diff;
+        }
+    };
+};
+
+class mob_orb_rotation_focus : public CreatureScript
+{
+public:
+    mob_orb_rotation_focus() : CreatureScript("mob_orb_rotation_focus") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_orb_rotation_focusAI(pCreature);
+    }
+
+    struct mob_orb_rotation_focusAI : public ScriptedAI
+    {
+        mob_orb_rotation_focusAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* instance;
+
+        uint32 m_timer;
+        float m_direction, m_nextdirection;
+        bool m_warning;
+
+        void Reset()
+        {
+            me->SetDisplayId(11686);
+//        me->SetDisplayId(10045);
+            me->SetRespawnDelay(7*DAY);
+            me->SetPhaseMask(65535, true);
+            SetCombatMovement(false);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            m_direction = 0.0f;
+            m_nextdirection = 0.0f;
+            m_timer = 30000;
+            m_warning = false;
+
+            Creature* pPulsar1 = me->GetMap()->GetCreature(instance->GetData64(NPC_SHADOW_PULSAR_N));
+            if (!pPulsar1 )
+            {
+                float x,y;
+                me->GetNearPoint2D(x, y, FR_RADIUS, m_direction);
+                pPulsar1 = me->SummonCreature(NPC_SHADOW_PULSAR_N, x, y, me->GetPositionZ(), 0, TEMPSUMMON_MANUAL_DESPAWN, 5000);
+            } else if (!pPulsar1->isAlive())
+                pPulsar1->Respawn();
+
+            Creature* pPulsar2 = me->GetMap()->GetCreature(instance->GetData64(NPC_SHADOW_PULSAR_S));
+            if (!pPulsar2)
+            {
+                float x,y;
+                me->GetNearPoint2D(x, y, FR_RADIUS, m_direction + M_PI);
+                pPulsar2 = me->SummonCreature(NPC_SHADOW_PULSAR_S, x, y, me->GetPositionZ(), 0, TEMPSUMMON_MANUAL_DESPAWN, 5000);
+            } else if (!pPulsar2->isAlive())
+                pPulsar2->Respawn();
+        }
+
+        void AttackStart(Unit *who)
+        {
+            //ignore all attackstart commands
+            return;
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!instance)
+                  me->ForcedDespawn();
+            if (instance->GetData(TYPE_HALION) != IN_PROGRESS)
+                  me->ForcedDespawn();
+
+            if (instance->GetData(DATA_ORB_S) == DONE && instance->GetData(DATA_ORB_N) == DONE)
+            {
+                m_direction = m_nextdirection;
+                m_nextdirection = (m_direction - M_PI/64.0f);
+                if (m_nextdirection < 0.0f )
+                    m_nextdirection = m_nextdirection + 2.0f*M_PI;
+                instance->SetData(DATA_ORB_DIRECTION, (uint32)(m_nextdirection*1000));
+                instance->SetData(DATA_ORB_N, SPECIAL);
+                instance->SetData(DATA_ORB_S, SPECIAL);
+                sLog->outDebug(LOG_FILTER_MAPS, "EventMGR: creature %u send direction %u ",me->GetEntry(),instance->GetData(DATA_ORB_DIRECTION));
+            }
+
+            if (m_timer - 6000 <= uiDiff && !m_warning)
+            {
+                DoScriptText(-1666110,me);
+                m_warning = true;
+            }
+
+            Creature* pPulsar1 = me->GetMap()->GetCreature(instance->GetData64(NPC_SHADOW_PULSAR_N));
+            Creature* pPulsar2 = me->GetMap()->GetCreature(instance->GetData64(NPC_SHADOW_PULSAR_S));
+            if (m_timer <= uiDiff)
+            {
+                float x,y;
+                me->GetNearPoint2D(x, y, FR_RADIUS, m_nextdirection);
+                me->SummonCreature(NPC_ORB_CARRIER, x, y, me->GetPositionZ(), 0, TEMPSUMMON_MANUAL_DESPAWN, 5000);
+                m_timer = 30000;
+                m_warning = false;
+                pPulsar1->CastSpell(pPulsar2, SPELL_TWILIGHT_CUTTER_CHANNEL,false);
+                //pPulsar2->CastSpell(pPulsar1, SPELL_TWILIGHT_CUTTER,false);
+            } else m_timer -= uiDiff;
+        }
+    };
+};
+
+class mob_halion_orb : public CreatureScript
+{
+public:
+    mob_halion_orb() : CreatureScript("mob_halion_orb") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_halion_orbAI(pCreature);
+    }
+
+    struct mob_halion_orbAI : public ScriptedAI
+    {
+        mob_halion_orbAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* instance;
+
+        float m_direction,m_delta;
+        uint32 m_flag;
+        uint32 m_flag1;
+        bool MovementStarted;
+        Creature* focus;
+        uint32 nextPoint;
+
+        void Reset()
+        {
+            if (!instance)
+                return;
+            me->SetRespawnDelay(7*DAY);
+           // me->SetDisplayId(11686);
+            SetCombatMovement(false);
+            me->SetPhaseMask(32, true);
+            //me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            if (me->GetEntry() == NPC_SHADOW_PULSAR_N)
+            {
+                m_flag = DATA_ORB_N;
+                m_delta = 0.0f;
+            } else if (me->GetEntry() == NPC_SHADOW_PULSAR_S)
+            {
+                m_flag = DATA_ORB_S;
+                m_delta = M_PI;
+            };
+            m_direction = 0.0f;
+            nextPoint = 0;
+            MovementStarted = false;
+            instance->SetData(m_flag, DONE);
+            sLog->outDebug(LOG_FILTER_MAPS, "EventMGR: creature %u assume m_flag %u ",me->GetEntry(),m_flag);
+        }
+
+        void AttackStart(Unit *who)
+        {
+            //ignore all attackstart commands
+            return;
+        }
+
+        void MovementInform(uint32 type, uint32 id)
+        {
+            if (!instance)
+                return;
+
+            if (type != POINT_MOTION_TYPE || !MovementStarted)
+                return;
+
+            if (id == nextPoint)
+            {
+                me->GetMotionMaster()->MovementExpired();
+                MovementStarted = false;
+                instance->SetData(m_flag, DONE);
+            }
+        }
+
+        void StartMovement(uint32 id)
+        {
+            if (!instance)
+                return;
+
+            nextPoint = id;
+            float x,y;
+            instance->SetData(m_flag, IN_PROGRESS);
+            MovementStarted = true;
+            m_direction = ((float)instance->GetData(DATA_ORB_DIRECTION)/1000 + m_delta);
+            if (m_direction > 2.0f*M_PI) m_direction = m_direction - 2.0f*M_PI;
+            if (focus = me->GetMap()->GetCreature(instance->GetData64(NPC_ORB_ROTATION_FOCUS)))
+                focus->GetNearPoint2D(x, y, FR_RADIUS, m_direction);
+            else
+                me->ForcedDespawn();
+            me->GetMotionMaster()->Clear();
+            me->GetMotionMaster()->MovePoint(id, x, y,  me->GetPositionZ());
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!instance)
+                  me->ForcedDespawn();
+            if (instance->GetData(TYPE_HALION) != IN_PROGRESS)
+                  me->ForcedDespawn();
+            if (!MovementStarted && instance->GetData(m_flag) == SPECIAL)
+                StartMovement(1);
+        }
+    };
+};
+
+class mob_orb_carrier : public CreatureScript
+{
+public:
+    mob_orb_carrier() : CreatureScript("mob_orb_carrier") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_orb_carrierAI(pCreature);
+    }
+
+    struct mob_orb_carrierAI : public ScriptedAI
+    {
+        mob_orb_carrierAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* instance;
+
+        bool MovementStarted;
+
+        void Reset()
+        {
+//          me->SetDisplayId(10045);
+      //    me->SetDisplayId(11686);
+            me->SetRespawnDelay(7*DAY);
+            SetCombatMovement(false);
+            me->SetPhaseMask(32, true);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            MovementStarted = false;
+            me->RemoveUnitMovementFlag(MOVEMENTFLAG_WALKING); //or remove???
+            me->SetSpeed(MOVE_RUN, 6.0f, true);
+        }
+
+        void AttackStart(Unit *pWho)
+        {
+            return;
+        }
+
+        void MovementInform(uint32 type, uint32 id)
+        {
+            if (!instance) return;
+
+            if (type != POINT_MOTION_TYPE || !MovementStarted)
+                return;
+
+            if (id == 1)
+            {
+                me->GetMotionMaster()->MovementExpired();
+                MovementStarted = false;
+                me->ForcedDespawn();
+            }
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!instance || instance->GetData(TYPE_HALION) != IN_PROGRESS)
+                  me->ForcedDespawn();
+            if (!MovementStarted)
+            {
+                float x,y;
+                float m_direction = ((float)instance->GetData(DATA_ORB_DIRECTION)/1000.0f + M_PI - M_PI/32.0f);
+                if (m_direction > 2.0f*M_PI) m_direction = m_direction - 2.0f*M_PI;
+                if (Creature* focus = me->GetMap()->GetCreature(instance->GetData64(NPC_ORB_ROTATION_FOCUS)))
+                    focus->GetNearPoint2D(x, y, FR_RADIUS, m_direction);
+                else me->ForcedDespawn();
+                me->GetMotionMaster()->Clear();
+                me->GetMotionMaster()->MovePoint(1, x, y,  me->GetPositionZ());
+                MovementStarted = true;
+            }
+        }
+    };
+};
+
+class mob_soul_consumption : public CreatureScript
+{
+public:
+    mob_soul_consumption() : CreatureScript("mob_soul_consumption") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_soul_consumptionAI(pCreature);
+    }
+
+    struct mob_soul_consumptionAI : public ScriptedAI
+    {
+        mob_soul_consumptionAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            m_instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* m_instance;
+
+        float m_Size0;
+        float m_Size;
+        uint32 m_uiConsumptTimer;
+
+        void Reset()
+        {
+            if (!IsHeroic()) me->SetPhaseMask(32,true);
+                else me->SetPhaseMask(65535,true);
+            SetCombatMovement(false);
+            m_uiConsumptTimer = 60*IN_MILLISECONDS;
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            DoCast(SPELL_CONSUMPTION_AURA);
+            m_Size0 = me->GetFloatValue(OBJECT_FIELD_SCALE_X);
+            m_Size = m_Size0;
+        }
+
+        void AttackStart(Unit *pWho)
+        {
+            return;
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if(m_instance && m_instance->GetData(TYPE_HALION) != IN_PROGRESS)
+                me->ForcedDespawn();
+
+//        if (!me->HasAura(SPELL_TWILIGHT_ENTER))
+//             DoCast(SPELL_TWILIGHT_ENTER);
+
+            if (m_uiConsumptTimer <= diff)
+            {
+                me->ForcedDespawn();
+            }
+            else m_uiConsumptTimer -= diff;
+
+            if (SelectTarget(SELECT_TARGET_RANDOM, 1, m_Size * 3.0f, true))
+            {
+                m_Size = m_Size*1.01f;
+                me->SetFloatValue(OBJECT_FIELD_SCALE_X, m_Size);
+            }
+            else if (SelectTarget(SELECT_TARGET_RANDOM, 0, m_Size * 3.0f, true))
+            {
+                m_Size = m_Size*1.01f;
+                me->SetFloatValue(OBJECT_FIELD_SCALE_X, m_Size);
+            }
+        }
+    };
+};
+
+class mob_fiery_combustion : public CreatureScript
+{
+public:
+    mob_fiery_combustion() : CreatureScript("mob_fiery_combustion") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_fiery_combustionAI(pCreature);
+    }
+
+    struct mob_fiery_combustionAI : public ScriptedAI
+    {
+        mob_fiery_combustionAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            m_instance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        InstanceScript* m_instance;
+
+        float m_Size0;
+        float m_Size;
+        uint32 m_uiConbustTimer;
+
+        void Reset()
+        {
+            if (!IsHeroic()) me->SetPhaseMask(31,true);
+                else me->SetPhaseMask(65535,true);
+            m_uiConbustTimer = 60*IN_MILLISECONDS;
+            SetCombatMovement(false);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            DoCast(SPELL_COMBUSTION_AURA);
+            m_Size0 = me->GetFloatValue(OBJECT_FIELD_SCALE_X);
+            m_Size = m_Size0;
+        }
+
+        void AttackStart(Unit *pWho)
+        {
+            return;
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if(m_instance && m_instance->GetData(TYPE_HALION) != IN_PROGRESS)
+                me->ForcedDespawn();
+
+            if (m_uiConbustTimer <= diff)
+            {
+                me->ForcedDespawn();
+            }
+            else m_uiConbustTimer -= diff;
+
+            if (SelectTarget(SELECT_TARGET_RANDOM, 1, m_Size * 3.0f, true))
+            {
+                m_Size = m_Size*1.01f;
+                me->SetFloatValue(OBJECT_FIELD_SCALE_X, m_Size);
+            }
+            else if (SelectTarget(SELECT_TARGET_RANDOM, 0, m_Size * 3.0f, true))
+            {
+                m_Size = m_Size*1.01f;
+                me->SetFloatValue(OBJECT_FIELD_SCALE_X, m_Size);
+            }
+        }
+
+    };
+};
+
+#define TARGETS_10 5
+#define TARGETS_25 7
+
+class mob_halion_meteor : public CreatureScript
+{
+public:
+    mob_halion_meteor() : CreatureScript("mob_halion_meteor") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_halion_meteorAI(pCreature);
+    }
+
+    struct mob_halion_meteorAI : public ScriptedAI
+    {
+        mob_halion_meteorAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            Reset();
+        }
+
+        float x, y, radius, direction;
+        uint8 stage;
+        uint32 m_uiMeteorImpactTimer;
+        uint32 m_uiMeteorStrikeTimer;
+
+        void setStage(uint8 phase)
+        {
+            stage = phase;
+        }
+
+        uint8 getStage()
+        {
+            return stage;
+        }
+
+        void Reset()
+        {
+            me->SetDisplayId(11686);
+            me->SetRespawnDelay(7*DAY);
+            SetCombatMovement(false);
+            m_uiMeteorImpactTimer = 500;
+            m_uiMeteorStrikeTimer = 4500;
+            setStage(0);
+            me->SetInCombatWithZone();
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            switch (getStage())
+            {
+                case 0:
+                    if (m_uiMeteorImpactTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_METEOR_IMPACT);
+                        m_uiMeteorImpactTimer = 500;
+                        setStage(1);
+                    } else m_uiMeteorImpactTimer -= uiDiff;
+                    break;
+                case 1:
+                    if (m_uiMeteorStrikeTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_METEOR_STRIKE);
+                        m_uiMeteorStrikeTimer = 4500;
+                        setStage(2);
+                    } else m_uiMeteorStrikeTimer -= uiDiff;
+                    break;
+                case 2:
+                    // Place summon flames there
+                    {
+                        direction = 2.0f*M_PI*((float)urand(0,15)/16.0f);
+                        radius = 0.0f;
+                        for(uint8 i = 0; i < RAID_MODE(TARGETS_10,TARGETS_25,TARGETS_10,TARGETS_25); ++i)
+                        {
+                            radius = radius + 5.0f;
+                            me->GetNearPoint2D(x, y, radius, direction);
+                            me->SummonCreature(NPC_METEOR_STRIKE_1, x, y, me->GetPositionZ(), 0.0f, TEMPSUMMON_TIMED_DESPAWN, 20000);
+                            me->GetNearPoint2D(x, y, radius, direction+M_PI);
+                            me->SummonCreature(NPC_METEOR_STRIKE_1, x, y, me->GetPositionZ(), 0.0f, TEMPSUMMON_TIMED_DESPAWN, 20000);
+                        }
+                    };
+
+                    {
+                        direction = direction + M_PI/4;
+                        radius = 0.0f;
+                        for(uint8 i = 0; i < RAID_MODE(TARGETS_10,TARGETS_25,TARGETS_10,TARGETS_25); ++i)
+                        {
+                            radius = radius + 5.0f;
+                            me->GetNearPoint2D(x, y, radius, direction);
+                            me->SummonCreature(NPC_METEOR_STRIKE_1, x, y, me->GetPositionZ(), 0.0f, TEMPSUMMON_TIMED_DESPAWN, 20000);
+                            me->GetNearPoint2D(x, y, radius, direction+M_PI);
+                            me->SummonCreature(NPC_METEOR_STRIKE_1, x, y, me->GetPositionZ(), 0.0f, TEMPSUMMON_TIMED_DESPAWN, 20000);
+                        }
+                     };
+                     setStage(3);
+                     break;
+                case 3:
+                    if (m_uiMeteorImpactTimer <= uiDiff)
+                    {
+                        DoCast(SPELL_METEOR_IMPACT);
+                        me->ForcedDespawn();
+                        m_uiMeteorImpactTimer = 500;
+                    } else m_uiMeteorImpactTimer -= uiDiff;
+                    break;
+                default:
+                     break;
+            }
+        }
+    };
+};
+
+class mob_halion_flame : public CreatureScript
+{
+public:
+    mob_halion_flame() : CreatureScript("mob_halion_flame") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new mob_halion_flameAI(pCreature);
+    }
+
+    struct mob_halion_flameAI : public ScriptedAI
+    {
+        mob_halion_flameAI(Creature* pCreature) : ScriptedAI(pCreature)
+        {
+            Reset();
+        }
+
+        void Reset()
+        {
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            me->SetDisplayId(11686);
+            me->SetRespawnDelay(7*DAY);
+            SetCombatMovement(false);
+            me->SetInCombatWithZone();
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!me->HasAura(SPELL_METEOR_FLAME))
+                  DoCast(SPELL_METEOR_FLAME);
+        }
+
+    };
+};
+
+class go_halion_portal_twilight : public GameObjectScript
+{
+    public:
+
+        go_halion_portal_twilight() : GameObjectScript("go_halion_portal_twilight") { }
+
+        bool OnGossipHello(Player* player, GameObject* go)
+        {
+            InstanceScript* instance = (InstanceScript*)go->GetInstanceScript();
+            if(!instance)
+                return false;
+            player->CastSpell(player,SPELL_TWILIGHT_ENTER,false);
+                return true;
+        }
+};
+
+class go_halion_portal_real : public GameObjectScript
+{
+    public:
+
+        go_halion_portal_real() : GameObjectScript("go_halion_portal_real") { }
+
+        bool OnGossipHello(Player* player, GameObject* go)
+        {
+            InstanceScript* instance = (InstanceScript*)go->GetInstanceScript();
+            if(!instance)
+                return false;
+            player->RemoveAurasDueToSpell(SPELL_TWILIGHT_ENTER);
+                return true;
+        }
+};
+
+class spell_halion_fiery_combustion : public SpellScriptLoader
+{
+    public:
+        spell_halion_fiery_combustion() : SpellScriptLoader("spell_halion_fiery_combustion") { }
+
+        class spell_halion_fiery_combustion_AuraScript : public AuraScript
+        {
+            PrepareAuraScript(spell_halion_fiery_combustion_AuraScript)
+            enum Spells
+            {
+                SPELL_MARK_OF_COMBUSTION  = 74567,
+                SPELL_COMBUSTION_EXPLODE  = 74607
+            };
+
+            bool Validate(SpellEntry const* /*spellEntry*/)
+            {
+                if (!sSpellStore.LookupEntry(SPELL_MARK_OF_COMBUSTION))
+                    return false;
+                if (!sSpellStore.LookupEntry(SPELL_COMBUSTION_EXPLODE))
+                    return false;
+                return true;
+            }
+
+            void HandlePeriodicTick(AuraEffect const * /*aurEff*/)
+            {
+                if (Unit* target = GetTarget())
+                    target->CastSpell(target, SPELL_MARK_OF_COMBUSTION, true);
+            }
+
+            void HandleEffectRemove(AuraEffect const * /*aurEff*/, AuraEffectHandleModes /*mode*/)
+            {
+                if (Unit* target = GetTarget())
+                {
+                    if (Aura *mark = target->GetAura(SPELL_MARK_OF_COMBUSTION))
+                    {
+                        int32 bp = 2000 * mark->GetStackAmount();
+                        target->CastCustomSpell(target, SPELL_COMBUSTION_EXPLODE, &bp, 0, 0, true);
+                        if (Creature* halion_real = GetCaster()->ToCreature())
+                        {
+                            halion_real->SummonCreature(NPC_COMBUSTION, target->GetPositionX(), target->GetPositionY(), target->GetPositionZ());
+                        }
+                        target->RemoveAura(SPELL_MARK_OF_COMBUSTION, target->GetGUID());
+                    }
+                }
+            }
+
+            void Register()
+            {
+                OnEffectPeriodic += AuraEffectPeriodicFn(spell_halion_fiery_combustion_AuraScript::HandlePeriodicTick, EFFECT_0, SPELL_AURA_PERIODIC_DAMAGE);
+                OnEffectRemove += AuraEffectRemoveFn(spell_halion_fiery_combustion_AuraScript::HandleEffectRemove, EFFECT_0, SPELL_AURA_PERIODIC_DAMAGE, AURA_EFFECT_HANDLE_REAL);
+            }
+        };
+
+        AuraScript* GetAuraScript() const
+        {
+            return new spell_halion_fiery_combustion_AuraScript();
+        }
+};
+
+class spell_halion_soul_consumption : public SpellScriptLoader
+{
+    public:
+        spell_halion_soul_consumption() : SpellScriptLoader("spell_halion_soul_consumption") { }
+
+        class spell_halion_soul_consumption_AuraScript : public AuraScript
+        {
+            PrepareAuraScript(spell_halion_soul_consumption_AuraScript)
+            enum Spells
+            {
+                SPELL_MARK_OF_CONSUMPTION  = 74795,
+                SPELL_CONSUMPTION_EXPLODE  = 74799
+            };
+
+            bool Validate(SpellEntry const* /*spellEntry*/)
+            {
+                if (!sSpellStore.LookupEntry(SPELL_MARK_OF_CONSUMPTION))
+                    return false;
+                if (!sSpellStore.LookupEntry(SPELL_CONSUMPTION_EXPLODE))
+                    return false;
+                return true;
+            }
+
+            void HandlePeriodicTick(AuraEffect const * /*aurEff*/)
+            {
+                if (Unit* target = GetTarget())
+                    target->CastSpell(target, SPELL_MARK_OF_CONSUMPTION, true);
+            }
+
+            void HandleEffectRemove(AuraEffect const * /*aurEff*/, AuraEffectHandleModes /*mode*/)
+            {
+                if (Unit* target = GetTarget())
+                {
+                    if (Aura *mark = target->GetAura(SPELL_MARK_OF_CONSUMPTION))
+                    {
+                        int32 bp = 2000 * mark->GetStackAmount();
+                        target->CastCustomSpell(target, SPELL_CONSUMPTION_EXPLODE, &bp, 0, 0, true);
+                        if (Creature* halion_twilight = GetCaster()->ToCreature())
+                        {
+                            halion_twilight->SummonCreature(NPC_CONSUMPTION, target->GetPositionX(), target->GetPositionY(), target->GetPositionZ());
+                        }
+                        target->RemoveAura(SPELL_MARK_OF_CONSUMPTION, target->GetGUID());
+                    }
+                }
+            }
+
+            void Register()
+            {
+                OnEffectPeriodic += AuraEffectPeriodicFn(spell_halion_soul_consumption_AuraScript::HandlePeriodicTick, EFFECT_0, SPELL_AURA_PERIODIC_DAMAGE);
+                OnEffectRemove += AuraEffectRemoveFn(spell_halion_soul_consumption_AuraScript::HandleEffectRemove, EFFECT_0, SPELL_AURA_PERIODIC_DAMAGE, AURA_EFFECT_HANDLE_REAL);
+            }
+        };
+
+        AuraScript* GetAuraScript() const
+        {
+            return new spell_halion_soul_consumption_AuraScript();
+        }
+};
+
+class spell_twilight_cutter : public SpellScriptLoader
+{
+    public:
+        spell_twilight_cutter() : SpellScriptLoader("spell_twilight_cutter") { }
+
+        class spell_twilight_cutter_AuraScript : public AuraScript
+        {
+            PrepareAuraScript(spell_twilight_cutter_AuraScript)
+
+            void HandleTriggerSpell(AuraEffect const* /*aurEff*/)
+            {
+                PreventDefaultAction();
+
+                Unit* target = GetTarget();
+                Unit* caster = GetCaster();
+
+                if (!target || !caster)
+                    return;
+
+                InstanceScript* instance = GetCaster()->GetInstanceScript();
+                Map::PlayerList const &players = instance->instance->GetPlayers();
+                for(Map::PlayerList::const_iterator i = players.begin(); i != players.end(); ++i)
+                {
+                    if(Player* player = i->getSource())
+                    {
+                        if (!player) continue;
+                        if (player->isGameMaster()) continue;
+                        if (!player->HasAura(SPELL_TWILIGHT_ENTER)) continue;
+                        if (player->isAlive())
+                        {
+                            float AB = caster->GetDistance2d(target)+1;
+                            float BC = caster->GetDistance2d(player)+1;
+                            float AC = target->GetDistance2d(player)+1;
+                            float p = (AB + BC + AC)/2;
+                            float DC = (2*sqrt(p*(p-AB)*(p-BC)*(p-AC)))/AB;
+                            if (DC < 3.75f || DC > 52.0f)
+                                target->CastSpell(player, SPELL_TWILIGHT_CUTTER, true);
+                        }
+                    }
+                }
+            }
+
+            void Register()
+            {
+                OnEffectPeriodic += AuraEffectPeriodicFn(spell_twilight_cutter_AuraScript::HandleTriggerSpell, EFFECT_1, SPELL_AURA_PERIODIC_TRIGGER_SPELL);
+            }
+        };
+
+        AuraScript* GetAuraScript() const
+        {
+            return new spell_twilight_cutter_AuraScript();
+        }
+};
+
+// fix ws para dragones
+class npc_D_ws2 : public CreatureScript
+{
+    public:
+        npc_D_ws2() : CreatureScript("npc_D_ws2") { }
+
+        struct npc_D_ws2AI : public ScriptedAI
+        {
+            npc_D_ws2AI(Creature *pCreature) : ScriptedAI(pCreature)
+            {
+                instance = me->GetInstanceScript();
+            }
+
+            uint32 CheckInterval;
+
+            void InitializeAI()
+            {
+                me->SetFlying(true);
+                me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
+            }
+
+            void UpdateAI(const uint32 diff)
+            {
+                if (!UpdateVictim())
+                    return;
+
+                if (CheckInterval <= diff)
+                {
+                    me->SetReactState(REACT_PASSIVE);
+                }
+                else CheckInterval -= diff;
+
+                DoMeleeAttackIfReady();
+            }
+
+            private:
+                EventMap events;
+                InstanceScript* instance;
+        };
+
+        CreatureAI* GetAI(Creature *pCreature) const
+        {
+            return new npc_D_ws2AI(pCreature);
+        }
+};
+
+void AddSC_boss_halion()
+{
+    new boss_halion_real();
+    new boss_halion_twilight();
+    new mob_halion_meteor();
+    new mob_halion_flame();
+    new mob_halion_orb();
+    new mob_halion_control();
+    new mob_orb_rotation_focus();
+    new mob_orb_carrier();
+    new mob_soul_consumption();
+    new mob_fiery_combustion();
+    new go_halion_portal_twilight();
+    new go_halion_portal_real();
+    new spell_halion_fiery_combustion();
+    new spell_halion_soul_consumption();
+    new spell_twilight_cutter();
+    new npc_D_ws2();
+}
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_saviana_ragefire.cpp b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_saviana_ragefire.cpp
index 78810e2..8e6fd40 100644
--- a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_saviana_ragefire.cpp
+++ b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/boss_saviana_ragefire.cpp
@@ -15,251 +15,391 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+ /*
+ * WowRean Script www.wowrean.com
+ */
+
 #include "ScriptPCH.h"
 #include "ruby_sanctum.h"
 
-enum Texts
+enum BossSpells
 {
-    SAY_AGGRO                           = 0, // You will sssuffer for this intrusion! (17528)
-    SAY_CONFLAGRATION                   = 1, // Burn in the master's flame! (17532)
-    EMOTE_ENRAGED                       = 2, // %s becomes enraged!
-    SAY_KILL                            = 3, // Halion will be pleased. (17530) - As it should be.... (17529)
+    SPELL_ENRAGE                     = 78722, //soft enrage + fire nova
+    SPELL_FLAME_BREATH               = 74404,
+    SPELL_BEACON                     = 74453, //mark for conflag, in enter to fly phase, 2 in 10, 5 in 25
+    SPELL_CONFLAGATION               = 74452, // after fly up
+    SPELL_CONFLAGATION_1             = 74454, // Triggered?
+    SPELL_CONFLAGATION_2             = 74456, // Aura
 };
 
-enum Spells
+struct Locations
 {
-    SPELL_CONFLAGRATION         = 74452,
-    SPELL_FLAME_BEACON          = 74453,
-    SPELL_CONFLAGRATION_2       = 74454, // Unknown dummy effect
-    SPELL_ENRAGE                = 78722,
-    SPELL_FLAME_BREATH          = 74403,
+    float x, y, z;
 };
 
-enum Events
+static Locations SpawnLoc[]=
 {
-    EVENT_ENRAGE                    = 1,
-    EVENT_FLIGHT                    = 2,
-    EVENT_FLAME_BREATH              = 3,
-    EVENT_CONFLAGRATION             = 4,
-
-    // Event group
-    EVENT_GROUP_LAND_PHASE          = 1,
+    {3151.3898f, 636.8519f, 78.7396f},  // 0 Saviana start point
+    {3149.635f, 668.9644f, 90.507f},    // 1 Saviana fly phase, o=4,69
 };
 
-enum MovementPoints
-{
-    POINT_FLIGHT            = 1,
-    POINT_LAND              = 2,
-};
+#define TARGETS_10 2
+#define TARGETS_25 5
 
-enum Misc
+class boss_ragefire : public CreatureScript
 {
-    SOUND_ID_DEATH          = 17531,
-};
-
-Position const SavianaRagefireFlyPos  = {3155.51f, 683.844f, 95.20f, 4.69f};
-Position const SavianaRagefireLandPos = {3151.07f, 636.443f, 79.54f, 4.69f};
+public:
+    boss_ragefire() : CreatureScript("boss_ragefire") { }
 
-class boss_saviana_ragefire : public CreatureScript
-{
-    public:
-        boss_saviana_ragefire() : CreatureScript("boss_saviana_ragefire") { }
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new boss_ragefireAI(pCreature);
+    }
 
-        struct boss_saviana_ragefireAI : public BossAI
+    struct boss_ragefireAI : public ScriptedAI
+    {
+        boss_ragefireAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
-            boss_saviana_ragefireAI(Creature* creature) : BossAI(creature, DATA_SAVIANA_RAGEFIRE)
-            {
-            }
+            pInstance = (InstanceScript*)pCreature->GetInstanceScript();
+            Reset();
+        }
 
-            void Reset()
-            {
-                _Reset();
-                me->SetReactState(REACT_AGGRESSIVE);
-            }
+        InstanceScript* pInstance;
 
-            void EnterCombat(Unit* /*who*/)
-            {
-                _EnterCombat();
-                Talk(SAY_AGGRO);
-                events.Reset();
-                events.ScheduleEvent(EVENT_ENRAGE, 20000, EVENT_GROUP_LAND_PHASE);
-                events.ScheduleEvent(EVENT_FLAME_BREATH, 14000, EVENT_GROUP_LAND_PHASE);
-                events.ScheduleEvent(EVENT_FLIGHT, 60000);
-            }
-
-            void JustDied(Unit* /*killer*/)
-            {
-                _JustDied();
-                me->PlayDirectSound(SOUND_ID_DEATH);
-            }
+        uint8 nextPoint;
+        uint8 stage;
+        uint32 m_uiFlameBreathTimer;
+        uint32 m_uiEnrage;
+        uint32 m_uiBeakonTimer;
+        uint32 m_uiConflagrateTimer;
 
-            void MovementInform(uint32 type, uint32 point)
-            {
-                if (type != POINT_MOTION_TYPE)
-                    return;
-
-                switch (point)
-                {
-                    case POINT_FLIGHT:
-                        events.ScheduleEvent(EVENT_CONFLAGRATION, 1000);
-                        Talk(SAY_CONFLAGRATION);
-                        break;
-                    case POINT_LAND:
-                        me->SetFlying(false);
-                        me->RemoveUnitMovementFlag(MOVEMENTFLAG_LEVITATING);
-                        me->SetReactState(REACT_AGGRESSIVE);
-                        if (me->GetMotionMaster()->GetCurrentMovementGeneratorType() == POINT_MOTION_TYPE)
-                            me->GetMotionMaster()->MovementExpired();
-                        DoStartMovement(me->getVictim());
-                        break;
-                    default:
-                        break;
-                }
-            }
+        bool MovementStarted;
+        bool conflagated;
 
-            void JustReachedHome()
-            {
-                _JustReachedHome();
-                me->SetFlying(false);
-                me->RemoveUnitMovementFlag(MOVEMENTFLAG_LEVITATING);
-            }
+        void Reset()
+        {
+            if(!pInstance)
+                return;
+            me->SetRespawnDelay(7*DAY);
+            if (me->isAlive()) pInstance->SetData(TYPE_RAGEFIRE, NOT_STARTED);
 
-            void KilledUnit(Unit* victim)
-            {
-                if (victim->GetTypeId() == TYPEID_PLAYER)
-                    Talk(SAY_KILL);
-            }
+            m_uiFlameBreathTimer = urand(5*IN_MILLISECONDS,15*IN_MILLISECONDS);
+            m_uiEnrage = urand(20*IN_MILLISECONDS,40*IN_MILLISECONDS);
+            m_uiBeakonTimer = urand(12*IN_MILLISECONDS,22*IN_MILLISECONDS);
+            m_uiConflagrateTimer = 5*IN_MILLISECONDS;
 
-            void UpdateAI(uint32 const diff)
-            {
-                if (!UpdateVictim())
-                    return;
-
-                events.Update(diff);
-
-                if (me->HasUnitState(UNIT_STATE_CASTING))
-                    return;
-
-                while (uint32 eventId = events.ExecuteEvent())
-                {
-                    switch (eventId)
-                    {
-                        case EVENT_FLIGHT:
-                        {
-                            me->SetFlying(true);
-                            me->AddUnitMovementFlag(MOVEMENTFLAG_LEVITATING);
-                            me->SetReactState(REACT_PASSIVE);
-                            me->GetMotionMaster()->MovePoint(POINT_FLIGHT, SavianaRagefireFlyPos);
-                            events.ScheduleEvent(EVENT_FLIGHT, 50000);
-                            events.DelayEvents(12500, EVENT_GROUP_LAND_PHASE);
-                            break;
-                        }
-                        case EVENT_CONFLAGRATION:
-                            DoCast(me, SPELL_CONFLAGRATION, true);
-                            break;
-                        case EVENT_ENRAGE:
-                            DoCast(me, SPELL_ENRAGE);
-                            Talk(EMOTE_ENRAGED);
-                            events.ScheduleEvent(EVENT_ENRAGE, urand(15000, 20000), EVENT_GROUP_LAND_PHASE);
-                            break;
-                        case EVENT_FLAME_BREATH:
-                            DoCastVictim(SPELL_FLAME_BREATH);
-                            events.ScheduleEvent(EVENT_FLAME_BREATH, urand(20000, 30000), EVENT_GROUP_LAND_PHASE);
-                            break;
-                        default:
-                            break;
-                    }
-                }
+            setStage(0);
+            nextPoint = 0;
+            conflagated = false;
 
-                DoMeleeAttackIfReady();
-            }
-        };
+            playerList.clear();
+        }
 
-        CreatureAI* GetAI(Creature* creature) const
+        void setStage(uint8 phase)
         {
-            return GetRubySanctumAI<boss_saviana_ragefireAI>(creature);
+            stage = phase;
         }
-};
-
-class ConflagrationTargetSelector
-{
-    public:
-        ConflagrationTargetSelector() { }
 
-        bool operator()(Unit* unit)
+        uint8 getStage()
         {
-            return unit->GetTypeId() != TYPEID_PLAYER;
+            return stage;
         }
-};
 
-class spell_saviana_conflagration_init : public SpellScriptLoader
-{
-    public:
-        spell_saviana_conflagration_init() : SpellScriptLoader("spell_saviana_conflagration_init") { }
-
-        class spell_saviana_conflagration_init_SpellScript : public SpellScript
+        void MovementInform(uint32 type, uint32 id)
         {
-            PrepareSpellScript(spell_saviana_conflagration_init_SpellScript);
+            if (!pInstance) return;
 
-            void FilterTargets(std::list<Unit*>& unitList)
-            {
-                unitList.remove_if (ConflagrationTargetSelector());
-                uint8 maxSize = uint8(GetCaster()->GetMap()->GetSpawnMode() & 1 ? 6 : 3);
-                if (unitList.size() > maxSize)
-                    Trinity::RandomResizeList(unitList, maxSize);
-            }
+            if (type != POINT_MOTION_TYPE || !MovementStarted) return;
 
-            void HandleDummy(SpellEffIndex effIndex)
+            if (id == nextPoint) {
+                    me->GetMotionMaster()->MovementExpired();
+                    MovementStarted = false;
+                    }
+        }
+
+        void SetFly(bool command = false)
+        {
+            if (command)
             {
-                PreventHitDefaultEffect(effIndex);
-                GetCaster()->CastSpell(GetHitUnit(), SPELL_FLAME_BEACON, true);
-                GetCaster()->CastSpell(GetHitUnit(), SPELL_CONFLAGRATION_2, false);
+                me->HandleEmoteCommand(EMOTE_ONESHOT_FLY_SIT_GROUND_UP);
+                me->SetFlying(true);
             }
-
-            void Register()
+            else
             {
-                OnUnitTargetSelect += SpellUnitTargetFn(spell_saviana_conflagration_init_SpellScript::FilterTargets, EFFECT_0, TARGET_UNIT_SRC_AREA_ENEMY);
-                OnEffectHitTarget += SpellEffectFn(spell_saviana_conflagration_init_SpellScript::HandleDummy, EFFECT_0, SPELL_EFFECT_DUMMY);
+                me->SetFlying(false);
             }
-        };
+        }
 
-        SpellScript* GetSpellScript() const
+        void StartMovement(uint32 id)
         {
-            return new spell_saviana_conflagration_init_SpellScript();
+            nextPoint = id;
+            me->GetMotionMaster()->Clear();
+            me->GetMotionMaster()->MovePoint(id, SpawnLoc[id].x, SpawnLoc[id].y, SpawnLoc[id].z);
+            MovementStarted = true;
         }
-};
 
-class spell_saviana_conflagration_throwback : public SpellScriptLoader
-{
-    public:
-        spell_saviana_conflagration_throwback() : SpellScriptLoader("spell_saviana_conflagration_throwback") { }
+        void KilledUnit(Unit* pVictim)
+        {
+            switch (urand(0,1)) {
+                case 0:
+                       DoScriptText(-1666401,me,pVictim);
+                       break;
+                case 1:
+                       DoScriptText(-1666402,me,pVictim);
+                       break;
+                }
+        }
 
-        class spell_saviana_conflagration_throwback_SpellScript : public SpellScript
+        void JustReachedHome()
         {
-            PrepareSpellScript(spell_saviana_conflagration_throwback_SpellScript);
+            if (pInstance)
+                pInstance->SetData(TYPE_RAGEFIRE, FAIL);
+        }
 
-            void HandleScript(SpellEffIndex effIndex)
+        void EnterCombat(Unit *who)
+        {
+            if(!pInstance) return;
+
+            pInstance->SetData(TYPE_RAGEFIRE, IN_PROGRESS);
+            me->SetInCombatWithZone();
+            DoScriptText(-1666400,me);
+        }
+
+        void JustDied(Unit *killer)
+        {
+            if(!pInstance) return;
+
+            pInstance->SetData(TYPE_RAGEFIRE, DONE);
+            DoScriptText(-1666403,me);
+        }
+
+        void doBeacon(bool command = false)
+        {
+            if (command)
             {
-                PreventHitDefaultEffect(effIndex);
-                GetHitUnit()->CastSpell(GetCaster(), uint32(GetEffectValue()), true);
-                GetHitUnit()->GetMotionMaster()->MovePoint(POINT_LAND, SavianaRagefireLandPos);
+                 SelectTargetList(playerList, RAID_MODE(TARGETS_10,TARGETS_25,TARGETS_10,TARGETS_25), SELECT_TARGET_RANDOM, 0, true);
+                 for (std::list<Unit*>::const_iterator itr = playerList.begin(); itr != playerList.end(); ++itr)
+                 {
+                     Unit *pTemp = (*itr);
+                     me->CastSpell(pTemp, SPELL_BEACON, true);
+                 }
+
+                 conflagated = true;
             }
-
-            void Register()
+            else
             {
-                OnEffectHitTarget += SpellEffectFn(spell_saviana_conflagration_throwback_SpellScript::HandleScript, EFFECT_0, SPELL_EFFECT_SCRIPT_EFFECT);
+                 me->InterruptNonMeleeSpells(true);
+
+                 for (std::list<Unit*>::const_iterator itr = playerList.begin(); itr != playerList.end(); ++itr)
+                 {
+                     Unit *pTemp = (*itr);
+                     me->CastSpell(pTemp, SPELL_CONFLAGATION_2, true);
+                 }
+
+                 playerList.clear();
+                 conflagated = false;
             }
-        };
+        }
 
-        SpellScript* GetSpellScript() const
+        void UpdateAI(uint32 const diff)
         {
-            return new spell_saviana_conflagration_throwback_SpellScript();
+            if (!UpdateVictim())
+                return;
+
+            switch (getStage())
+            {
+                case 0: //GROUND
+                     if (m_uiFlameBreathTimer <= diff)
+                     {
+                         DoCast(SPELL_FLAME_BREATH);
+                         m_uiFlameBreathTimer = urand(5*IN_MILLISECONDS,15*IN_MILLISECONDS);
+                     } else m_uiFlameBreathTimer -= diff;
+
+                     if (m_uiEnrage <= diff)
+                     {
+                         DoCast(SPELL_ENRAGE);
+                         m_uiEnrage = urand(20*IN_MILLISECONDS,40*IN_MILLISECONDS);
+                         DoScriptText(-1666405,me);
+                     } else m_uiEnrage -= diff;
+
+                     if ( HealthBelowPct(81) ) setStage(1);
+                     break;
+
+                case 1: //Air phase start
+                     SetCombatMovement(false);
+                     me->InterruptNonMeleeSpells(true);
+                     SetFly(true);
+                     doBeacon(true);
+                     StartMovement(1);
+                     setStage(2);
+                     break;
+
+                case 2: // Wait for movement
+                     if (MovementStarted) return;
+                     DoCast(SPELL_CONFLAGATION);
+                     DoScriptText(-1666404,me);
+                     setStage(3);
+                     break;
+
+                case 3: // Wait for cast finish
+                     if (!me->IsNonMeleeSpellCasted(false))
+                     {
+                         doBeacon(false);
+                         setStage(4);
+                     }
+                     break;
+
+                case 4: // Air phase
+                     if (m_uiFlameBreathTimer <= diff)
+                     {
+                         DoCast(SPELL_FLAME_BREATH);
+                         m_uiFlameBreathTimer = urand(5*IN_MILLISECONDS,15*IN_MILLISECONDS);
+                     } else m_uiFlameBreathTimer -= diff;
+
+                     if (m_uiBeakonTimer <= diff)
+                     {
+                         doBeacon(true);
+                         DoCast(SPELL_CONFLAGATION);
+                         m_uiBeakonTimer = urand(12*IN_MILLISECONDS,22*IN_MILLISECONDS);
+                     } else m_uiBeakonTimer -= diff;
+
+                     if (m_uiConflagrateTimer <= diff)
+                     {
+                         if (conflagated)
+                         {
+                             //DoCast(SPELL_CONFLAGATION_1);
+                             doBeacon(false);
+                         }
+                         m_uiConflagrateTimer = 5*IN_MILLISECONDS;
+                     } else m_uiConflagrateTimer -= diff;
+
+                     if ( HealthBelowPct(61) ) setStage(5);
+                     break;
+
+                case 5: //Air phase end
+                     StartMovement(0);
+                     setStage(6);
+                     break;
+
+                case 6: // Wait for movement
+                     if (MovementStarted) return;
+                     SetFly(false);
+                     SetCombatMovement(true);
+                     me->GetMotionMaster()->Clear();
+                     me->GetMotionMaster()->MoveChase(me->getVictim());
+                     setStage(7);
+                     break;
+
+                case 7: //GROUND
+                     if (m_uiFlameBreathTimer <= diff)
+                     {
+                         DoCast(SPELL_FLAME_BREATH);
+                         m_uiFlameBreathTimer = urand(5*IN_MILLISECONDS,15*IN_MILLISECONDS);
+                     } else m_uiFlameBreathTimer -= diff;
+
+                     if (m_uiEnrage <= diff)
+                     {
+                         DoCast(SPELL_ENRAGE);
+                         m_uiEnrage = urand(20*IN_MILLISECONDS,40*IN_MILLISECONDS);
+                         DoScriptText(-1666405,me);
+                     } else m_uiEnrage -= diff;
+
+                     if ( HealthBelowPct(41) ) setStage(8);
+                     break;
+
+                case 8: //Air phase start
+                     SetCombatMovement(false);
+                     me->InterruptNonMeleeSpells(true);
+                     SetFly(true);
+                     doBeacon(true);
+                     StartMovement(1);
+                     setStage(9);
+                     break;
+
+                case 9: // Wait for movement
+                     if (MovementStarted) return;
+                     DoCast(SPELL_CONFLAGATION);
+                     DoScriptText(-1666404,me);
+                     setStage(10);
+                     break;
+
+                case 10: // Wait for cast finish
+                     if (!me->IsNonMeleeSpellCasted(false))
+                     {
+                         doBeacon(false);
+                         setStage(11);
+                     };
+                     break;
+
+                case 11: // Air phase
+                     if (m_uiFlameBreathTimer <= diff)
+                     {
+                         DoCast(SPELL_FLAME_BREATH);
+                         m_uiFlameBreathTimer = urand(5*IN_MILLISECONDS,15*IN_MILLISECONDS);
+                     } else m_uiFlameBreathTimer -= diff;
+
+                     if (m_uiBeakonTimer <= diff)
+                     {
+                         doBeacon(true);
+                         DoCast(SPELL_CONFLAGATION);
+                         m_uiBeakonTimer = urand(12*IN_MILLISECONDS,22*IN_MILLISECONDS);
+                     } else m_uiBeakonTimer -= diff;
+
+                     if (m_uiConflagrateTimer <= diff)
+                     {
+                         if (conflagated)
+                         {
+                              //DoCast(SPELL_CONFLAGATION_1);
+                              doBeacon(false);
+                         }
+                         m_uiConflagrateTimer = 5*IN_MILLISECONDS;
+                     } else m_uiConflagrateTimer -= diff;
+
+                     if ( HealthBelowPct(21) ) setStage(12);
+                     break;
+
+                case 12: //Air phase end
+                     StartMovement(0);
+                     setStage(13);
+                     break;
+
+                case 13: // Wait for movement
+                     if (MovementStarted) return;
+                     SetFly(false);
+                     SetCombatMovement(true);
+                     me->GetMotionMaster()->Clear();
+                     me->GetMotionMaster()->MoveChase(me->getVictim());
+                     setStage(14);
+                     break;
+
+                case 14: //GROUND
+                     if (m_uiFlameBreathTimer <= diff)
+                     {
+                         DoCast(SPELL_FLAME_BREATH);
+                         m_uiFlameBreathTimer = urand(5*IN_MILLISECONDS,15*IN_MILLISECONDS);
+                     } else m_uiFlameBreathTimer -= diff;
+
+                     if (m_uiEnrage <= diff)
+                     {
+                         DoCast(SPELL_ENRAGE);
+                         m_uiEnrage = urand(15*IN_MILLISECONDS,30*IN_MILLISECONDS);
+                         DoScriptText(-1666405,me);
+                     } else m_uiEnrage -= diff;
+                     break;
+
+                default:
+                    break;
+            }
+
+            DoMeleeAttackIfReady();
         }
+
+        private:
+            std::list<Unit *> playerList;
+    };
 };
 
 void AddSC_boss_saviana_ragefire()
 {
-    new boss_saviana_ragefire();
-    new spell_saviana_conflagration_init();
-    new spell_saviana_conflagration_throwback();
+    new boss_ragefire();
 }
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/instance_ruby_sanctum.cpp b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/instance_ruby_sanctum.cpp
index f9e302d..7c4ddc0 100644
--- a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/instance_ruby_sanctum.cpp
+++ b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/instance_ruby_sanctum.cpp
@@ -15,305 +15,741 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
+/*
+ * WowRean Script www.wowrean.com
+ */
+
 #include "ScriptPCH.h"
 #include "ruby_sanctum.h"
 
-
-DoorData const doorData[] =
-{
-    {GO_FIRE_FIELD,     DATA_BALTHARUS_THE_WARBORN, DOOR_TYPE_PASSAGE,  BOUNDARY_E   },
-    {0,                 0,                          DOOR_TYPE_ROOM,     BOUNDARY_NONE},
-};
-
 class instance_ruby_sanctum : public InstanceMapScript
 {
-    public:
-        instance_ruby_sanctum() : InstanceMapScript(RSScriptName, 724) { }
+public:
+    instance_ruby_sanctum() : InstanceMapScript("instance_ruby_sanctum", 724) { }
+
+    InstanceScript* GetInstanceScript(InstanceMap* pMap) const
+    {
+        return new instance_ruby_sanctum_InstanceMapScript(pMap);
+    }
+
+    struct instance_ruby_sanctum_InstanceMapScript : public InstanceScript
+    {
+        instance_ruby_sanctum_InstanceMapScript(Map* pMap) : InstanceScript(pMap) {Initialize();};
+
+        std::string strSaveData;
+
+        //Creatures GUID
+        uint32 m_auiEncounter[MAX_ENCOUNTERS+1];
+
+        uint32 m_auiEventTimer;
+        uint32 m_auiHalionEvent;
 
-        struct instance_ruby_sanctum_InstanceMapScript : public InstanceScript
+        uint32 m_auiOrbDirection;
+        uint32 m_auiOrbNState;
+        uint32 m_auiOrbSState;
+
+        uint64 m_uiHalion_pGUID;
+        uint64 m_uiHalion_tGUID;
+        uint64 m_uiHalionControlGUID;
+        uint64 m_uiRagefireGUID;
+        uint64 m_uiZarithianGUID;
+        uint64 m_uiBaltharusGUID;
+        uint64 m_uiCloneGUID;
+        uint64 m_uiXerestraszaGUID;
+
+        uint64 m_uiOrbNGUID;
+        uint64 m_uiOrbSGUID;
+        uint64 m_uiOrbFocusGUID;
+        uint64 m_uiOrbCarrierGUID;
+
+        //object GUID
+        uint64 m_uiHalionPortal1GUID;
+        uint64 m_uiHalionPortal2GUID;
+        uint64 m_uiHalionPortal3GUID;
+        uint64 m_uiHalionFireWallSGUID;
+        uint64 m_uiHalionFireWallMGUID;
+        uint64 m_uiHalionFireWallLGUID;
+        uint64 m_uiBaltharusTargetGUID;
+
+        uint64 m_uiFireFieldGUID;
+        uint64 m_uiFlameWallsGUID;
+        uint64 m_uiFlameRingGUID;
+        uint64 m_uiArbolGUID;
+        uint64 m_uiArbol1GUID;
+        uint64 m_uiArbol2GUID;
+        uint64 m_uiArbol3GUID;
+
+        void Initialize()
         {
-            instance_ruby_sanctum_InstanceMapScript(InstanceMap* map) : InstanceScript(map)
-            {
-                SetBossNumber(EncounterCount);
-                LoadDoorData(doorData);
-                BaltharusTheWarbornGUID = 0;
-                GeneralZarithrianGUID   = 0;
-                SavianaRagefireGUID     = 0;
-                HalionGUID              = 0;
-                HalionControllerGUID    = 0;
-                CrystalChannelTargetGUID = 0;
-                XerestraszaGUID         = 0;
-                BaltharusSharedHealth   = 0;
-                FlameWallsGUID          = 0;
-                FlameRingGUID           = 0;
-                memset(ZarithianSpawnStalkerGUID, 0, 2*sizeof(uint64));
-                memset(BurningTreeGUID, 0, 4*sizeof(uint64));
-            }
+            for (uint8 i = 0; i < MAX_ENCOUNTERS; ++i)
+                m_auiEncounter[i] = NOT_STARTED;
+
+            m_auiEventTimer = 1000;
+
+            m_uiHalion_pGUID = 0;
+            m_uiHalion_tGUID = 0;
+            m_uiRagefireGUID = 0;
+            m_uiZarithianGUID = 0;
+            m_uiBaltharusGUID = 0;
+            m_uiCloneGUID = 0;
+            m_uiHalionPortal1GUID = 0;
+            m_uiHalionPortal2GUID = 0;
+            m_uiHalionPortal3GUID = 0;
+            m_uiArbolGUID = 0;
+            m_uiArbol1GUID = 0;
+            m_uiArbol2GUID = 0;
+            m_uiArbol3GUID = 0;
+            m_uiXerestraszaGUID = 0;
+            m_uiHalionFireWallSGUID = 0;
+            m_uiHalionFireWallMGUID = 0;
+            m_uiHalionFireWallLGUID = 0;
+            m_uiBaltharusTargetGUID = 0;
+            m_auiOrbDirection = 0;
+            m_uiOrbNGUID = 0;
+            m_uiOrbSGUID = 0;
+            m_uiOrbFocusGUID = 0;
+            m_auiOrbNState = NOT_STARTED;
+            m_auiOrbSState = NOT_STARTED;
+        }
+
+        bool IsEncounterInProgress() const
+        {
+            for(uint8 i = 1; i < MAX_ENCOUNTERS ; ++i)
+                if (m_auiEncounter[i] == IN_PROGRESS)
+                    return true;
 
-            void OnCreatureCreate(Creature* creature)
+            return false;
+        }
+
+        void OpenDoor(uint64 guid)
+        {
+            if(!guid)
+                return;
+
+            GameObject* pGo = instance->GetGameObject(guid);
+            if(pGo)
+               pGo->SetGoState(GO_STATE_ACTIVE_ALTERNATIVE);
+        }
+
+        void CloseDoor(uint64 guid)
+        {
+            if(!guid)
+                return;
+
+            GameObject* pGo = instance->GetGameObject(guid);
+            if(pGo)
+               pGo->SetGoState(GO_STATE_READY);
+        }
+
+        void OpenAllDoors()
+        {
+            if (m_auiEncounter[TYPE_RAGEFIRE] == DONE &&
+                m_auiEncounter[TYPE_BALTHARUS] == DONE &&
+                m_auiEncounter[TYPE_XERESTRASZA] == DONE)
+                OpenDoor(m_uiFlameWallsGUID);
+            else
+                CloseDoor(m_uiFlameWallsGUID);
+        }
+
+        void UpdateWorldState(bool command, uint32 value)
+        {
+            Map::PlayerList const &players = instance->GetPlayers();
+
+            if (command)
             {
-                switch (creature->GetEntry())
-                {
-                    case NPC_BALTHARUS_THE_WARBORN:
-                        BaltharusTheWarbornGUID = creature->GetGUID();
-                        break;
-                    case NPC_GENERAL_ZARITHRIAN:
-                        GeneralZarithrianGUID = creature->GetGUID();
-                        break;
-                    case NPC_SAVIANA_RAGEFIRE:
-                        SavianaRagefireGUID = creature->GetGUID();
-                        break;
-                    case NPC_HALION:
-                        HalionGUID = creature->GetGUID();
-                        break;
-                    case NPC_HALION_CONTROLLER:
-                        HalionControllerGUID = creature->GetGUID();
-                    case NPC_BALTHARUS_TARGET:
-                        CrystalChannelTargetGUID = creature->GetGUID();
-                        break;
-                    case NPC_XERESTRASZA:
-                        XerestraszaGUID = creature->GetGUID();
-                        break;
-                    case NPC_ZARITHIAN_SPAWN_STALKER:
-                        if (!ZarithianSpawnStalkerGUID[0])
-                            ZarithianSpawnStalkerGUID[0] = creature->GetGUID();
-                        else
-                            ZarithianSpawnStalkerGUID[1] = creature->GetGUID();
-                        break;
-                    default:
-                        break;
-                }
+                for (Map::PlayerList::const_iterator i = players.begin(); i != players.end(); ++i)
+                    if(Player* pPlayer = i->getSource())
+                        if(pPlayer->isAlive())
+                        {
+                            pPlayer->SendUpdateWorldState(UPDATE_STATE_UI_SHOW,0);
+                            if (pPlayer->HasAura(74807))
+                                pPlayer->SendUpdateWorldState(UPDATE_STATE_UI_COUNT_T, 100 - value);
+                            else pPlayer->SendUpdateWorldState(UPDATE_STATE_UI_COUNT_R, value);
+                            pPlayer->SendUpdateWorldState(UPDATE_STATE_UI_SHOW,1);
+                        }
             }
-
-            void OnGameObjectCreate(GameObject* go)
+            else
             {
-                switch (go->GetEntry())
-                {
-                    case GO_FIRE_FIELD:
-                        AddDoor(go, true);
-                        break;
-                    case GO_FLAME_WALLS:
-                        FlameWallsGUID = go->GetGUID();
-                        if (GetBossState(DATA_SAVIANA_RAGEFIRE) == DONE && GetBossState(DATA_BALTHARUS_THE_WARBORN) == DONE)
-                            HandleGameObject(FlameWallsGUID, true, go);
-                        break;
-                    case GO_FLAME_RING:
-                        FlameRingGUID = go->GetGUID();
-                        break;
-                    case GO_BURNING_TREE_1:
-                        BurningTreeGUID[0] = go->GetGUID();
-                        if (GetBossState(DATA_GENERAL_ZARITHRIAN) == DONE)
-                            HandleGameObject(BurningTreeGUID[0], true);
-                        break;
-                    case GO_BURNING_TREE_2:
-                        BurningTreeGUID[1] = go->GetGUID();
-                        if (GetBossState(DATA_GENERAL_ZARITHRIAN) == DONE)
-                            HandleGameObject(BurningTreeGUID[1], true);
-                        break;
-                    case GO_BURNING_TREE_3:
-                        BurningTreeGUID[2] = go->GetGUID();
-                        if (GetBossState(DATA_GENERAL_ZARITHRIAN) == DONE)
-                            HandleGameObject(BurningTreeGUID[2], true);
-                        break;
-                    case GO_BURNING_TREE_4:
-                        BurningTreeGUID[3] = go->GetGUID();
-                        if (GetBossState(DATA_GENERAL_ZARITHRIAN) == DONE)
-                            HandleGameObject(BurningTreeGUID[3], true);
-                        break;
-                    default:
-                        break;
-                }
+            for (Map::PlayerList::const_iterator i = players.begin(); i != players.end(); ++i)
+                if(Player* pPlayer = i->getSource())
+                    if(pPlayer->isAlive())
+                        pPlayer->SendUpdateWorldState(UPDATE_STATE_UI_SHOW,0);
             }
+        }
 
-            void OnGameObjectRemove(GameObject* go)
+        void OnCreatureCreate(Creature* pCreature)
+        {
+            switch(pCreature->GetEntry())
             {
-                switch (go->GetEntry())
-                {
-                    case GO_FIRE_FIELD:
-                        AddDoor(go, false);
-                        break;
-                    default:
-                        break;
-                }
+            case NPC_HALION_REAL:
+                m_uiHalion_pGUID = pCreature->GetGUID();
+                break;
+            case NPC_HALION_TWILIGHT:
+                m_uiHalion_tGUID = pCreature->GetGUID();
+                break;
+            case NPC_HALION_CONTROL:
+                m_uiHalionControlGUID = pCreature->GetGUID();
+                break;
+            case NPC_RAGEFIRE:
+                m_uiRagefireGUID = pCreature->GetGUID();
+                break;
+            case NPC_ZARITHIAN:
+                m_uiZarithianGUID = pCreature->GetGUID();
+                break;
+            case NPC_BALTHARUS:
+                m_uiBaltharusGUID = pCreature->GetGUID();
+                break;
+            case NPC_BALTHARUS_TARGET:
+                m_uiBaltharusTargetGUID = pCreature->GetGUID();
+                break;
+            case NPC_CLONE:
+                m_uiCloneGUID = pCreature->GetGUID();
+                break;
+            case NPC_XERESTRASZA:
+                m_uiXerestraszaGUID = pCreature->GetGUID();
+                break;
+            case NPC_SHADOW_PULSAR_N:
+                m_uiOrbNGUID = pCreature->GetGUID();
+                break;
+            case NPC_SHADOW_PULSAR_S:
+                m_uiOrbSGUID = pCreature->GetGUID();
+                break;
+            case NPC_ORB_ROTATION_FOCUS:
+                m_uiOrbFocusGUID = pCreature->GetGUID();
+                break;
+            case NPC_ORB_CARRIER:
+                m_uiOrbCarrierGUID = pCreature->GetGUID();
+                break;
             }
+        }
 
-            uint64 GetData64(uint32 type)
+        void OnGameObjectCreate(GameObject* pGo)
+        {
+            switch(pGo->GetEntry())
             {
-                switch (type)
-                {
-                    case DATA_BALTHARUS_THE_WARBORN:
-                        return BaltharusTheWarbornGUID;
-                    case DATA_CRYSTAL_CHANNEL_TARGET:
-                        return CrystalChannelTargetGUID;
-                    case DATA_XERESTRASZA:
-                        return XerestraszaGUID;
-                    case DATA_SAVIANA_RAGEFIRE:
-                        return SavianaRagefireGUID;
-                    case DATA_GENERAL_ZARITHRIAN:
-                        return GeneralZarithrianGUID;
-                    case DATA_ZARITHIAN_SPAWN_STALKER_1:
-                        return ZarithianSpawnStalkerGUID[0];
-                    case DATA_ZARITHIAN_SPAWN_STALKER_2:
-                        return ZarithianSpawnStalkerGUID[1];
-                    case DATA_HALION:
-                        return HalionGUID;
-                    case DATA_HALION_CONTROLLER:
-                        return HalionControllerGUID;
-                    case DATA_BURNING_TREE_1:
-                        return BurningTreeGUID[0];
-                    case DATA_BURNING_TREE_2:
-                        return BurningTreeGUID[1];
-                    case DATA_BURNING_TREE_3:
-                        return BurningTreeGUID[2];
-                    case DATA_BURNING_TREE_4:
-                        return BurningTreeGUID[3];
-                    case DATA_FLAME_RING:
-                        return FlameRingGUID;
-                    default:
-                        break;
-                }
-
-                return 0;
+            case GO_HALION_PORTAL_1:
+                m_uiHalionPortal1GUID = pGo->GetGUID();
+                break;
+            case GO_HALION_PORTAL_2:
+                m_uiHalionPortal2GUID = pGo->GetGUID();
+                break;
+            case GO_HALION_PORTAL_3:
+                m_uiHalionPortal3GUID = pGo->GetGUID();
+                break;
+            case GO_FLAME_WALLS:
+                m_uiFlameWallsGUID = pGo->GetGUID();
+                break;
+            case GO_FLAME_RING:
+                m_uiFlameRingGUID = pGo->GetGUID();
+                break;
+            case GO_FIRE_FIELD:
+                m_uiFireFieldGUID = pGo->GetGUID();
+                break;
+            case GO_ARBOL:
+                m_uiArbolGUID = pGo->GetGUID();
+                break;
+            case GO_ARBOL1:
+                m_uiArbol1GUID = pGo->GetGUID();
+                break;
+            case GO_ARBOL2:
+                m_uiArbol2GUID = pGo->GetGUID();
+                break;
+            case GO_ARBOL3:
+                m_uiArbol3GUID = pGo->GetGUID();
+                break;
             }
+            OpenAllDoors();
+        }
 
-            bool SetBossState(uint32 type, EncounterState state)
+        void SetData(uint32 uiType, uint32 uiData)
+        {
+            switch(uiType)
             {
-                if (!InstanceScript::SetBossState(type, state))
-                    return false;
-
-                switch (type)
-                {
-                    case DATA_BALTHARUS_THE_WARBORN:
+                case TYPE_EVENT:
+                    m_auiEncounter[uiType] = uiData;
+                    uiData = NOT_STARTED;
+                    break;
+                case TYPE_RAGEFIRE:
+                    m_auiEncounter[uiType] = uiData;
+                    OpenAllDoors();
+                    break;
+                case TYPE_BALTHARUS:
+                    m_auiEncounter[uiType] = uiData;
+                    OpenAllDoors();
+                    break;
+                case TYPE_XERESTRASZA:
+                    m_auiEncounter[uiType] = uiData;
+                    if (uiData == IN_PROGRESS)
+                        OpenDoor(m_uiFireFieldGUID);
+                    else if (uiData == NOT_STARTED)
                     {
-                        if (state == DONE && GetBossState(DATA_SAVIANA_RAGEFIRE) == DONE)
-                        {
-                            HandleGameObject(FlameWallsGUID, true);
-                            if (Creature* zarithrian = instance->GetCreature(GeneralZarithrianGUID))
-                                zarithrian->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC | UNIT_FLAG_NOT_SELECTABLE);
-                        }
-                        break;
+                        CloseDoor(m_uiFireFieldGUID);
+                        OpenAllDoors();
                     }
-                    case DATA_SAVIANA_RAGEFIRE:
+                    else if (uiData == DONE)
                     {
-                        if (state == DONE && GetBossState(DATA_BALTHARUS_THE_WARBORN) == DONE)
+                        OpenAllDoors();
+                        if (m_auiEncounter[TYPE_ZARITHRIAN] == DONE)
                         {
-                            HandleGameObject(FlameWallsGUID, true);
-                            if (Creature* zarithrian = instance->GetCreature(GeneralZarithrianGUID))
-                                zarithrian->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_IMMUNE_TO_PC | UNIT_FLAG_NOT_SELECTABLE);
+                            m_auiEncounter[TYPE_EVENT] = 200;
+                            m_auiEventTimer = 30000;
                         }
-                        break;
                     }
-                    case DATA_GENERAL_ZARITHRIAN:
-                        if (GetBossState(DATA_SAVIANA_RAGEFIRE) == DONE && GetBossState(DATA_BALTHARUS_THE_WARBORN) == DONE)
-                            HandleGameObject(FlameWallsGUID, state != IN_PROGRESS);
-                        /*
-                        if (state == DONE)
-                            if (Creature* halionController = instance->SummonCreature(NPC_HALION_CONTROLLER, HalionControllerSpawnPos))
-                                halionController->AI()->DoAction(ACTION_INTRO_HALION);
-                        */
-                        break;
-                    case DATA_HALION:
-                        /*
-                        if (state != IN_PROGRESS)
-                            HandleGameObject(FlameRingGUID, true);
-                        */
-                        break;
-                    default:
-                        break;
-                }
-
-                return true;
+                    break;
+                case TYPE_ZARITHRIAN:
+                    m_auiEncounter[uiType] = uiData;
+                    if (uiData == DONE)
+                    {
+                        OpenDoor(m_uiFlameWallsGUID);
+                        m_auiEncounter[TYPE_EVENT] = 200;
+                        m_auiEventTimer = 30000;
+                    }
+                    else if (uiData == IN_PROGRESS)
+                        CloseDoor(m_uiFlameWallsGUID);
+                    else if (uiData == FAIL)
+                        OpenDoor(m_uiFlameWallsGUID);
+                    break;
+                case TYPE_HALION:
+                    m_auiEncounter[uiType] = uiData;
+                    if (uiData == IN_PROGRESS)
+                        CloseDoor(m_uiFlameRingGUID);
+                    else
+                        OpenDoor(m_uiFlameRingGUID);
+                    break;
+                case TYPE_HALION_EVENT:
+                    m_auiHalionEvent  = uiData;
+                    uiData = NOT_STARTED;
+                    break;
+                case TYPE_EVENT_TIMER:
+                    m_auiEventTimer = uiData;
+                    uiData = NOT_STARTED;
+                    break;
+                case DATA_ORB_DIRECTION:
+                    m_auiOrbDirection = uiData;
+                    uiData = NOT_STARTED;
+                    break;
+                case DATA_ORB_N:
+                    m_auiOrbNState = uiData;
+                    uiData = NOT_STARTED;
+                    break;
+                case DATA_ORB_S:
+                    m_auiOrbSState = uiData;
+                    uiData = NOT_STARTED;
+                    break;
+                case TYPE_COUNTER:
+                    if (uiData == 0)
+                        UpdateWorldState(false,0);
+                    else UpdateWorldState(true,uiData);
+                    uiData = NOT_STARTED;
+                    break;
             }
 
-            void SetData(uint32 type, uint32 data)
+            if (uiData == DONE)
             {
-                switch (type)
-                {
-                    case DATA_BALTHARUS_SHARED_HEALTH:
-                        BaltharusSharedHealth = data;
-                        break;
-                }
+                OUT_SAVE_INST_DATA;
+
+                std::ostringstream saveStream;
+
+                for(uint8 i = 0; i < MAX_ENCOUNTERS; ++i)
+                    saveStream << m_auiEncounter[i] << " ";
+
+                strSaveData = saveStream.str();
+
+                SaveToDB();
+                OUT_SAVE_INST_DATA_COMPLETE;
             }
+        }
+
+        std::string GetSaveData()
+        {
+            return strSaveData;
+        }
 
-            uint32 GetData(uint32 type)
+        uint32 GetData(uint32 uiType)
+        {
+            switch(uiType)
             {
-                switch (type)
-                {
-                    case DATA_BALTHARUS_SHARED_HEALTH:
-                        return BaltharusSharedHealth;
-                    default:
-                        break;
-                }
+                case TYPE_RAGEFIRE:
+                    return m_auiEncounter[uiType];
+                case TYPE_BALTHARUS:
+                    return m_auiEncounter[uiType];
+                case TYPE_XERESTRASZA:
+                    return m_auiEncounter[uiType];
+                case TYPE_ZARITHRIAN:
+                    return m_auiEncounter[uiType];
+                case TYPE_HALION:
+                    return m_auiEncounter[uiType];
+                case TYPE_EVENT:
+                    return m_auiEncounter[uiType];
+                case TYPE_HALION_EVENT:
+                    return m_auiHalionEvent;
+                case TYPE_EVENT_TIMER:
+                    return m_auiEventTimer;
+                case DATA_ORB_DIRECTION:
+                    return m_auiOrbDirection;
+                case DATA_ORB_N:
+                    return m_auiOrbNState;
+                case DATA_ORB_S:
+                    return m_auiOrbSState;
+                case TYPE_EVENT_NPC:
+                    switch (m_auiEncounter[TYPE_EVENT])
+                    {
+                        case 10:
+                        case 20:
+                        case 30:
+                        case 40:
+                        case 50:
+                        case 60:
+                        case 70:
+                        case 80:
+                        case 90:
+                        case 100:
+                        case 110:
+                        case 200:
+                        case 210:
+                            return NPC_XERESTRASZA;
+                            break;
+                        default:
+                            break;
+                    }
+                    return 0;
+            }
+            return 0;
+        }
 
-                return 0;
+        uint64 GetData64(uint32 uiData)
+        {
+            switch(uiData)
+            {
+                case NPC_BALTHARUS:
+                    return m_uiBaltharusGUID;
+                case NPC_CLONE:
+                    return m_uiCloneGUID;
+                case NPC_ZARITHIAN:
+                    return m_uiZarithianGUID;
+                case NPC_RAGEFIRE:
+                    return m_uiRagefireGUID;
+                case NPC_HALION_REAL:
+                    return m_uiHalion_pGUID;
+                case NPC_HALION_TWILIGHT:
+                    return m_uiHalion_tGUID;
+                case NPC_HALION_CONTROL:
+                    return m_uiHalionControlGUID;
+                case NPC_XERESTRASZA:
+                    return m_uiXerestraszaGUID;
+                case NPC_BALTHARUS_TARGET:
+                    return m_uiBaltharusTargetGUID;
+                case GO_FLAME_WALLS:
+                    return m_uiFlameWallsGUID;
+                case GO_FLAME_RING:
+                    return m_uiFlameRingGUID;
+                case GO_FIRE_FIELD:
+                    return m_uiFireFieldGUID;
+                case GO_HALION_PORTAL_1:
+                    return m_uiHalionPortal1GUID;
+                case GO_HALION_PORTAL_2:
+                    return m_uiHalionPortal2GUID;
+                case GO_HALION_PORTAL_3:
+                    return m_uiHalionPortal3GUID;
+                case NPC_SHADOW_PULSAR_N:
+                    return m_uiOrbNGUID;
+                case NPC_SHADOW_PULSAR_S:
+                    return m_uiOrbSGUID;
+                case NPC_ORB_ROTATION_FOCUS:
+                    return m_uiOrbFocusGUID;
+                case NPC_ORB_CARRIER:
+                    return m_uiOrbCarrierGUID;
+                case GO_ARBOL:
+                    return m_uiArbolGUID;
+                case GO_ARBOL1:
+                    return m_uiArbol1GUID;
+                case GO_ARBOL2:
+                    return m_uiArbol2GUID;
+                case GO_ARBOL3:
+                    return m_uiArbol3GUID;
             }
+            return 0;
+        }
 
-            std::string GetSaveData()
+        void Load(const char* chrIn)
+        {
+            if (!chrIn)
             {
-                OUT_SAVE_INST_DATA;
+                OUT_LOAD_INST_DATA_FAIL;
+                return;
+            }
 
-                std::ostringstream saveStream;
-                saveStream << "R S " << GetBossSaveData();
+            OUT_LOAD_INST_DATA(chrIn);
 
-                OUT_SAVE_INST_DATA_COMPLETE;
-                return saveStream.str();
+            std::istringstream loadStream(chrIn);
+
+            for(uint8 i = 0; i < MAX_ENCOUNTERS; ++i)
+            {
+                loadStream >> m_auiEncounter[i];
+
+                if (m_auiEncounter[i] == IN_PROGRESS
+                    || m_auiEncounter[i] == FAIL)
+                    m_auiEncounter[i] = NOT_STARTED;
             }
 
-            void Load(char const* str)
+            m_auiEncounter[TYPE_XERESTRASZA] = NOT_STARTED;
+
+            OUT_LOAD_INST_DATA_COMPLETE;
+            OpenAllDoors();
+        }
+    };
+};
+
+/*##############################
+# npc_convocadora_carboescala (40417)
+# Gracias eilo
+###############################*/
+
+enum ConvocadoraSpells
+{
+    SPELL_AGOSTAR = 75412,
+    SPELL_OLA_LLAMAS = 75413
+};
+
+class npc_convocadora_carboescala : public CreatureScript
+{
+public:
+    npc_convocadora_carboescala() : CreatureScript("npc_convocadora_carboescala") { }
+
+    CreatureAI* GetAI(Creature* creature) const
+    {
+        return new npc_convocadora_carboescalaAI(creature);
+    }
+
+    struct npc_convocadora_carboescalaAI : public ScriptedAI
+    {
+        npc_convocadora_carboescalaAI(Creature* creature) : ScriptedAI(creature)
+       {
+       }
+
+        uint32 uiAgostarTimer;
+        uint32 uiOlaTimer;
+
+
+        void Reset()
+        {
+            uiAgostarTimer = 3000;
+            uiOlaTimer = urand(8*IN_MILLISECONDS,13*IN_MILLISECONDS);
+            me->SetRespawnDelay(7*DAY);
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!UpdateVictim())
+                return;
+
+            if (uiAgostarTimer <= uiDiff)
             {
-                if (!str)
+                if (Unit* pTarget = SelectTarget(SELECT_TARGET_RANDOM,0))
                 {
-                    OUT_LOAD_INST_DATA_FAIL;
-                    return;
+                    if (pTarget && pTarget->isAlive())
+                        DoCast(pTarget, SPELL_AGOSTAR);
                 }
+                uiAgostarTimer = 8000;
+            }else uiAgostarTimer -= uiDiff;
+
+            if (uiOlaTimer <= uiDiff)
+            {
+                DoCast(me, SPELL_OLA_LLAMAS);
+                uiOlaTimer = urand(8*IN_MILLISECONDS,13*IN_MILLISECONDS);
+            }else uiOlaTimer -= uiDiff;
 
-                OUT_LOAD_INST_DATA(str);
+            DoMeleeAttackIfReady();
+        }
 
-                char dataHead1, dataHead2;
+        void JustDied(Unit* pKiller) { }
+    };
+};
 
-                std::istringstream loadStream(str);
-                loadStream >> dataHead1 >> dataHead2;
+/*##############################
+# npc_acometedor_carboescala (40419)
+# Gracias eilo
+###############################*/
 
-                if (dataHead1 == 'R' && dataHead2 == 'S')
-                {
-                    for (uint8 i = 0; i < EncounterCount; ++i)
-                    {
-                        uint32 tmpState;
-                        loadStream >> tmpState;
-                        if (tmpState == IN_PROGRESS || tmpState > SPECIAL)
-                            tmpState = NOT_STARTED;
+enum AcometedorSpells
+{
+    SPELL_RAJAR = 15284,
+    SPELL_OLA_CHOQUE = 75417
+};
 
-                        SetBossState(i, EncounterState(tmpState));
-                    }
-                }
-                else
-                    OUT_LOAD_INST_DATA_FAIL;
+class npc_acometedor_carboescala : public CreatureScript
+{
+public:
+    npc_acometedor_carboescala() : CreatureScript("npc_acometedor_carboescala") { }
 
-                OUT_LOAD_INST_DATA_COMPLETE;
-            }
+    CreatureAI* GetAI(Creature* creature) const
+    {
+        return new npc_acometedor_carboescalaAI(creature);
+    }
+
+    struct npc_acometedor_carboescalaAI : public ScriptedAI
+    {
+        npc_acometedor_carboescalaAI(Creature* creature) : ScriptedAI(creature)
+       {
+       }
+
+        uint32 uiRajarTimer;
+        uint32 uiOlaChoqueTimer;
+
+
+        void Reset()
+        {
+            uiRajarTimer = 5000;
+            uiOlaChoqueTimer = 9000;
+            me->SetRespawnDelay(7*DAY);
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!UpdateVictim())
+                return;
+
+            if (uiRajarTimer <= uiDiff)
+            {
+                DoCast(me->getVictim(), SPELL_RAJAR);
+                uiRajarTimer = 11000;
+            }else uiRajarTimer -= uiDiff;
+
+            if (uiOlaChoqueTimer <= uiDiff)
+            {
+                DoCast(me, SPELL_OLA_CHOQUE);
+                uiOlaChoqueTimer = 17000;
+            }else uiOlaChoqueTimer -= uiDiff;
 
-        protected:
-            uint64 BaltharusTheWarbornGUID;
-            uint64 GeneralZarithrianGUID;
-            uint64 SavianaRagefireGUID;
-            uint64 HalionGUID;
-            uint64 HalionControllerGUID;
-            uint64 CrystalChannelTargetGUID;
-            uint64 XerestraszaGUID;
-            uint64 FlameWallsGUID;
-            uint64 ZarithianSpawnStalkerGUID[2];
-            uint64 BurningTreeGUID[4];
-            uint64 FlameRingGUID;
-            uint32 BaltharusSharedHealth;
-        };
-
-        InstanceScript* GetInstanceScript(InstanceMap* map) const
+            DoMeleeAttackIfReady();
+        }
+
+        void JustDied(Unit* pKiller) { }
+    };
+};
+
+/*##############################
+# npc_elite_carboescala (40421)
+# Gracias eilo
+###############################*/
+
+enum EliteSpells
+{
+    SPELL_MACHACAR_CRANEOS = 15621
+};
+
+class npc_elite_carboescala : public CreatureScript
+{
+public:
+    npc_elite_carboescala() : CreatureScript("npc_elite_carboescala") { }
+
+    CreatureAI* GetAI(Creature* creature) const
+    {
+        return new npc_elite_carboescalaAI(creature);
+    }
+
+    struct npc_elite_carboescalaAI : public ScriptedAI
+    {
+        npc_elite_carboescalaAI(Creature* creature) : ScriptedAI(creature)
+       {
+       }
+
+        uint32 uiMachaqueTimer;
+
+
+        void Reset()
+        {
+            uiMachaqueTimer = 5000;
+            me->SetRespawnDelay(7*DAY);
+        }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!UpdateVictim())
+                return;
+
+            if (uiMachaqueTimer <= uiDiff)
+            {
+                DoCast(me->getVictim(), SPELL_MACHACAR_CRANEOS);
+                uiMachaqueTimer = 12000;
+            }else uiMachaqueTimer -= uiDiff;
+
+            DoMeleeAttackIfReady();
+        }
+
+        void JustDied(Unit* pKiller) { }
+    };
+};
+
+/*##############################
+# npc_comandante_carboescala (40423)
+# Gracias eilo
+###############################*/
+
+enum ComandanteSpells
+{
+    SPELL_GOLPE_MORTAL = 13737,
+    SPELL_GRITO_CONVOCACION = 75414
+};
+
+class npc_comandante_carboescala : public CreatureScript
+{
+public:
+    npc_comandante_carboescala() : CreatureScript("npc_comandante_carboescala") { }
+
+    CreatureAI* GetAI(Creature* creature) const
+    {
+        return new npc_comandante_carboescalaAI(creature);
+    }
+
+    struct npc_comandante_carboescalaAI : public ScriptedAI
+    {
+        npc_comandante_carboescalaAI(Creature* creature) : ScriptedAI(creature)
+       {
+       }
+
+        uint32 uiGolpeTimer;
+        uint32 uiGritoTimer;
+
+
+        void Reset()
         {
-            return new instance_ruby_sanctum_InstanceMapScript(map);
+            uiGolpeTimer = 9000;
+            uiGritoTimer = 1000;
+            me->SetRespawnDelay(7*DAY);
         }
+
+        void UpdateAI(const uint32 uiDiff)
+        {
+            if (!UpdateVictim())
+                return;
+
+            if (uiGolpeTimer <= uiDiff)
+            {
+                DoCast(me->getVictim(), SPELL_GOLPE_MORTAL);
+                uiGolpeTimer = 9000;
+            }else uiGolpeTimer -= uiDiff;
+
+            if (uiGritoTimer <= uiDiff)
+            {
+                DoCast(me, SPELL_GRITO_CONVOCACION);
+                uiGritoTimer = 100000;
+            }else uiGritoTimer -= uiDiff;
+
+            DoMeleeAttackIfReady();
+        }
+
+        void JustDied(Unit* pKiller) { }
+    };
 };
 
+
+
 void AddSC_instance_ruby_sanctum()
 {
-    new instance_ruby_sanctum();
+    new instance_ruby_sanctum;
+    new npc_convocadora_carboescala;
+    new npc_acometedor_carboescala;
+    new npc_elite_carboescala;
+    new npc_comandante_carboescala;
 }
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.h b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.h
index 02ade2f..e109d5f 100644
--- a/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.h
+++ b/src/server/scripts/Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.h
@@ -15,113 +15,79 @@
  * with this program. If not, see <http://www.gnu.org/licenses/>.
  */
 
-#ifndef RUBY_SANCTUM_H_
-#define RUBY_SANCTUM_H_
-
-#include "SpellScript.h"
-#include "Map.h"
-#include "Creature.h"
-
-#define RSScriptName "instance_ruby_sanctum"
-uint32 const EncounterCount = 4;
-
-Position const HalionControllerSpawnPos = {3156.037f, 533.2656f, 72.97205f, 0.0f};
-
-enum DataTypes
-{
-    // Encounter States/Boss GUIDs
-    DATA_BALTHARUS_THE_WARBORN              = 0,
-    DATA_GENERAL_ZARITHRIAN                 = 1,
-    DATA_SAVIANA_RAGEFIRE                   = 2,
-    DATA_HALION                             = 3,
-
-    // Etc
-    DATA_XERESTRASZA                        = 4,
-    DATA_CRYSTAL_CHANNEL_TARGET             = 5,
-    DATA_BALTHARUS_SHARED_HEALTH            = 6,
-    DATA_ZARITHIAN_SPAWN_STALKER_1          = 7,
-    DATA_ZARITHIAN_SPAWN_STALKER_2          = 8,
-    DATA_HALION_CONTROLLER                  = 9,
-    DATA_BURNING_TREE_1                     = 10,
-    DATA_BURNING_TREE_2                     = 11,
-    DATA_BURNING_TREE_3                     = 12,
-    DATA_BURNING_TREE_4                     = 13,
-    DATA_FLAME_RING                         = 14,
-};
+/*
+ * WowRean Script www.wowrean.com
+ */
 
-enum SharedActions
-{
-    ACTION_INTRO_BALTHARUS                  = -3975101,
-    ACTION_BALTHARUS_DEATH                  = -3975102,
-    ACTION_INTRO_HALION                     = -4014601,
-};
+#ifndef DEF_RUBY_SANCTUM_H
+#define DEF_RUBY_SANCTUM_H
 
-enum CreaturesIds
+enum
 {
-    // Baltharus the Warborn
-    NPC_BALTHARUS_THE_WARBORN               = 39751,
-    NPC_BALTHARUS_THE_WARBORN_CLONE         = 39899,
-    NPC_BALTHARUS_TARGET                    = 26712,
-
-    // General Zarithrian
-    NPC_GENERAL_ZARITHRIAN                  = 39746,
-    NPC_ONYX_FLAMECALLER                    = 39814,
-    NPC_ZARITHIAN_SPAWN_STALKER             = 39794,
-
-    // Saviana Ragefire
-    NPC_SAVIANA_RAGEFIRE                    = 39747,
-
-    // Halion
-    NPC_HALION                              = 39863,
-    NPC_HALION_TWILIGHT                     = 40142,
-    NPC_HALION_CONTROLLER                   = 40146,
-    NPC_LIVING_INFERNO                      = 40681,
-    NPC_LIVING_EMBER                        = 40683,
-    NPC_ORB_CARRIER                         = 40081,
-    NPC_ORB_ROTATION_FOCUS                  = 40091,
-    NPC_SHADOW_ORB_N                        = 40083,
-    NPC_SHADOW_ORB_S                        = 40100,
-    NPC_METEOR_STRIKE_MARK                  = 40029,
-    NPC_METEOR_STRIKE_NORTH                 = 40041,
-    NPC_METEOR_STRIKE_EAST                  = 40042,
-    NPC_METEOR_STRIKE_WEST                  = 40043,
-    NPC_METEOR_STRIKE_SOUTH                 = 40044,
-    NPC_METEOR_STRIKE_FLAME                 = 40055,
-    NPC_COMBUSTION                          = 40001,
-
-    // Xerestrasza
-    NPC_XERESTRASZA                         = 40429,
-};
+    MAX_ENCOUNTERS                 = 6,
+
+    TYPE_EVENT                     = 0,
+    TYPE_RAGEFIRE                  = 1,
+    TYPE_BALTHARUS                 = 2,
+    TYPE_XERESTRASZA               = 3,
+    TYPE_ZARITHRIAN                = 4,
+    TYPE_HALION                    = 5,
+
+    TYPE_COUNTER                   = 6, // for WorldUpdateState
+    TYPE_HALION_EVENT              = 7,
+    TYPE_HALION_TWILIGHT           = 8,
+
+    TYPE_EVENT_TIMER               = 50,
+    TYPE_EVENT_NPC                 = 51,
+
+    NPC_HALION_REAL                = 39863, // Halion Physical Realm NPC
+    NPC_HALION_TWILIGHT            = 40142, // Halion Twilight Realm NPC
+    NPC_HALION_CONTROL             = 40146,
+
+    NPC_BALTHARUS                  = 39751,
+    NPC_CLONE                      = 39899,
+    NPC_ZARITHIAN                  = 39746,
+    NPC_RAGEFIRE                   = 39747,
+    NPC_DRAGON                     = 3470008, // npc WS
+
+    NPC_XERESTRASZA                = 40429,
+
+    NPC_BALTHARUS_TARGET           = 26712,
+    NPC_ZARITHIAN_SPAWN_STALKER    = 39794,
+
+    // Orb rotation
+    NPC_SHADOW_PULSAR_N            = 40083, //spinning orb N spawn
+    NPC_SHADOW_PULSAR_S            = 40100, //spinning orb S spawn
+    NPC_ORB_CARRIER                = 40081,
+    NPC_ORB_ROTATION_FOCUS         = 40091,
+
+    GO_HALION_PORTAL_1             = 202794, //1327 ENTRY
+    GO_HALION_PORTAL_2             = 202795, //1327 ENTRY
+    GO_HALION_PORTAL_3             = 202796, //1327 EXIT
+
+    GO_FIRE_FIELD                  = 203005,
+    GO_FLAME_WALLS                 = 203006,
+    GO_FLAME_RING                  = 203007,
+    GO_FLAME_CREP                  = 203624,
+    GO_ARBOL                       = 203034,
+    GO_ARBOL1                      = 203035,
+    GO_ARBOL2                      = 203036,
+    GO_ARBOL3                      = 203037,
+
+    DATA_EVENT_TIMER               = 101,
+    DATA_EVENT                     = 102,
+
+    DATA_ORB_DIRECTION             = 110,
+    DATA_ORB_S                     = 111,
+    DATA_ORB_N                     = 112,
 
-enum GameObjectsIds
-{
-    GO_HALION_PORTAL_1                      = 202794,   // Unknown spell 75074, should be somehow be linked to 74807
-    GO_HALION_PORTAL_2                      = 202795,   // Also spell 75074
-    GO_HALION_PORTAL_EXIT                   = 202796,   // Leave Twilight Realm (74812)
-    GO_FIRE_FIELD                           = 203005,
-    GO_FLAME_WALLS                          = 203006,
-    GO_FLAME_RING                           = 203007,
-    GO_BURNING_TREE_1                       = 203034,
-    GO_BURNING_TREE_2                       = 203035,
-    GO_BURNING_TREE_3                       = 203036,
-    GO_BURNING_TREE_4                       = 203037,
 };
 
-enum WorldStatesRS
+enum uiWorldStates
 {
-    WORLDSTATE_CORPOREALITY_MATERIAL = 5049,
-    WORLDSTATE_CORPOREALITY_TWILIGHT = 5050,
-    WORLDSTATE_CORPOREALITY_TOGGLE   = 5051,
+    UPDATE_STATE_UI_COUNT_R          = 5049,
+    UPDATE_STATE_UI_COUNT_T          = 5050,
+    UPDATE_STATE_UI_SHOW             = 5051,
 };
 
-template<class AI>
-CreatureAI* GetRubySanctumAI(Creature* creature)
-{
-    if (InstanceMap* instance = creature->GetMap()->ToInstanceMap())
-        if (instance->GetInstanceScript())
-            if (instance->GetScriptId() == sObjectMgr->GetScriptId(RSScriptName))
-                return new AI(creature);
-    return NULL;
-}
-
-#endif // RUBY_SANCTUM_H_
+#endif
-- 
1.7.8.msysgit.0

