From ea7c41d9d091a861ce218a5958a61d9df2512c1a Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Tue, 8 May 2012 01:41:17 -0500
Subject: [PATCH 87/93] 2.17.2 PitOfSaron: Implementacion de script de intro,
 outro y varios

---
 .../reanemu/2012_04_04_100_world_pit_of_saron.sql  |  105 ++
 .../PitOfSaron/boss_forgemaster_garfrost.cpp       |    9 +
 .../FrozenHalls/PitOfSaron/boss_krickandick.cpp    |   13 +-
 .../PitOfSaron/boss_scourgelord_tyrannus.cpp       |  102 ++-
 .../PitOfSaron/instance_pit_of_saron.cpp           |  138 +++-
 .../FrozenHalls/PitOfSaron/pit_of_saron.cpp        | 1161 +++++++++++++++++++-
 .../FrozenHalls/PitOfSaron/pit_of_saron.h          |   20 +-
 7 files changed, 1492 insertions(+), 56 deletions(-)
 create mode 100644 sql/updates/world/reanemu/2012_04_04_100_world_pit_of_saron.sql

diff --git a/sql/updates/world/reanemu/2012_04_04_100_world_pit_of_saron.sql b/sql/updates/world/reanemu/2012_04_04_100_world_pit_of_saron.sql
new file mode 100644
index 0000000..eef2ecc
--- /dev/null
+++ b/sql/updates/world/reanemu/2012_04_04_100_world_pit_of_saron.sql
@@ -0,0 +1,105 @@
+-- Eilo (https://github.com/eilo)
+-- Foso de Saron, nueva intro, outro y gauntlet
+-- Recopilacion de scripts de plangcoder, cemak y eze. Agradecimiento especial a avalonfr
+-- varios sonidos sacados de aqui http://www.youtube.com/watch?v=kiMARN85M30
+
+-- Condicionales para las spells!! sii ya se como
+DELETE FROM `conditions` WHERE `SourceTypeOrReferenceId`=13 AND `SourceEntry` IN (70132,70464,70512,70513);
+INSERT INTO `conditions` (`SourceTypeOrReferenceId`,`SourceEntry`,`ConditionTypeOrReference`,`ConditionValue1`,`ConditionValue2`) VALUES
+(13,70132,31,3,36796),
+(13,70464,31,3,36796),
+(13,70512,31,3,36796),
+(13,70513,31,3,36796);
+
+-- Textos y sonidos
+DELETE FROM script_texts WHERE entry IN (-1658074, -1658075, -1658076, -1658077, -1658078, -1658080, -1658081, -1658082, -1658084, -1658085, -1658086, -1658087, -1658088);
+INSERT INTO `script_texts` (`npc_entry`,`entry`,`content_default`,`sound`,`type`,`language`,`emote`,`comment`) VALUES 
+('0', '-1658074', 'Han entrado intrusos en el dominio del maestro. Sonad la alarma!', 16747, 1, 0, 0, 'Tyrannus Opening'),
+('0', '-1658075', 'Hmph carnaza... Ni siquiera servis para trabajar en las canteras. Saborear estos ultimos momentos, pues pronto no sereis mas que no muertos descerebrados!', 16748, 1, 0, 0, 'Tyrannus Opening'),
+('0', '-1658076', 'Soldados de la Horda, al ataque!', 17045, 1, 0, 0, 'Sylvanas Opening'),
+('0', '-1658077', 'Heroes de la Alianza, al ataque!', 16626, 1, 0, 0, 'Jaina Opening'),
+('0', '-1658078', 'Su ultimo recuerdo sera un dolor lleno de agonia', 16749, 1, 0, 0, 'Tyrannus Opening'),
+('0', '-1658080', 'Pateticos infelices', 17046, 1, 0, 0, 'Sylvanas Opening'),
+('0', '-1658081', 'NO! MONSTRUO!', 16627, 1, 0, 0, 'Jaina Opening'),
+('0', '-1658082', 'Esbirros, destruid a estos intrusos!', 16751, 1, 0, 0, 'Tyrannus Opening'),
+('0', '-1658084', 'Debia hacerlo. Porfavor perdonadme honorables soldados', 16628, 1, 0, 0, 'Jaina Opening'),
+('0', '-1658085', 'Tendran que batallar a traves de este pozo negro por su cuenta.', 17047, 0, 0, 0, 'Sylvanas Opening'),
+('0', '-1658086', 'Tendran que atravesar este foso por su cuenta.', 16629, 0, 0, 0, 'Jaina Opening'),
+('0', '-1658087', 'Liberar a los esclavos de la orda que os encontreis en el camino. Seguramente necesitaremos ayuda en la batalla contra Tyrannus. Reunire refuerzos y nos veremos en el otro lado de la cantera.', 17048, 0, 0, 0, 'Sylvanas Opening'),
+('0', '-1658088', 'Liberen a los esclavos de la alianza que os enconteis en el camino. Seguramente necesitaremos ayuda en la batalla contra Tyrannus. Reunire refuerzos y nos veremos en el otro lado de la cantera.', 16630, 0, 0, 0, 'Jaina Opening');
+
+-- Corrupted champion cuando ya reviven
+REPLACE INTO `creature_template` (`entry`, `difficulty_entry_1`, `difficulty_entry_2`, `difficulty_entry_3`, `KillCredit1`, `KillCredit2`, `modelid1`, `modelid2`, `modelid3`, `modelid4`, `name`, `subname`, `IconName`, `gossip_menu_id`, `minlevel`, `maxlevel`, `exp`, `faction_A`, `faction_H`, `npcflag`, `speed_walk`, `speed_run`, `scale`, `rank`, `mindmg`, `maxdmg`, `dmgschool`, `attackpower`, `dmg_multiplier`, `baseattacktime`, `rangeattacktime`, `unit_class`, `unit_flags`, `dynamicflags`, `family`, `trainer_type`, `trainer_spell`, `trainer_class`, `trainer_race`, `minrangedmg`, `maxrangedmg`, `rangedattackpower`, `type`, `type_flags`, `lootid`, `pickpocketloot`, `skinloot`, `resistance1`, `resistance2`, `resistance3`, `resistance4`, `resistance5`, `resistance6`, `spell1`, `spell2`, `spell3`, `spell4`, `spell5`, `spell6`, `spell7`, `spell8`, `PetSpellDataId`, `VehicleId`, `mingold`, `maxgold`, `AIName`, `MovementType`, `InhabitType`, `Health_mod`, `Mana_mod`, `Armor_mod`, `RacialLeader`, `questItem1`, `questItem2`, `questItem3`, `questItem4`, `questItem5`, `questItem6`, `movementId`, `RegenHealth`, `equipment_id`, `mechanic_immune_mask`, `flags_extra`, `ScriptName`, `WDBVerified`) VALUES
+(36796, 37657, 0, 0, 0, 0, 9785, 0, 0, 0, 'Corrupted Champion', '', '', 0, 80, 80, 2, 14, 14, 0, 1, 1.14286, 1, 0, 1, 2, 0, 0, 1, 2000, 2000, 1, 0, 8, 0, 0, 0, 0, 0, 1, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', 0, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8388624, 0, '', 12340);
+
+-- Añadir interaccion con los npcs muertos (originalmente 72, añadido 128)
+UPDATE creature_template SET type_flags = 200 WHERE entry = 36661;
+
+-- Textos del garfrost
+DELETE FROM script_texts WHERE entry IN(-1658022, -1658023);
+INSERT INTO script_texts (entry,content_default,sound,type,language,emote,comment) VALUES
+(-1658022,'%s hurls a massive saronite boulder at you!',0,5,0,0,'garfrost EMOTE_THROW_SARONITE'), -- TODO emote only displayed to target
+(-1658023,'%s casts Deep Freeze at $N.',0,3,0,0,'garfrost EMOTE_DEEP_FREEZE');
+
+-- Tyrannus
+UPDATE creature_template SET scriptname = '' WHERE entry IN (36794);
+DELETE FROM `vehicle_template_accessory` WHERE `entry` IN (36794);
+-- Sylvannas y Jaina fase 1 o intro
+UPDATE creature_template SET scriptname = "pos_intro" WHERE entry IN (36990, 36993);
+-- Deathwhisper Necrolyte, los de la entrada de los lados
+UPDATE creature_template SET MovementType = 2 where entry IN (36788);
+
+-- Scriptnames de los Areatriggers
+DELETE FROM `areatrigger_scripts` where `entry`= 5578;
+INSERT INTO `areatrigger_scripts` (`entry`,`ScriptName`) VALUES
+(5578,'at_ymirjar_flamebearer_pos');
+
+DELETE FROM `areatrigger_scripts` where `entry`= 5579;
+INSERT INTO `areatrigger_scripts` (`entry`,`ScriptName`) VALUES
+(5579,'at_fallen_warrior_pos');
+
+DELETE FROM `areatrigger_scripts` where `entry`= 5580;
+INSERT INTO `areatrigger_scripts` (`entry`,`ScriptName`) VALUES
+(5580,'at_ice_cicle_pos');
+
+DELETE FROM `areatrigger_scripts` where `entry`= 5573;
+INSERT INTO `areatrigger_scripts` (`entry`,`ScriptName`) VALUES
+(5573,'at_pos_intro');
+
+DELETE FROM `areatrigger_scripts` where `entry`= 5598;
+INSERT INTO `areatrigger_scripts` (`entry`,`ScriptName`) VALUES
+(5598,'at_slave_rescued_pos');
+
+DELETE FROM `areatrigger_scripts` where `entry`= 5599;
+INSERT INTO `areatrigger_scripts` (`entry`,`ScriptName`) VALUES
+(5599,'at_geist_ambusher_pos');
+
+-- Scriptname a jaina y sylvannas de fase 3 u outro
+UPDATE creature_template SET Scriptname = 'pos_outro' WHERE entry IN (38189, 38188);
+
+-- Este es especial para deshabilitar la script del ambusher y que caigan cuando pisen el areatrigger
+UPDATE creature_template set Scriptname = '' where entry = 36886;
+
+-- Esto es para borrar spawns q no necesitamos
+SET @ENTRY1=36840;
+SET @ENTRY2=36892;
+SET @ENTRY3=36893;
+SET @ENTRY4=36841;
+SET @ENTRY5=36842;
+SET @ENTRY6=37584;
+SET @ENTRY7=37588;
+SET @ENTRY8=37587;
+SET @ENTRY9=37496;
+SET @ENTRY10=37497;
+SET @ENTRY11=37729;
+SET @ENTRY12=37728;
+SET @ENTRY13=36877;
+DELETE FROM creature WHERE id IN (@ENTRY1, @ENTRY2, @ENTRY3, @ENTRY4, @ENTRY5, @ENTRY6, @ENTRY7, @ENTRY8, @ENTRY9, @ENTRY10, @ENTRY11, @ENTRY12, @ENTRY13);
+
+-- Go Portcullis, se lo usa al final para el outro
+UPDATE gameobject_template set flags = 1, faction = 1375 WHERE entry = 201848;
+
+-- Para el esclavo antes de subir
+DELETE FROM `script_texts` WHERE entry = -1658071;
+INSERT INTO `script_texts` (`npc_entry`,`entry`,`content_default`,`content_loc1`,`content_loc2`,`content_loc3`,`content_loc4`,`content_loc5`,`content_loc6`,`content_loc7`,`content_loc8`,`sound`,`type`,`language`,`emote`,`comment`) VALUES
+(36888,-1658071,'Por aqui! Estamos organizando el asalto al Lider de la Plaga!',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,1,0,0,'SAY_RESCOUD_HORDE_ALLIANCE');
diff --git a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_forgemaster_garfrost.cpp b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_forgemaster_garfrost.cpp
index 64609ef..d4a1549 100644
--- a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_forgemaster_garfrost.cpp
+++ b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_forgemaster_garfrost.cpp
@@ -26,6 +26,9 @@ enum Yells
     SAY_DEATH           = -1658004,
     SAY_PHASE2          = -1658005,
     SAY_PHASE3          = -1658006,
+    
+    EMOTE_THROW_SARONITE = -1658022,
+    EMOTE_DEEP_FREEZE    = -1658023,
 
     SAY_TYRANNUS_DEATH  = -1658007,
 };
@@ -199,7 +202,10 @@ class boss_garfrost : public CreatureScript
                     {
                         case EVENT_THROW_SARONITE:
                             if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                            {
+                                DoScriptText(EMOTE_THROW_SARONITE, me, target);
                                 DoCast(target, SPELL_THROW_SARONITE);
+                            }
                             events.ScheduleEvent(EVENT_THROW_SARONITE, urand(12500, 20000));
                             break;
                         case EVENT_CHILLING_WAVE:
@@ -208,7 +214,10 @@ class boss_garfrost : public CreatureScript
                             break;
                         case EVENT_DEEP_FREEZE:
                             if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                            {
+                                DoScriptText(EMOTE_DEEP_FREEZE, me, target);
                                 DoCast(target, SPELL_DEEP_FREEZE);
+                            }
                             events.ScheduleEvent(EVENT_DEEP_FREEZE, 35000, 0, PHASE_THREE);
                             break;
                         case EVENT_JUMP:
diff --git a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_krickandick.cpp b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_krickandick.cpp
index fa260cb..2315f50 100644
--- a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_krickandick.cpp
+++ b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_krickandick.cpp
@@ -368,7 +368,10 @@ class boss_krick : public CreatureScript
             {
                 if (_phase != PHASE_OUTRO)
                     return;
-
+                
+                if(_instanceScript->GetData(DATA_TYRANNUS_START) != DONE)
+                 _instanceScript->SetData(DATA_TYRANNUS_START, DONE);
+                 
                 _events.Update(diff);
 
                 while (uint32 eventId = _events.ExecuteEvent())
@@ -475,9 +478,17 @@ class boss_krick : public CreatureScript
                             if (Creature* jainaOrSylvanas = ObjectAccessor::GetCreature(*me, _outroNpcGUID))
                             {
                                 if (_instanceScript->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                                {
                                     DoScriptText(SAY_JAYNA_OUTRO_10, jainaOrSylvanas);
+                                    jainaOrSylvanas->SetSpeed(MOVE_WALK, 0.5f, true);
+                                    jainaOrSylvanas->GetMotionMaster()->MovePoint(0, 847.737610f, -6.079165f, 509.911835f);
+                                }
                                 else
+                                {
                                     DoScriptText(SAY_SYLVANAS_OUTRO_10, jainaOrSylvanas);
+                                    jainaOrSylvanas->SetSpeed(MOVE_WALK, 0.5f, true);
+                                    jainaOrSylvanas->GetMotionMaster()->MovePoint(0, 847.737610f, -6.079165f, 509.911835f);
+                                }
                             }
                             // End of OUTRO. for now...
                             _events.ScheduleEvent(EVENT_OUTRO_END, 3000);
diff --git a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_scourgelord_tyrannus.cpp b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_scourgelord_tyrannus.cpp
index 8d015ad..7c6e092 100644
--- a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_scourgelord_tyrannus.cpp
+++ b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/boss_scourgelord_tyrannus.cpp
@@ -99,6 +99,33 @@ enum Actions
 
 #define GUID_HOARFROST 1
 
+static const Position MoveLocations1[9] =
+{
+    {1064.217896f, 118.629662f, 628.156311f, 0.000000f},
+    {1065.733276f, 126.342400f, 628.156128f, 0.000000f},
+    {1060.914185f, 130.460403f, 628.156128f, 0.000000f},
+    {1059.328003f, 120.532974f, 628.156128f, 0.000000f},
+    {1052.488647f, 122.232979f, 628.156128f, 0.000000f},
+    {1047.673950f, 121.389717f, 628.156128f, 0.000000f},
+    {1043.781250f, 113.463493f, 628.156128f, 0.000000f},
+    {1044.634521f, 109.196129f, 628.518188f, 0.000000f},
+    {1052.443726f, 110.813431f, 628.156250f, 0.000000f},
+};
+
+static const Position MoveLocations2[9] =
+{
+    {1068.739624f, 103.664474f, 630.880005f, 0.000000f},
+    {1062.253784f, 101.495079f, 630.683533f, 0.000000f},
+    {1057.972168f, 100.040573f, 630.238525f, 0.000000f},
+    {1053.684204f, 98.358513f, 629.913330f, 0.000000f},
+    {1060.612793f, 87.334480f, 631.050354f, 0.000000f},
+    {1068.163208f, 90.051262f, 631.533752f, 0.000000f},
+    {1046.957642f, 108.734108f, 628.526245f, 0.000000f},
+    {1044.634521f, 109.196129f, 628.518188f, 0.000000f},
+    {1052.443726f, 110.813431f, 628.156250f, 0.000000f},
+};
+
+static const Position leaderPosOutro1 = {1064.217896f, 118.629662f, 628.156311f, 0.000000f};
 static const Position rimefangPos[10] =
 {
     {1017.299f, 168.9740f, 642.9259f, 0.000000f},
@@ -204,6 +231,33 @@ class boss_tyrannus : public CreatureScript
                     events.ScheduleEvent(EVENT_INTRO_3, 34000, 0, PHASE_INTRO);
                     events.ScheduleEvent(EVENT_COMBAT_START, 36000, 0, PHASE_INTRO);
                     instance->SetBossState(DATA_TYRANNUS, IN_PROGRESS);
+                    
+                   if(Creature *pSlave = me->SummonCreature(NPC_GORKUN_IRONSKULL_1, 1075.489868f, 20.001131f, 632.835938f, 1.659531f, TEMPSUMMON_DEAD_DESPAWN, 10000))
+                   {
+                      pSlave->GetMotionMaster()->MovePoint(0, leaderPosOutro1);
+                      pSlave->SetHomePosition(leaderPosOutro1);
+                   }
+
+                   for(uint8 i = 0; i < 9; ++i)
+                  {
+                     if(Creature *pSlave = me->SummonCreature(NPC_FREED_SLAVE_1_HORDE, 1086.112061f, 21.060266f, 631.892273f, 1.995682f, TEMPSUMMON_DEAD_DESPAWN, 30000))
+                     {
+                          pSlave->GetMotionMaster()->MovePoint(0, MoveLocations1[i]);
+                          pSlave->SetHomePosition(MoveLocations1[i]);
+                     }
+                      ++i;
+                     if(Creature *pSlave = me->SummonCreature(NPC_FREED_SLAVE_2_HORDE, 1069.121582f, 18.495785f, 634.020203f, 1.573138f, TEMPSUMMON_DEAD_DESPAWN, 30000))
+                     {
+                          pSlave->GetMotionMaster()->MovePoint(0, MoveLocations1[i]);
+                          pSlave->SetHomePosition(MoveLocations1[i]);
+                     }
+                     ++i;
+                     if(Creature *pSlave = me->SummonCreature(NPC_FREED_SLAVE_3_HORDE, 1075.489868f, 20.001131f, 632.835938f, 1.659531f, TEMPSUMMON_DEAD_DESPAWN, 30000))
+                     {
+                          pSlave->GetMotionMaster()->MovePoint(0, MoveLocations1[i]);
+                          pSlave->SetHomePosition(MoveLocations1[i]);
+                     }
+                  }
                 }
             }
 
@@ -219,7 +273,8 @@ class boss_tyrannus : public CreatureScript
                     switch (eventId)
                     {
                         case EVENT_INTRO_1:
-                            //DoScriptText(SAY_GORKUN_INTRO_2, pGorkunOrVictus);
+                            if (Creature* GorkunOrVictus = me->GetCreature(*me, instance->GetData64(DATA_VICTUS_OR_GORKUN_FREED)))
+                            DoScriptText(SAY_GORKUN_INTRO_2, GorkunOrVictus);
                             break;
                         case EVENT_INTRO_2:
                             DoScriptText(SAY_TYRANNUS_INTRO_3, me);
@@ -239,6 +294,51 @@ class boss_tyrannus : public CreatureScript
                             events.ScheduleEvent(EVENT_OVERLORD_BRAND, urand(5000, 7000));
                             events.ScheduleEvent(EVENT_FORCEFUL_SMASH, urand(14000, 16000));
                             events.ScheduleEvent(EVENT_MARK_OF_RIMEFANG, urand(25000, 27000));
+                            
+                        for(uint8 i = 0; i < 9; ++i)
+                       {
+                          if(Creature *pReaver = me->SummonCreature(NPC_WRATHBONE_REAVER, 1069.934082f, 49.015617f, 630.590210f, 1.657956f, TEMPSUMMON_DEAD_DESPAWN, 30000))
+                         { 
+                            if (pReaver->isAlive())
+                            {
+                               if (Creature* pSlave = me->FindNearestCreature(NPC_FREED_SLAVE_1_HORDE, 150.0f, true))
+                              {
+                                 pReaver->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                 pReaver->SetHomePosition(MoveLocations2[i]);
+                                 pReaver->Attack(pSlave, true);
+                                 pReaver->GetMotionMaster()->MoveChase(pSlave);
+                              }
+                            }
+                         }
+                           ++i;
+                         if(Creature *pSorcerer = me->SummonCreature(NPC_WRATHBONE_SORCERER, 1069.934082f, 49.015617f, 630.590210f, 1.657956f, TEMPSUMMON_DEAD_DESPAWN, 30000))
+                         {
+                            if (pSorcerer->isAlive())
+                            {
+                               if (Creature* pSlave = me->FindNearestCreature(NPC_FREED_SLAVE_2_HORDE, 150.0f, true))
+                               {
+                                  pSorcerer->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                  pSorcerer->SetHomePosition(MoveLocations2[i]);
+                                  pSorcerer->Attack(pSlave, true);
+                                  pSorcerer->GetMotionMaster()->MoveChase(pSlave);
+                               }
+                            }
+                         }
+                        ++i;
+                          if(Creature *pFallen = me->SummonCreature(NPC_FALLEN_WARRIOR, 1069.934082f, 49.015617f, 630.590210f, 1.657956f, TEMPSUMMON_DEAD_DESPAWN, 30000))
+                          {
+                              if (pFallen->isAlive())
+                              {
+                                 if (Creature* pSlave = me->FindNearestCreature(NPC_FREED_SLAVE_3_HORDE, 150.0f, true))
+                                 {
+                                     pFallen->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                     pFallen->SetHomePosition(MoveLocations2[i]);
+                                     pFallen->Attack(pSlave, true);
+                                    pFallen->GetMotionMaster()->MoveChase(pSlave);
+                                 }
+                              }
+                          }
+                        }
                             break;
                         case EVENT_OVERLORD_BRAND:
                             if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1, 0.0f, true))
diff --git a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/instance_pit_of_saron.cpp b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/instance_pit_of_saron.cpp
index 2452980..332d6bf 100644
--- a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/instance_pit_of_saron.cpp
+++ b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/instance_pit_of_saron.cpp
@@ -18,10 +18,34 @@
 #include "ScriptPCH.h"
 #include "pit_of_saron.h"
 
-// positions for Martin Victus (37591) and Gorkun Ironskull (37592)
-Position const SlaveLeaderPos  = {689.7158f, -104.8736f, 513.7360f, 0.0f};
 // position for Jaina and Sylvanas
 Position const EventLeaderPos2 = {1054.368f, 107.14620f, 628.4467f, 0.0f};
+//Slaves For Alliance and Horde. Martin Victus and Gorkun Ironskull 
+const uint32 NpcSlaveAlliance[3] = {37591, 37572, 37575 };
+const uint32 NpcSlaveHorde[3] = {37592, 37578, 37579};
+const uint32 NpcSlaveIfDeadGarfrost[2] = {36888, 36889};
+//Dead Garfrost from sniff
+static const Position SlaveLeaderPos[3] =
+{
+    {693.281555f, -169.690872f, 526.965454f, 1.485173f}, 
+    {696.024902f, -169.953308f, 526.870850f, 1.603771f}, 
+    {690.887512f, -169.970963f, 526.891357f, 1.269191f},
+};
+// if Dead IckandKrick from sniff
+static const Position SlaveLeaderPos2[3] =
+{
+    {849.804016f, -9.097073f, 509.900574f, 2.183652f},
+    {851.979919f, -7.567026f, 509.982391f, 2.040709f}, 
+    {847.959351f, -11.114618f, 509.794922f, 2.366650f},
+};
+// Slaves Alliance and Horde If Gargrost Dead For Events  from sniff
+const Position spawnPoints1[3] =
+{
+    {768.920044f, -38.462135f, 508.355469f, 3.903403f},
+    {766.413635f, -36.130611f, 508.346466f, 4.056557f},
+    {770.746033f, -40.480698f, 508.355469f, 3.915185f},
+};
+Position const spawnPoints2 = {773.266174f, -43.121738f, 508.355469f, 3.954455f};
 
 class instance_pit_of_saron : public InstanceMapScript
 {
@@ -40,7 +64,16 @@ class instance_pit_of_saron : public InstanceMapScript
                 _rimefangGUID = 0;
                 _jainaOrSylvanas1GUID = 0;
                 _jainaOrSylvanas2GUID = 0;
+                _sindragosaGUID = 0;
                 _teamInInstance = 0;
+                _uiHorp =0;
+                _victusOrGorkunFreedGUID = 0;
+                _tyrannusEventStart = NOT_STARTED;
+                _areaTriggerYmirjar = NOT_STARTED;
+                _areaTriggerFallen  = NOT_STARTED;
+                _areaTriggerIceCicle = NOT_STARTED;
+                _areaTriggerSlaveOutroFargrost = NOT_STARTED;
+                _areTriggerGeistAmbusher = NOT_STARTED;
             }
 
             void OnPlayerEnter(Player* player)
@@ -149,10 +182,32 @@ class instance_pit_of_saron : public InstanceMapScript
                         if (_teamInInstance == ALLIANCE)
                             creature->UpdateEntry(NPC_MARTIN_VICTUS_2, ALLIANCE);
                         break;
+                    case NPC_GORKUN_IRONSKULL_1:
+                        if (_teamInInstance == ALLIANCE)
+                            creature->UpdateEntry(NPC_MARTIN_VICTUS_2, ALLIANCE);
+                          _victusOrGorkunFreedGUID = creature->GetGUID();
+                    case NPC_SINDRAGOSA:
+                         _sindragosaGUID = creature->GetGUID();
+                        break;
                     default:
                         break;
                 }
             }
+            
+            void OnGameObjectCreate(GameObject* go)
+            {
+               switch (go->GetEntry())
+               {
+                    case GO_ICE_WALL:
+                        uiIceWall = go->GetGUID();
+                        if (GetBossState(DATA_GARFROST) == DONE && GetBossState(DATA_ICK) == DONE)
+                            HandleGameObject(NULL,true,go);
+                         break;
+                    case GO_HALLS_OF_REFLECT_PORT:
+                         _uiHorp = go->GetGUID();
+                         break;
+                }
+            }
 
             bool SetBossState(uint32 type, EncounterState state)
             {
@@ -161,16 +216,44 @@ class instance_pit_of_saron : public InstanceMapScript
 
                 switch (type)
                 {
+                    case DATA_ICK:
+                        if(state == DONE)
+                        {
+                            if (Creature* summoner = instance->GetCreature(_ickGUID))
+                            {
+                               for (int i = 0; i < 3; ++i)
+                               {
+                                if (_teamInInstance == ALLIANCE)
+                                    summoner->SummonCreature(NpcSlaveAlliance[i], SlaveLeaderPos2[i], TEMPSUMMON_MANUAL_DESPAWN);
+                                else
+                                    summoner->SummonCreature(NpcSlaveHorde[i], SlaveLeaderPos2[i], TEMPSUMMON_MANUAL_DESPAWN);
+                               }
+                            }
+                            if(GetBossState(DATA_GARFROST) == DONE)
+                                HandleGameObject(uiIceWall, true, NULL);
+                        }
+                        break;
                     case DATA_GARFROST:
-                        if (state == DONE)
+                        if(state == DONE)
                         {
+                            SetData(DATA_SLAVE_OUTRO_GARFROST, IN_PROGRESS);
                             if (Creature* summoner = instance->GetCreature(_garfrostGUID))
                             {
+                               for (int i = 0; i < 3; ++i)
+                               {
                                 if (_teamInInstance == ALLIANCE)
-                                    summoner->SummonCreature(NPC_MARTIN_VICTUS_1, SlaveLeaderPos, TEMPSUMMON_MANUAL_DESPAWN);
+                                    summoner->SummonCreature(NpcSlaveAlliance[i], SlaveLeaderPos[i], TEMPSUMMON_MANUAL_DESPAWN);
                                 else
-                                    summoner->SummonCreature(NPC_GORKUN_IRONSKULL_2, SlaveLeaderPos, TEMPSUMMON_MANUAL_DESPAWN);
+                                    summoner->SummonCreature(NpcSlaveHorde[i], SlaveLeaderPos[i], TEMPSUMMON_MANUAL_DESPAWN);
+                               }
+                               summoner->SummonCreature(36888, spawnPoints2, TEMPSUMMON_MANUAL_DESPAWN);
+                               for (uint8 i = 0; i < 3; i++)
+                               {
+                               summoner->SummonCreature(36889, spawnPoints1[i], TEMPSUMMON_MANUAL_DESPAWN);
+                               }
                             }
+                            if(GetBossState(DATA_ICK) == DONE)
+                                HandleGameObject(uiIceWall, true, NULL);
                         }
                         break;
                     case DATA_TYRANNUS:
@@ -198,6 +281,18 @@ class instance_pit_of_saron : public InstanceMapScript
                 {
                     case DATA_TEAM_IN_INSTANCE:
                         return _teamInInstance;
+                    case DATA_TYRANNUS_START:
+                        return _tyrannusEventStart;
+                    case DATA_AREA_TRIGGER_YMIRJAR:
+                        return _areaTriggerYmirjar;
+                    case DATA_AREA_TRIGGER_FALLEN:
+                        return _areaTriggerFallen;
+                    case DATA_AREA_TRIGGER_ICE_CICLE:
+                        return _areaTriggerIceCicle;
+                    case DATA_SLAVE_OUTRO_GARFROST:
+                        return _areaTriggerSlaveOutroFargrost;
+                    case DATA_GEIST_AMBUSHER:
+                        return _areTriggerGeistAmbusher;
                     default:
                         break;
                 }
@@ -225,13 +320,34 @@ class instance_pit_of_saron : public InstanceMapScript
                         return _jainaOrSylvanas1GUID;
                     case DATA_JAINA_SYLVANAS_2:
                         return _jainaOrSylvanas2GUID;
+                    case DATA_VICTUS_OR_GORKUN_FREED:
+                        return _victusOrGorkunFreedGUID;
+                    case DATA_SINDRAGOSA:
+                         return _sindragosaGUID;
+                    case GO_HALLS_OF_REFLECT_PORT:
+                         return _uiHorp;
                     default:
                         break;
                 }
 
                 return 0;
             }
-
+            
+            void SetData(uint32 type, uint32 data)
+           {
+            if(type == DATA_TYRANNUS_START)
+                _tyrannusEventStart = data;
+            if(type == DATA_AREA_TRIGGER_YMIRJAR)
+                _areaTriggerYmirjar = data;
+            if(type == DATA_AREA_TRIGGER_FALLEN)
+                _areaTriggerFallen = data;
+            if(type == DATA_AREA_TRIGGER_ICE_CICLE)
+                _areaTriggerIceCicle = data;
+            if(type == DATA_SLAVE_OUTRO_GARFROST)
+                _areaTriggerSlaveOutroFargrost = data;
+            if(type == DATA_GEIST_AMBUSHER)
+                _areTriggerGeistAmbusher = data;
+           }
             std::string GetSaveData()
             {
                 OUT_SAVE_INST_DATA;
@@ -286,8 +402,18 @@ class instance_pit_of_saron : public InstanceMapScript
             uint64 _tyrannusEventGUID;
             uint64 _jainaOrSylvanas1GUID;
             uint64 _jainaOrSylvanas2GUID;
+            uint64 uiIceWall;
+            uint64 _victusOrGorkunFreedGUID;
+            uint64 _sindragosaGUID;
+            uint64 _uiHorp;
 
             uint32 _teamInInstance;
+            uint8  _tyrannusEventStart;
+            uint8  _areaTriggerYmirjar;
+            uint8  _areaTriggerFallen;
+            uint8  _areaTriggerIceCicle;
+            uint8  _areaTriggerSlaveOutroFargrost;
+            uint8  _areTriggerGeistAmbusher;
         };
 
         InstanceScript* GetInstanceScript(InstanceMap* map) const
diff --git a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.cpp b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.cpp
index b6c821e..4da3d67 100644
--- a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.cpp
+++ b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.cpp
@@ -35,6 +35,97 @@ enum eEvents
     EVENT_TACTICAL_BLINK        = 2,
 };
 
+const Position spawnPoints1[4] =
+{
+    {877.666199f, 61.523361f, 527.974243f, 3.624145f},
+    {885.715027f, 65.515602f, 533.431030f, 3.857180f},
+    {912.531189f, 63.785076f, 547.925720f, 3.235373f},
+    {909.602722f, 83.248398f, 551.600403f, 3.251082f},
+};
+const Position spawnPoints2[4] =
+{
+    {879.286743f, 41.535030f, 521.009338f, 3.486701f},
+    {889.974548f, 45.270569f, 527.154236f, 3.612364f},
+    {919.853027f, 88.957771f, 558.705993f, 3.592729f},
+    {921.595520f, 69.234627f, 557.946716f, 3.145053f},
+};
+const Position spawnPointsYmirjar[2] =
+{
+    {883.150024f, 54.626401f, 528.262024f, 3.678787f},
+    {915.107971f, 75.316299f, 553.531006f, 3.678787f},
+};
+const Position spawnPointsFallenWarrior[8] =
+{
+    {937.606506f, 0.776727f, 578.888000f, 1.090893f},
+    {928.419006f, 8.786335f, 577.693970f, 1.122307f},
+    {924.478699f, -7.662051f, 582.044983f, 1.489874f},
+    {935.244568f, -10.427516f, 583.265503f, 1.358702f},
+    {935.098694f, -24.272480f, 588.035400f, 1.653226f},
+    {921.272644f, -22.194103f, 585.452576f, 1.331212f},
+    {930.109009f, -56.889900f, 591.848999f, 2.353980f},
+    {924.945984f, -60.164799f, 591.879028f, 2.237270f},
+};
+
+const Position spawnPointsWrathboneColdwraith[4] =
+{
+    {925.477234f, -1.383301f, 580.479980f, 1.240126f},
+    {935.6500513f, -6.321967f, 582.133972f, 1.141952f},
+    {920.783020f, -44.854099f, 590.411987f, 1.590680f},
+    {933.810974f, -45.009399f, 591.658997f, 1.582540f},
+};
+
+const Position IceCiclespawnPointsFallenWarrior[8] =
+{
+    {997.252991f, -139.257004f, 615.875000f, 2.722710f},
+    {1000.400024f, -127.873001f, 616.247009f, 3.403390f},
+    {1049.770020f, -113.330002f, 629.814026f, 4.101520f},
+    {1042.160034f, -104.300003f, 630.038025f, 3.892080f},
+    {1062.150024f, -29.850700f, 633.879028f, 4.433140f},
+    {1073.599976f, -31.012199f, 633.408997f, 4.607670f},
+    {1069.910034f, 100.042000f, 631.062012f, 4.869470f},
+    {1059.170044f, 95.906303f, 630.781006f, 4.939280f},
+};
+
+const Position IceCiclespawnPointsWrathboneSkeleton[12] =
+{
+    {1033.609863f, -113.968132f, 627.523987f, 3.794239f},
+    {1043.910034f, -124.613998f, 627.747986f, 3.595380f},
+    {1068.930054f, -88.752602f, 632.828003f, 4.223700f},
+    {1050.0f, -69.646599f, 633.078979f, 4.363320f},
+    {1055.680054f, -52.713402f, 633.510986f, 4.607670f},
+    {1069.369995f, -52.008701f, 633.919983f, 4.520400f},
+    {1069.390015f, -12.805800f, 633.627014f, 4.537860f},
+    {1077.579956f, -14.718200f, 632.726013f, 4.450590f},
+    {1079.089966f, 34.306599f, 629.799988f, 4.607670f},
+    {1071.270020f, 38.016102f, 629.828979f, 4.956740f},
+    {1058.099976f, 92.909897f, 630.413025f, 5.074410f},
+    {1070.369995f, 96.143799f, 631.075012f, 4.910200f},
+};
+
+const Position IceCiclespawnPointsWrathboneSorcerer[2] =
+{
+    {1073.608643f, 49.570923f, 630.635559f, 4.996680f},
+    {1067.034912f, 47.677979f, 630.472473f, 4.851380f},
+};
+
+static const Position MoveLocations2[9] =
+{
+    {1025.534790f, 129.039612f, 628.156189f, 0.000000f},
+    {1035.394897f, 144.298599f, 628.156189f, 0.000000f},
+    {1042.624390f, 156.986679f, 628.156189f, 0.000000f},
+    {1037.534790f, 132.039612f, 628.156189f, 0.000000f},
+    {1050.534790f, 140.039612f, 628.156189f, 0.000000f},
+    {1043.534790f, 141.039612f, 628.156189f, 0.000000f},
+    {1038.534790f, 130.039612f, 628.156189f, 0.000000f},
+    {1029.534790f, 125.039612f, 628.156189f, 0.000000f},
+    {1028.534790f, 158.039612f, 628.156189f, 0.000000f},
+};
+
+static const Position triggerPos1 = {1048.629150f, 110.203377f, 628.224060f, 2.118303f};
+static const Position triggerPos2 = {1063.679932f, 119.296852f, 628.156189f, 2.251821f};
+static const Position sindraPos = {986.353271f, 174.938004f, 670.492798f, 0.000000f};
+static const Position leaderPosOutro2 = {988.998962f, 172.250290f, 628.156128f, 0.000000f};
+
 class mob_ymirjar_flamebearer : public CreatureScript
 {
     public:
@@ -149,93 +240,1069 @@ class mob_iceborn_protodrake : public CreatureScript
         }
 };
 
-class mob_geist_ambusher : public CreatureScript
+class spell_trash_mob_glacial_strike : public SpellScriptLoader
 {
     public:
-        mob_geist_ambusher() : CreatureScript("mob_geist_ambusher") { }
+        spell_trash_mob_glacial_strike() : SpellScriptLoader("spell_trash_mob_glacial_strike") { }
 
-        struct mob_geist_ambusherAI: public ScriptedAI
+        class spell_trash_mob_glacial_strike_AuraScript : public AuraScript
         {
-            mob_geist_ambusherAI(Creature* creature) : ScriptedAI(creature)
+            PrepareAuraScript(spell_trash_mob_glacial_strike_AuraScript);
+
+            void PeriodicTick(AuraEffect const* /*aurEff*/)
             {
+                if (GetTarget()->IsFullHealth())
+                {
+                    GetTarget()->RemoveAura(GetId(), 0, 0, AURA_REMOVE_BY_ENEMY_SPELL);
+                    PreventDefaultAction();
+                }
             }
 
-            void Reset()
+            void Register()
             {
-                _leapingFaceMaulCooldown = 9000;
+                OnEffectPeriodic += AuraEffectPeriodicFn(spell_trash_mob_glacial_strike_AuraScript::PeriodicTick, EFFECT_2, SPELL_AURA_PERIODIC_DAMAGE_PERCENT);
             }
+        };
 
-            void EnterCombat(Unit* who)
-            {
-                if (who->GetTypeId() != TYPEID_PLAYER)
-                    return;
+        AuraScript* GetAuraScript() const
+        {
+            return new spell_trash_mob_glacial_strike_AuraScript();
+        }
+};
 
-                // the max range is determined by aggro range
-                if (me->GetDistance(who) > 5.0f)
-                    DoCast(who, SPELL_LEAPING_FACE_MAUL);
-            }
+/*
+Script Complete: 100%
+Name: Start Pit Of Saron
+Author: Cemak
+*/
+enum SAYTyrranusEvent
+{
+    SAY_TYRRANUS_1                 = -1658074,
+    SAY_TYRRANUS_2                 = -1658075,
+    SAY_TYRRANUS_3                 = -1658078,
+    SAY_TYRRANUS_4                 = -1658082,
 
-            void UpdateAI(const uint32 diff)
-            {
-                if (!UpdateVictim())
-                    return;
+    SAY_SYLVANAS_1                 = -1658076,
+    SAY_SYLVANAS_2                 = -1658080,
+    SAY_SYLVANAS_3                 = -1658085,
+    SAY_SYLVANAS_4                 = -1658087,
+
+    SAY_JAINA_1                    = -1658077,
+    SAY_JAINA_2                    = -1658081,
+    SAY_JAINA_3                    = -1658084,
+    SAY_JAINA_4                    = -1658086,
+
+    SAY_SOUND                      = 16750,
+};
+
+enum SPELLSTyrranusEvent
+{
+    SPELL_NECROMANTIC_POWER         = 69347,
+    SPELL_DEATH_ARMY_VISUAL         = 67693,
+    SPELL_BLIZZARD_JAINA            = 70132,
+    SPELL_ICE_LANCE_JAINA           = 70464,
+    SPELL_SHADOW_BOLT_SYLVANAS      = 70512,
+    SPELL_MULTI_SHOT_SYLVANAS       = 70513,
+};
+
+struct startPosition
+{
+    uint32 entry[2];
+    Position movePosition;
+} startPositions[] =
+{
+    { { NPC_CHAMPION_1_ALLIANCE, NPC_CHAMPION_1_HORDE }, { 446.739990f, 228.576996f, 528.830994f } },
+    { { NPC_CHAMPION_1_ALLIANCE, NPC_CHAMPION_1_HORDE }, { 449.187988f, 226.212006f, 528.830994f } },
+    { { NPC_CHAMPION_1_ALLIANCE, NPC_CHAMPION_1_HORDE }, { 447.351990f, 222.753998f, 528.830994f } },
+    { { NPC_CHAMPION_1_ALLIANCE, NPC_CHAMPION_1_HORDE }, { 442.691010f, 223.524994f, 528.830994f} },
+    { { NPC_CHAMPION_1_ALLIANCE, NPC_CHAMPION_1_HORDE }, { 442.967010f, 219.535004f, 528.830994f} },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_2_HORDE }, { 447.290009f, 213.916000f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_2_HORDE }, { 450.540985f, 212.276993f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_2_HORDE }, { 452.884003f, 209.141006f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_2_HORDE }, { 449.834991f, 206.682007f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_2_HORDE }, { 445.794006f, 206.057007f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_2_HORDE }, { 446.541992f, 209.985992f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_3_HORDE }, { 446.29299f, 195.046997f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_3_HORDE }, { 444.035004f, 197.669006f, 528.830994f } },
+    { { NPC_CHAMPION_2_ALLIANCE, NPC_CHAMPION_3_HORDE }, { 443.346008f, 192.343002f, 528.830994f } },
+
+    //{ { NPC_KORLAEN, NPC_KORALEN }, { 438.505005f, 211.539993f, 528.708008f } },
+    //{ { NPC_ELANDRA, NPC_KILARA }, { 438.946014f, 215.427002f, 528.708984f } },
+    //{ { NPC_JAINA_PART1, NPC_SYLVANAS_PART1 }, { 440.787994f, 213.759003f, 528.710022f } },
+
+    { { 0, 0 }, { 0.0f, 0.0f, 0.0f, 0.0f } }
+};
+
+class pos_intro : public CreatureScript
+{
+public:
+    pos_intro() : CreatureScript("pos_intro") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new pos_introAI(pCreature);
+    }
 
-                if (_leapingFaceMaulCooldown < diff)
+    struct pos_introAI : public ScriptedAI
+    {
+        pos_introAI(Creature *c) : ScriptedAI(c)
+        {
+            instance = c->GetInstanceScript();
+            Reset();
+        }
+
+        void Reset()
+        {
+            StartPhase = 0;
+            StartTimer = 5000;
+            me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+            me->SetReactState(REACT_PASSIVE);
+            event = true;
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if(instance->GetData(DATA_TYRANNUS_START) == IN_PROGRESS && event)
+            {
+                if (StartTimer <= diff)
                 {
-                    if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 5.0f, true))
-                        DoCast(target, SPELL_LEAPING_FACE_MAUL);
-                    _leapingFaceMaulCooldown = urand(9000, 14000);
-                }
-                else
-                    _leapingFaceMaulCooldown -= diff;
+                    switch (StartPhase)
+                    {
+                        case 0:
+                            if (Creature* sTyrannus = me->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                            {
+                                sTyrannus->SetCanFly(true);
+                                DoScriptText(SAY_TYRRANUS_1, sTyrannus);
 
-                DoMeleeAttackIfReady();
+                                int32 entryIndex;
+                               if (instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                                     entryIndex = 0;
+                                  else
+                                     entryIndex = 1;
+
+                               Position spawnPoint = {427.36f, 212.636f, 529.47f, 6.2564f};
+
+                              for (int8 i = 0; startPositions[i].entry[entryIndex] != 0; ++i)
+                              {
+                                 if (Creature* summon = me->SummonCreature(startPositions[i].entry[entryIndex], spawnPoint, TEMPSUMMON_DEAD_DESPAWN))
+                                  summon->GetMotionMaster()->MovePoint(0, startPositions[i].movePosition);
+                              }
+                            }
+                            ++StartPhase;
+                            StartTimer = 5000;
+                            break;
+                        case 1:
+                            if (Creature* sTyrannus = me->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                                DoScriptText(SAY_TYRRANUS_2, sTyrannus);
+                            ++StartPhase;
+                            StartTimer = 15000;
+                            break;
+                        case 2:
+                            if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                DoScriptText(SAY_SYLVANAS_1, me);
+                            else if(me->GetEntry() == NPC_JAINA_PART1)
+                                DoScriptText(SAY_JAINA_1, me);
+
+                            if (instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                            {
+                                GetCreatureListWithEntryInGrid(Champion1, me, NPC_CHAMPION_1_ALLIANCE, 250.0f);
+                                for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                                {
+                                    Creature *sChampions = *itr;
+                                    if (!sChampions)
+                                        continue;
+
+                                    if (sChampions->isAlive())
+                                        sChampions->GetMotionMaster()->MovePoint(0, 487.463989f, 246.891006f, 528.708984f);
+                                }
+
+                                GetCreatureListWithEntryInGrid(Champion2, me, NPC_CHAMPION_2_ALLIANCE, 250.0f);
+                                for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                                {
+                                    Creature *sChampions = *itr;
+                                    if (!sChampions)
+                                        continue;
+
+                                    if (sChampions->isAlive())
+                                       sChampions->GetMotionMaster()->MovePoint(0, 504.444000f, 211.061996f, 528.710022f);
+                                }
+                            }
+                            else
+                            {
+                                GetCreatureListWithEntryInGrid(Champion1, me, NPC_CHAMPION_1_HORDE, 250.0f);
+                                for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                                {
+                                    Creature *sChampions = *itr;
+                                    if (!sChampions)
+                                        continue;
+
+                                    if (sChampions->isAlive())
+                                        sChampions->GetMotionMaster()->MovePoint(0, 487.463989f, 246.891006f, 528.708984f);
+
+                                }
+
+                                GetCreatureListWithEntryInGrid(Champion2, me, NPC_CHAMPION_2_HORDE, 250.0f);
+                                for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                                {
+                                    Creature *sChampions = *itr;
+                                    if (!sChampions)
+                                        continue;
+
+                                    if (sChampions->isAlive())
+                                        sChampions->GetMotionMaster()->MovePoint(0, 504.444000f, 211.061996f, 528.710022f);
+                                }
+
+                                GetCreatureListWithEntryInGrid(Champion3, me, NPC_CHAMPION_3_HORDE, 250.0f);
+                                for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                                {
+                                    Creature *sChampions = *itr;
+                                    if (!sChampions)
+                                        continue;
+
+                                    if (sChampions->isAlive())
+                                       sChampions->GetMotionMaster()->MovePoint(0, 504.444000f, 211.061996f, 528.710022f);
+                                }
+                            }
+                            ++StartPhase;
+                            StartTimer = 1000;
+                            break;
+                        case 3:
+                            if (Creature* sTyrannus = me->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                                DoScriptText(SAY_TYRRANUS_3, sTyrannus);
+                            ++StartPhase;
+                            StartTimer = 2000;
+                            break;
+                        case 4:
+                            if (Creature* sTyrannus = me->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                                DoPlaySoundToSet(sTyrannus, SAY_SOUND);
+
+                            for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (sChampions->isAlive())
+                                {
+                                    sChampions->AttackStop();
+                                    sChampions->GetMotionMaster()->MoveFall();
+                                }
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (sChampions->isAlive())
+                                {
+                                    sChampions->AttackStop();
+                                    sChampions->GetMotionMaster()->MoveFall();
+                                }
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (sChampions->isAlive())
+                                {
+                                    sChampions->AttackStop();
+                                    sChampions->GetMotionMaster()->MoveFall();
+                                }
+                            }
+                            ++StartPhase;
+                            StartTimer = 5000;
+                            break;
+                        case 5:
+                            if (Creature* sTyrannus = me->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                                sTyrannus->CastSpell(sTyrannus, SPELL_NECROMANTIC_POWER, false);
+
+                            for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (sChampions->isAlive())
+                                    sChampions->Kill(sChampions, false);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (sChampions->isAlive())
+                                    sChampions->Kill(sChampions, false);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (sChampions->isAlive())
+                                    sChampions->Kill(sChampions, false);
+                            }
+
+                            if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                DoScriptText(SAY_SYLVANAS_2, me);
+                            else if(me->GetEntry() == NPC_JAINA_PART1)
+                                DoScriptText(SAY_JAINA_2, me);
+                            ++StartPhase;
+                            StartTimer = 5000;
+                            break;
+                        case 6:
+                            for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                sChampions->Respawn();
+                                sChampions->CastSpell(sChampions, SPELL_DEATH_ARMY_VISUAL, true);
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    sChampions->UpdateEntry(36796, ALLIANCE);
+                                else
+                                    sChampions->UpdateEntry(36796, HORDE);
+                                sChampions->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                                sChampions->SetReactState(REACT_PASSIVE);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                sChampions->Respawn();
+                                sChampions->CastSpell(sChampions, SPELL_DEATH_ARMY_VISUAL, true);
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    sChampions->UpdateEntry(36796, ALLIANCE);
+                                else
+                                    sChampions->UpdateEntry(36796, HORDE);
+                                sChampions->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                                sChampions->SetReactState(REACT_PASSIVE);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                sChampions->Respawn();
+                                sChampions->CastSpell(sChampions, SPELL_DEATH_ARMY_VISUAL, true);
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    sChampions->UpdateEntry(36796, ALLIANCE);
+                                else
+                                    sChampions->UpdateEntry(36796, HORDE);
+                                sChampions->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
+                                sChampions->SetReactState(REACT_PASSIVE);
+                            }
+
+                            if (Creature* sTyrannus = me->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                                DoScriptText(SAY_TYRRANUS_4, sTyrannus);
+
+                            for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (Creature* pHelper = me->FindNearestCreature(NPC_KORALEN, 250.0f, true))
+                                {
+                                    sChampions->Attack(pHelper, true);
+                                    sChampions->GetMotionMaster()->MoveChase(pHelper);
+                                }
+                                else if (Creature* pHelper = me->FindNearestCreature(NPC_KORLAEN, 250.0f, true))
+                                {
+                                    sChampions->Attack(pHelper, true);
+                                    sChampions->GetMotionMaster()->MoveChase(pHelper);
+                                }
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (Creature* pHelper = me->FindNearestCreature(NPC_KORALEN, 250.0f, true))
+                                {
+                                    sChampions->Attack(pHelper, true);
+                                    sChampions->GetMotionMaster()->MoveChase(pHelper);
+                                }
+                                else if (Creature* pHelper = me->FindNearestCreature(NPC_KORLAEN, 250.0f, true))
+                                {
+                                    sChampions->Attack(pHelper, true);
+                                    sChampions->GetMotionMaster()->MoveChase(pHelper);
+                                }
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if (Creature* pHelper = me->FindNearestCreature(NPC_KORALEN, 250.0f, true))
+                                {
+                                    sChampions->Attack(pHelper, true);
+                                    sChampions->GetMotionMaster()->MoveChase(pHelper);
+                                }
+                                else if (Creature* pHelper = me->FindNearestCreature(NPC_KORLAEN, 250.0f, true))
+                                {
+                                    sChampions->Attack(pHelper, true);
+                                    sChampions->GetMotionMaster()->MoveChase(pHelper);
+                                }
+                            }
+                            ++StartPhase;
+                            StartTimer = 3000;
+                            break;
+                        case 7:
+                            for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    me->CastSpell(sChampions, SPELL_MULTI_SHOT_SYLVANAS, true);
+                                else
+                                    me->CastSpell(sChampions, SPELL_BLIZZARD_JAINA, true);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    me->CastSpell(sChampions, SPELL_MULTI_SHOT_SYLVANAS, true);
+                                else
+                                    me->CastSpell(sChampions, SPELL_BLIZZARD_JAINA, true);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    me->CastSpell(sChampions, SPELL_MULTI_SHOT_SYLVANAS, true);
+                                else
+                                    me->CastSpell(sChampions, SPELL_BLIZZARD_JAINA, true);
+                            }
+                            ++StartPhase;
+                            StartTimer = 500;
+                            break;
+                        case 8:
+                            for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    me->CastSpell(sChampions, SPELL_SHADOW_BOLT_SYLVANAS, true);
+                                else
+                                    me->CastSpell(sChampions, SPELL_ICE_LANCE_JAINA, true);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    me->CastSpell(sChampions, SPELL_SHADOW_BOLT_SYLVANAS, true);
+                                else
+                                    me->CastSpell(sChampions, SPELL_ICE_LANCE_JAINA, true);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                if(me->GetEntry() == NPC_SYLVANAS_PART1)
+                                    me->CastSpell(sChampions, SPELL_SHADOW_BOLT_SYLVANAS, true);
+                                else
+                                    me->CastSpell(sChampions, SPELL_ICE_LANCE_JAINA, true);
+                            }
+                            ++StartPhase;
+                            StartTimer = 500;
+                            break;
+                        case 9:
+                            for(std::list<Creature*>::iterator itr = Champion1.begin(); itr != Champion1.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+                                me->Kill(sChampions, false);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion2.begin(); itr != Champion2.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                me->Kill(sChampions, false);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champion3.begin(); itr != Champion3.end(); ++itr)
+                            {
+                                Creature *sChampions = *itr;
+                                if (!sChampions)
+                                    continue;
+
+                                me->Kill(sChampions, false);
+                            }
+                            ++StartPhase;
+                            StartTimer = 3000;
+                            break;
+                        case 10:
+                            if(me->GetEntry() == NPC_JAINA_PART1)
+                                DoScriptText(SAY_JAINA_3, me);
+                            else
+                                DoScriptText(SAY_SYLVANAS_3, me);
+                            ++StartPhase;
+                            StartTimer = 10000;
+                            break;
+                        case 11:
+                            if(me->GetEntry() == NPC_JAINA_PART1)
+                            DoScriptText(SAY_JAINA_4, me);
+                            else
+                                DoScriptText(SAY_SYLVANAS_4, me);
+                            ++StartPhase;
+                            StartTimer = 10000;
+                            break;
+                        case 12:
+                            if (Creature* sTyrannus = me->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                                sTyrannus->GetMotionMaster()->MovePoint(0, 938.125f, 93.928f, 585.39f);
+                            instance->SetData(DATA_TYRANNUS_START, DONE);
+                            event = false;
+                            ++StartPhase;
+                            StartTimer = 10000;
+                            break;
+                        return;
+                    }
+                } else StartTimer -= diff;
             }
+        }
 
-        private:
-            uint32 _leapingFaceMaulCooldown;
-        };
+    private:
+        InstanceScript* instance;
+        std::list<Creature*> Champion1;
+        std::list<Creature*> Champion2;
+        std::list<Creature*> Champion3;
+        uint32 StartTimer;
+        uint8 StartPhase;
+        bool event;
+    };
+};
 
-        CreatureAI* GetAI(Creature* creature) const
+class at_pos_intro : public AreaTriggerScript
+{
+    public:
+        at_pos_intro() : AreaTriggerScript("at_pos_intro") { }
+
+        bool OnTrigger(Player* player, AreaTriggerEntry const* areaTrigger)
         {
-            return new mob_geist_ambusherAI(creature);
+         if (InstanceScript* instance = player->GetInstanceScript())
+         {
+            if(instance->GetData(DATA_TYRANNUS_START) == IN_PROGRESS || instance->GetData(DATA_TYRANNUS_START) == DONE || player->isGameMaster() || !instance)
+                return false;
+
+            instance->SetData(DATA_TYRANNUS_START, IN_PROGRESS);
+
+            return false;
+          }
+          return false;
         }
 };
 
-class spell_trash_mob_glacial_strike : public SpellScriptLoader
+enum sTyrannus
+{
+     SAY_TYRANNUS_AMBUSH_1                      = -1658050,
+     SAY_TYRANNUS_AMBUSH_2                      = -1658051,
+     SAY_GAUNTLET_START                         = -1658052,
+     SAY_RESCUED_HORDE_ALLIANCE                 = -1658071, // TODO: sound
+};
+
+class at_ymirjar_flamebearer_pos : public AreaTriggerScript
 {
     public:
-        spell_trash_mob_glacial_strike() : SpellScriptLoader("spell_trash_mob_glacial_strike") { }
+        at_ymirjar_flamebearer_pos() : AreaTriggerScript("at_ymirjar_flamebearer_pos") { }
 
-        class spell_trash_mob_glacial_strike_AuraScript : public AuraScript
+        bool OnTrigger(Player* player, AreaTriggerEntry const* areaTrigger)
         {
-            PrepareAuraScript(spell_trash_mob_glacial_strike_AuraScript);
+            InstanceScript* instance = player->GetInstanceScript();
+               if(instance->GetData(DATA_AREA_TRIGGER_YMIRJAR) == DONE || player->isGameMaster() || !instance)
+                      return false;
 
-            void PeriodicTick(AuraEffect const* /*aurEff*/)
+                if (instance->GetBossState(DATA_GARFROST) == DONE && instance->GetBossState(DATA_ICK) == DONE)
+                {
+                   instance->SetData(DATA_AREA_TRIGGER_YMIRJAR, DONE);
+                   if(Creature *pTyrannus = player->SummonCreature(NPC_TYRANNUS_EVENTS, 940.076355f, 91.047089f, 576.178040f, 3.596342f, TEMPSUMMON_DEAD_DESPAWN, 0))
+                   {
+                     DoScriptText(SAY_TYRANNUS_AMBUSH_1, pTyrannus);
+                     pTyrannus->SetSpeed(MOVE_FLIGHT, 8.5f, true);
+                     pTyrannus->GetMotionMaster()->MovePoint(0, 916.282104f, -71.079742f, 606.430359f);
+                   }
+                   for (uint8 i = 0; i < 4; i++)
+                   {
+                      player->SummonCreature(NPC_YMIRJAR_FLAMEBEARER, spawnPoints1[i], TEMPSUMMON_DEAD_DESPAWN, 0);
+                      player->SummonCreature(NPC_YMIRJAR_WRATBRINGER, spawnPoints2[i], TEMPSUMMON_DEAD_DESPAWN, 0);
+                   }
+                   for(uint8 k = 0; k < 2; k++)
+                   {
+                      player->SummonCreature(NPC_YMIRJAR_DEATHBRINGER, spawnPointsYmirjar[k], TEMPSUMMON_DEAD_DESPAWN, 0);
+                   }
+
+                   return false;
+                }
+                return false;
+        }
+};
+class at_fallen_warrior_pos : public AreaTriggerScript
+{
+    public:
+        at_fallen_warrior_pos() : AreaTriggerScript("at_fallen_warrior_pos") { }
+
+        bool OnTrigger(Player* player, AreaTriggerEntry const* areaTrigger)
+        {
+            InstanceScript* instance = player->GetInstanceScript();
+            if(instance->GetData(DATA_AREA_TRIGGER_FALLEN) == DONE || player->isGameMaster() || !instance)
+                      return false;
+
+                if (instance->GetData(DATA_AREA_TRIGGER_YMIRJAR) == DONE)
+                {
+                   instance->SetData(DATA_AREA_TRIGGER_FALLEN, DONE);
+                   if(Creature *pTyrannus = player->FindNearestCreature(NPC_TYRANNUS_EVENTS, 250.0f, true))
+                   {
+                     DoScriptText(SAY_TYRANNUS_AMBUSH_2, pTyrannus);
+                   }
+                   for (uint8 i = 0; i < 8; i++)
+                   {
+                      player->SummonCreature(NPC_FALLEN_WARRIOR, spawnPointsFallenWarrior[i], TEMPSUMMON_DEAD_DESPAWN, 0);
+                   }
+                   for (uint8 i = 0; i < 4; i++)
+                   {
+                      player->SummonCreature(NPC_WRATHBONE_COLDWRAITH, spawnPointsWrathboneColdwraith[i], TEMPSUMMON_DEAD_DESPAWN, 0);
+                   }
+                   return false;
+                }
+
+            return false;
+        }
+};
+class at_ice_cicle_pos : public AreaTriggerScript
+{
+    public:
+        at_ice_cicle_pos() : AreaTriggerScript("at_ice_cicle_pos") { }
+
+        bool OnTrigger(Player* player, AreaTriggerEntry const* areaTrigger)
+        {
+            InstanceScript* instance = player->GetInstanceScript();
+            if(instance->GetData(DATA_AREA_TRIGGER_ICE_CICLE) == IN_PROGRESS || instance->GetData(DATA_AREA_TRIGGER_ICE_CICLE) == DONE || player->isGameMaster() || !instance)
+                      return false;
+            if (instance->GetData(DATA_AREA_TRIGGER_FALLEN) == DONE && instance->GetData(DATA_AREA_TRIGGER_YMIRJAR) == DONE)
             {
-                if (GetTarget()->IsFullHealth())
+                instance->SetData(DATA_AREA_TRIGGER_ICE_CICLE, IN_PROGRESS);
+                if (Creature* pTyrannus = player->FindNearestCreature(NPC_TYRANNUS_EVENTS, 150.0f, true))
                 {
-                    GetTarget()->RemoveAura(GetId(), 0, 0, AURA_REMOVE_BY_ENEMY_SPELL);
-                    PreventDefaultAction();
+                    DoScriptText(SAY_GAUNTLET_START, pTyrannus);
+                    pTyrannus->DespawnOrUnsummon();
+                }
+                for (uint8 i = 0; i < 8; i++)
+                {
+                   player->SummonCreature(NPC_FALLEN_WARRIOR, IceCiclespawnPointsFallenWarrior[i], TEMPSUMMON_DEAD_DESPAWN, 0);
+                }
+                for (uint8 i = 0; i < 12; i++)
+                {
+                   player->SummonCreature(NPC_WRATHBONE_SKELETON, IceCiclespawnPointsWrathboneSkeleton[i], TEMPSUMMON_DEAD_DESPAWN, 0);
                 }
+                for (uint8 i = 0; i < 2; i++)
+                {
+                   player->SummonCreature(NPC_WRATHBONE_SORCERER, IceCiclespawnPointsWrathboneSorcerer[i], TEMPSUMMON_DEAD_DESPAWN, 0);
+                }
+                return false;
             }
+              return false;
+        }
+};
 
-            void Register()
-            {
-                OnEffectPeriodic += AuraEffectPeriodicFn(spell_trash_mob_glacial_strike_AuraScript::PeriodicTick, EFFECT_2, SPELL_AURA_PERIODIC_DAMAGE_PERCENT);
+class at_slave_rescued_pos : public AreaTriggerScript
+{
+    public:
+        at_slave_rescued_pos() : AreaTriggerScript("at_slave_rescued_pos") { }
+
+        bool OnTrigger(Player* player, AreaTriggerEntry const* areaTrigger)
+        {
+          InstanceScript* instance = player->GetInstanceScript();
+
+          if(instance->GetData(DATA_SLAVE_OUTRO_GARFROST) == DONE || player->isGameMaster() || !instance)
+               return false;
+
+           if(instance->GetData(DATA_SLAVE_OUTRO_GARFROST) == IN_PROGRESS)
+           {
+               instance->SetData(DATA_SLAVE_OUTRO_GARFROST, DONE);
+               if(Creature *rSlave = player->FindNearestCreature(36888, 50.0f, true))
+               {
+                     DoScriptText(SAY_RESCUED_HORDE_ALLIANCE, rSlave);
+                     rSlave->GetMotionMaster()->MovePoint(0, 831.654968f, 6.049870f, 509.910583f); // not correct
+               }
+               uint8 i = 0;
+               GetCreatureListWithEntryInGrid(Rescued1, player, 36889, 50.0f);
+                for(std::list<Creature*>::iterator itr = Rescued1.begin(); itr != Rescued1.end(); ++itr)
+                {
+                   Creature *rescued = *itr;
+                    if(!rescued)
+                     continue;
+
+                   if (rescued->isAlive())
+                      rescued->GetMotionMaster()->MovePoint(0, 840.661987f, 5.974489f, 510.107910f);
+                      ++i;
+               }
+               return false;
             }
-        };
 
-        AuraScript* GetAuraScript() const
+          return false;
+        }
+
+        private:
+        std::list<Creature*> Rescued1;
+};
+
+class at_geist_ambusher_pos : public AreaTriggerScript
+{
+    public:
+        at_geist_ambusher_pos() : AreaTriggerScript("at_geist_ambusher_pos") { }
+
+        bool OnTrigger(Player* player, AreaTriggerEntry const* areaTrigger)
         {
-            return new spell_trash_mob_glacial_strike_AuraScript();
+          InstanceScript* instance = player->GetInstanceScript();
+
+          if(player->isGameMaster() || !instance)
+               return false;
+
+           if(instance->GetData(DATA_SLAVE_OUTRO_GARFROST) == DONE)
+           {
+               uint8 i = 0;
+               GetCreatureListWithEntryInGrid(Geist, player, 36886, 300.0f);
+                for(std::list<Creature*>::iterator itr = Geist.begin(); itr != Geist.end(); ++itr)
+                {
+                   Creature *geist = *itr;
+                    if(!geist)
+                     continue;
+
+                   if (geist->isAlive())  //TODO sound.
+                      geist->GetMotionMaster()->MoveJump(835.122620f, 1.335451f, 509.846619f, 30.0f, 20.0f);
+                      ++i;
+               }
+               return true;
+            }
+
+          return false;
         }
+
+        private:
+        std::list<Creature*> Geist;
 };
 
+enum SAYPosOutro
+{
+    SAY_GORKUN_OUTRO_1              = -1658064,
+    SAY_GORKUN_OUTRO_2              = -1658065,
+    SAY_JAYNA_OUTRO_3               = -1658066,
+    SAY_SYLVANAS_OUTRO_3            = -1658067,
+    SAY_JAYNA_OUTRO_4               = -1658068,
+    SAY_SYLVANAS_OUTRO_4            = -1658069,
+    SAY_JAYNA_OUTRO_5               = -1658070,
+};
+
+class pos_outro : public CreatureScript
+{
+public:
+    pos_outro() : CreatureScript("pos_outro") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        return new pos_outroAI(pCreature);
+    }
+
+    struct pos_outroAI : public ScriptedAI
+    {
+        pos_outroAI(Creature *pCreature) : ScriptedAI(pCreature)
+        {
+            instance = pCreature->GetInstanceScript();
+            Reset();
+        }
+
+        void Reset()
+        {
+            uiIntroTimer1 = 0;
+            uiIntroPhase1 = 0;
+            me->SetVisible(false);
+            Champions1.clear();
+            Champions2.clear();
+            Champions3.clear();
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if(instance->GetBossState(DATA_TYRANNUS) == DONE)
+            {
+                if (uiIntroTimer1 <= diff)
+                {
+                    switch (uiIntroPhase1)
+                    {
+                        case 0:
+                            if (Creature* GorkunOrVictus = me->GetCreature(*me, instance->GetData64(DATA_VICTUS_OR_GORKUN_FREED)))
+                                GorkunOrVictus->GetMotionMaster()->MovePoint(0, leaderPosOutro2);
+
+                            if (instance->GetData(DATA_TEAM_IN_INSTANCE) == ALLIANCE)
+                            {
+                                uint8 i = 0;
+                                GetCreatureListWithEntryInGrid(Champions1, me, NPC_FREED_SLAVE_3_ALLIANCE, 100.0f);
+                                for(std::list<Creature*>::iterator itr = Champions1.begin(); itr != Champions1.end(); ++itr)
+                                {
+                                    Creature *slave = *itr;
+                                    if(!slave)
+                                        continue;
+
+                                    if (slave->isAlive())
+                                        slave->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                    ++i;
+                                }
+
+                                i = 4;
+                                GetCreatureListWithEntryInGrid(Champions2, me, NPC_FREED_SLAVE_1_ALLIANCE, 100.0f);
+                                for(std::list<Creature*>::iterator itr = Champions2.begin(); itr != Champions2.end(); ++itr)
+                                {
+                                    Creature *slave = *itr;
+                                    if(!slave)
+                                        continue;
+
+                                    if (slave->isAlive())
+                                        slave->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                    ++i;
+                                }
+
+                                i = 7;
+                                GetCreatureListWithEntryInGrid(Champions3, me, NPC_FREED_SLAVE_2_ALLIANCE, 100.0f);
+                                for(std::list<Creature*>::iterator itr = Champions3.begin(); itr != Champions3.end(); ++itr)
+                                {
+                                    Creature *slave = *itr;
+                                    if(!slave)
+                                        continue;
+
+                                    if (slave->isAlive())
+                                        slave->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                    ++i;
+                                }
+                            }
+                            else
+                            {
+                                uint8 i = 0;
+                                GetCreatureListWithEntryInGrid(Champions1, me, NPC_FREED_SLAVE_3_HORDE, 100.0f);
+                                for(std::list<Creature*>::iterator itr = Champions1.begin(); itr != Champions1.end(); ++itr)
+                                {
+                                    Creature *slave = *itr;
+                                    if(!slave)
+                                        continue;
+
+                                    if (slave->isAlive())
+                                        slave->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                    ++i;
+                                }
+
+                                i = 4;
+                                GetCreatureListWithEntryInGrid(Champions2, me, NPC_FREED_SLAVE_1_HORDE, 100.0f);
+                                for(std::list<Creature*>::iterator itr = Champions2.begin(); itr != Champions2.end(); ++itr)
+                                {
+                                    Creature *slave = *itr;
+                                    if(!slave)
+                                        continue;
+
+                                    if (slave->isAlive())
+                                        slave->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                    ++i;
+                                }
+
+                                i = 7;
+                                GetCreatureListWithEntryInGrid(Champions3, me, NPC_FREED_SLAVE_2_HORDE, 100.0f);
+                                for(std::list<Creature*>::iterator itr = Champions3.begin(); itr != Champions3.end(); ++itr)
+                                {
+                                    Creature *slave = *itr;
+                                    if(!slave)
+                                        continue;
+
+                                    if (slave->isAlive())
+                                        slave->GetMotionMaster()->MovePoint(0, MoveLocations2[i]);
+                                    ++i;
+                                }
+                            }
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 15000;
+                            break;
+                        case 1:
+                            if (Creature* GorkunOrVictus = me->GetCreature(*me, instance->GetData64(DATA_VICTUS_OR_GORKUN_FREED)))
+                                DoScriptText(SAY_GORKUN_OUTRO_1, GorkunOrVictus);
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 15000;
+                            break;
+                        case 2:
+                            if (Creature* GorkunOrVictus = me->GetCreature(*me, instance->GetData64(DATA_VICTUS_OR_GORKUN_FREED)))
+                                DoScriptText(SAY_GORKUN_OUTRO_2, GorkunOrVictus);
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 5000;
+                            break;
+                        case 3:
+                            me->SetVisible(true);
+                            if(Creature* pSindragosa = me->SummonCreature(NPC_SINDRAGOSA, sindraPos, TEMPSUMMON_CORPSE_DESPAWN, 3000))
+                                pSindragosa->SetCanFly(true);
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 5000;
+                            break;
+                        case 4:
+                            if (Creature* portal = me->SummonCreature(22517, triggerPos1, TEMPSUMMON_TIMED_DESPAWN, 30000))
+                            {
+                                portal->CastSpell(portal, 51807, false);
+                                portal->SetDisplayId(17612);
+                            }
+                            if (Creature* portal = me->SummonCreature(22517, triggerPos2, TEMPSUMMON_TIMED_DESPAWN, 30000))
+                            {
+                                portal->CastSpell(portal, 51807, false);
+                                portal->SetDisplayId(17612);
+                            }
+                            if(me->GetEntry() == NPC_SYLVANAS_PART2)
+                                DoScriptText(SAY_SYLVANAS_OUTRO_3, me);
+                            else
+                                DoScriptText(SAY_JAYNA_OUTRO_3, me);
+
+                            if(instance)
+                            {
+                                Map* pMap = me->GetMap();
+                                if(!pMap)
+                                    return;
+
+                                Map::PlayerList const &lPlayers = pMap->GetPlayers();
+                                for(Map::PlayerList::const_iterator itr = lPlayers.begin(); itr != lPlayers.end(); ++itr)
+                                {
+                                    if(!itr->getSource()->isAlive())
+                                        continue;
+                                    me->CastSpell(itr->getSource(), 36937, true);
+                                    itr->getSource()->NearTeleportTo(1065.114746f, 96.392105f, 630.999573f, 2.063386f);
+                                }
+                            }
+                            if (Creature* GorkunOrVictus = me->GetCreature(*me, instance->GetData64(DATA_VICTUS_OR_GORKUN_FREED)))
+                                if (Creature* pSindragosa = me->GetCreature(*me, instance->GetData64(DATA_SINDRAGOSA)))
+                                    pSindragosa->CastSpell(GorkunOrVictus, 70521, true);
+
+                            if (Creature* GorkunOrVictus = me->GetCreature(*me, instance->GetData64(DATA_VICTUS_OR_GORKUN_FREED)))
+                                if (GorkunOrVictus->isAlive() && GorkunOrVictus->IsInWorld())
+                                    me->Kill(GorkunOrVictus, false);
+
+                            for(std::list<Creature*>::iterator itr = Champions1.begin(); itr != Champions1.end(); ++itr)
+                            {
+                                Creature *slave = *itr;
+                                if(!slave)
+                                    continue;
+
+                                if (slave->isAlive() && slave->IsInWorld())
+                                    slave->Kill(slave, false);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champions2.begin(); itr != Champions2.end(); ++itr)
+                            {
+                                Creature *slave = *itr;
+                                if(!slave)
+                                    continue;
+
+                                if (slave->isAlive() && slave->IsInWorld())
+                                    slave->Kill(slave, false);
+                            }
+
+                            for(std::list<Creature*>::iterator itr = Champions3.begin(); itr != Champions3.end(); ++itr)
+                            {
+                                Creature *slave = *itr;
+                                if(!slave)
+                                    continue;
+
+                                if (slave->isAlive() && slave->IsInWorld())
+                                    slave->Kill(slave, false);
+                            }
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 5000;
+                            break;
+                        case 5:
+                            if (Creature* pSindragosa = me->GetCreature(*me, instance->GetData64(DATA_SINDRAGOSA)))
+                                pSindragosa->GetMotionMaster()->MoveCharge(804.957214f, 102.497406f, 728.966370f, 42.00f, 0);
+
+                            if(me->GetEntry() == NPC_SYLVANAS_PART2)
+                                DoScriptText(SAY_SYLVANAS_OUTRO_4, me);
+                            else
+                                DoScriptText(SAY_JAYNA_OUTRO_4, me);
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 7000;
+                            break;
+                        case 6:
+                            if(me->GetEntry() == NPC_JAINA_PART2)
+                                DoScriptText(SAY_JAYNA_OUTRO_5, me);
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 7000;
+                            break;
+                        case 7:
+                            if (Creature* jainaOrSylvanas = me->GetCreature(*me, instance->GetData64(DATA_JAINA_SYLVANAS_2)))
+                                jainaOrSylvanas->GetMotionMaster()->MovePoint(0, 1100.734497f, 246.650696f, 628.182190f);
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 20000;
+                            break;
+                        case 8:
+                            instance->HandleGameObject(instance->GetData64(GO_HALLS_OF_REFLECT_PORT), true);
+                            ++uiIntroPhase1;
+                            uiIntroTimer1 = 25000;
+                            break;
+                    return;
+                    }
+                } else uiIntroTimer1 -= diff;
+            }
+        }
+
+    private:
+        InstanceScript* instance;
+        uint32 uiIntroTimer1;
+        uint8 uiIntroPhase1;
+        std::list<Creature*> Champions1;
+        std::list<Creature*> Champions2;
+        std::list<Creature*> Champions3;
+    };
+};
 void AddSC_pit_of_saron()
 {
     new mob_ymirjar_flamebearer();
     new mob_iceborn_protodrake();
-    new mob_geist_ambusher();
     new spell_trash_mob_glacial_strike();
-}
+    new pos_intro();
+    new at_pos_intro();
+    new at_ymirjar_flamebearer_pos();
+    new at_fallen_warrior_pos();
+    new at_ice_cicle_pos();
+    new at_slave_rescued_pos();
+    new at_geist_ambusher_pos();
+    new pos_outro();
+}
\ No newline at end of file
diff --git a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.h b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.h
index 728e0cc..710ca70 100644
--- a/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.h
+++ b/src/server/scripts/Northrend/FrozenHalls/PitOfSaron/pit_of_saron.h
@@ -35,6 +35,14 @@ enum DataTypes
     DATA_JAINA_SYLVANAS_2   = 6,    // GUID of either Jaina or Sylvanas part 2, depending on team, as it's the same spawn.
     DATA_TYRANNUS_EVENT     = 7,
     DATA_TEAM_IN_INSTANCE   = 8,
+    DATA_TYRANNUS_START     = 9,
+    DATA_AREA_TRIGGER_YMIRJAR = 10,
+    DATA_AREA_TRIGGER_FALLEN = 11,
+    DATA_AREA_TRIGGER_ICE_CICLE = 12,
+    DATA_VICTUS_OR_GORKUN_FREED = 13,
+    DATA_SLAVE_OUTRO_GARFROST   = 14,
+    DATA_GEIST_AMBUSHER         = 15,
+    DATA_SINDRAGOSA             = 16,
 };
 
 enum CreatureIds
@@ -80,16 +88,26 @@ enum CreatureIds
     NPC_MARTIN_VICTUS_2                         = 37580,
     NPC_GORKUN_IRONSKULL_1                      = 37581,
     NPC_GORKUN_IRONSKULL_2                      = 37592,
+    NPC_YMIRJAR_DEATHBRINGER                    = 36892,
+    NPC_YMIRJAR_FLAMEBEARER                     = 36893,
+    NPC_YMIRJAR_WRATBRINGER                     = 36840,
+    NPC_FALLEN_WARRIOR                          = 36841,
+    NPC_WRATHBONE_COLDWRAITH                    = 36842,
+    NPC_WRATHBONE_REAVER                        = 37729,
+    NPC_WRATHBONE_SORCERER                      = 37728,
+    NPC_WRATHBONE_SKELETON                      = 36877,
+    NPC_SINDRAGOSA                              = 37755,
 
     NPC_FORGEMASTER_STALKER                     = 36495,
     NPC_EXPLODING_ORB                           = 36610,
-    NPC_YMIRJAR_DEATHBRINGER                    = 36892,
     NPC_ICY_BLAST                               = 36731
 };
 
 enum GameObjectIds
 {
     GO_SARONITE_ROCK                            = 196485,
+    GO_ICE_WALL                                 = 201885,
+    GO_HALLS_OF_REFLECT_PORT                    = 201848, // unlocked by jaina/sylvanas at last outro
 };
 
 #endif
-- 
1.7.8.msysgit.0

