From ea673e86fae288c1266939dc891b88e85258caeb Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Thu, 15 Dec 2011 23:42:19 -0500
Subject: [PATCH 11/91] 2.1.2 TrialOfTheCrusader: Mejorada AI de los compeones

---
 .../TrialOfTheCrusader/boss_faction_champions.cpp  |  159 ++++++++++++++------
 1 files changed, 110 insertions(+), 49 deletions(-)

diff --git a/src/server/scripts/Northrend/CrusadersColiseum/TrialOfTheCrusader/boss_faction_champions.cpp b/src/server/scripts/Northrend/CrusadersColiseum/TrialOfTheCrusader/boss_faction_champions.cpp
index 79bbb47..02709a7 100755
--- a/src/server/scripts/Northrend/CrusadersColiseum/TrialOfTheCrusader/boss_faction_champions.cpp
+++ b/src/server/scripts/Northrend/CrusadersColiseum/TrialOfTheCrusader/boss_faction_champions.cpp
@@ -23,6 +23,10 @@ SDComment: Scripts by Selector, modified by /dev/rsa
 SDCategory: Crusader Coliseum
 EndScriptData */
 
+// The Healer Champions will now check for a friendly unit (Fellow NPC) within the max range of the spell they are casting
+// If there is no LOW HP friendly within that range the spell will be cast on themselves
+// Fixed a few of the damage dealer champions casting on themselves
+
 // Known bugs:
 // All - untested
 // Pets aren't being summoned by their masters
@@ -522,16 +526,28 @@ public:
                 switch (urand(0, 4))
                 {
                     case 0:
-                        DoCast(me, SPELL_LIFEBLOOM);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_LIFEBLOOM);
+                        else
+                            DoCast(me, SPELL_LIFEBLOOM);
                         break;
                     case 1:
-                        DoCast(me, SPELL_NOURISH);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_NOURISH);
+                        else
+                            DoCast(me, SPELL_NOURISH);
                         break;
                     case 2:
-                        DoCast(me, SPELL_REGROWTH);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_REGROWTH);
+                        else
+                            DoCast(me, SPELL_REGROWTH);
                         break;
                     case 3:
-                        DoCast(me, SPELL_REJUVENATION);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_REJUVENATION);
+                        else
+                            DoCast(me, SPELL_REJUVENATION);
                         break;
                     case 4:
                         if (Creature* target = SelectRandomFriendlyMissingBuff(SPELL_THORNS))
@@ -618,13 +634,20 @@ public:
                 switch (urand(0, 5))
                 {
                     case 0: case 1:
-                        DoCast(me, SPELL_HEALING_WAVE);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_HEALING_WAVE);
+                        else
+                            DoCast(me, SPELL_HEALING_WAVE);
                         break;
                     case 2:
-                        DoCast(me, SPELL_RIPTIDE);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_RIPTIDE);
+                        else
+                            DoCast(me, SPELL_RIPTIDE);
                         break;
                     case 3:
-                        DoCast(me, SPELL_EARTH_SHOCK);
+                        if (Unit* target = SelectEnemyCaster(false))
+                            DoCast(target, SPELL_EARTH_SHOCK);
                         break;
                     case 4:
                         DoCast(me, SPELL_SPIRIT_CLEANSE);
@@ -711,7 +734,7 @@ public:
 
             if (m_uiHolyShockTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_HOLY_SHOCK);
                 m_uiHolyShockTimer = urand(6*IN_MILLISECONDS, 15*IN_MILLISECONDS);
             } else m_uiHolyShockTimer -= uiDiff;
@@ -725,7 +748,7 @@ public:
 
             if (m_uiHammerOfJusticeTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_HAMMER_OF_JUSTICE);
                 m_uiHammerOfJusticeTimer = urand(5*IN_MILLISECONDS, 15*IN_MILLISECONDS);
             } else m_uiHammerOfJusticeTimer -= uiDiff;
@@ -735,10 +758,16 @@ public:
                 switch (urand(0, 4))
                 {
                     case 0: case 1:
-                        DoCast(me, SPELL_FLASH_OF_LIGHT);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_FLASH_OF_LIGHT);
+                        else
+                            DoCast(me, SPELL_FLASH_OF_LIGHT);
                         break;
                     case 2: case 3:
-                        DoCast(me, SPELL_HOLY_LIGHT);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_HOLY_LIGHT);
+                        else
+                            DoCast(me, SPELL_HOLY_LIGHT);
                         break;
                     case 4:
                         DoCast(me, SPELL_CLEANSE);
@@ -761,6 +790,7 @@ enum ePriestSpells
     SPELL_DISPEL            = 65546,
     SPELL_PSYCHIC_SCREAM    = 65543,
     SPELL_MANA_BURN         = 66100,
+    SPELL_PENANCE           = 66098,
 };
 
 class mob_toc_priest : public CreatureScript
@@ -802,24 +832,41 @@ public:
 
             if (m_uiCommonTimer <= uiDiff)
             {
-                switch (urand(0, 5))
+                switch (urand(0, 6))
                 {
                     case 0:
-                        DoCast(me, SPELL_RENEW);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_RENEW);
+                        else
+                            DoCast(me, SPELL_RENEW);
                         break;
                     case 1:
-                        DoCast(me, SPELL_SHIELD);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_SHIELD);
+                        else
+                            DoCast(me, SPELL_SHIELD);
                         break;
                     case 2: case 3:
-                        DoCast(me, SPELL_FLASH_HEAL);
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_FLASH_HEAL);
+                        else
+                            DoCast(me, SPELL_FLASH_HEAL);
                         break;
                     case 4:
                         if (Unit* target = urand(0, 1) ? SelectTarget(SELECT_TARGET_RANDOM, 0) : DoSelectLowestHpFriendly(40.0f))
                             DoCast(target, SPELL_DISPEL);
+                        else
+                            DoCast(me, SPELL_DISPEL);
                         break;
                     case 5:
-                        DoCast(me, SPELL_MANA_BURN);
+                        if (Unit* target = SelectEnemyCaster(false))
+                            DoCast(target, SPELL_MANA_BURN);
                         break;
+                    case 6:
+                        if (Unit* target = DoSelectLowestHpFriendly(40.0f))
+                            DoCast(target, SPELL_PENANCE);
+                        else
+                            DoCast(me, SPELL_PENANCE);
                 }
                 m_uiCommonTimer = urand(15*IN_MILLISECONDS, 30*IN_MILLISECONDS);
             } else m_uiCommonTimer -= uiDiff;
@@ -910,7 +957,7 @@ public:
 
             if (m_uiMindBlastTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_MIND_BLAST);
                 m_uiMindBlastTimer = urand(3*IN_MILLISECONDS, 8*IN_MILLISECONDS);
             } else m_uiMindBlastTimer -= uiDiff;
@@ -920,20 +967,22 @@ public:
                 switch (urand(0, 4))
                 {
                     case 0: case 1:
-                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                             DoCast(target, SPELL_MIND_FLAY);
                         break;
                     case 2:
-                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                             DoCast(target, SPELL_VAMPIRIC_TOUCH);
                         break;
                    case 3:
-                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                             DoCast(target, SPELL_SW_PAIN);
                         break;
                    case 4:
                         if (Unit* target = urand(0, 1) ? SelectTarget(SELECT_TARGET_RANDOM, 0) : DoSelectLowestHpFriendly(40.0f))
                             DoCast(target, SPELL_DISPEL);
+                        else
+                            DoCast(me, SPELL_DISPEL);
                         break;
                 }
                 m_uiCommonTimer = urand(15*IN_MILLISECONDS, 30*IN_MILLISECONDS);
@@ -1001,7 +1050,7 @@ public:
 
             if (m_uiFearTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_FEAR);
                 m_uiFearTimer = urand(4*IN_MILLISECONDS, 15*IN_MILLISECONDS);
             } else m_uiFearTimer -= uiDiff;
@@ -1015,7 +1064,7 @@ public:
 
             if (m_uiUnstableAfflictionTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_UNSTABLE_AFFLICTION);
                 m_uiUnstableAfflictionTimer = urand(2*IN_MILLISECONDS, 10*IN_MILLISECONDS);
             } else m_uiUnstableAfflictionTimer -= uiDiff;
@@ -1036,13 +1085,15 @@ public:
                         DoCastVictim(SPELL_SEARING_PAIN);
                         break;
                     case 3:
-                        DoCastVictim(SPELL_CORRUPTION);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_CORRUPTION);
                         break;
                     case 4:
-                        DoCastVictim(SPELL_CURSE_OF_AGONY);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_CURSE_OF_AGONY);
                         break;
                     case 5:
-                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                             DoCast(target, SPELL_CURSE_OF_EXHAUSTION);
                         break;
                 }
@@ -1129,7 +1180,7 @@ public:
 
             if (m_uiPolymorphTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_POLYMORPH);
                 m_uiPolymorphTimer = urand(15*IN_MILLISECONDS, 40*IN_MILLISECONDS);
             } else m_uiPolymorphTimer -= uiDiff;
@@ -1139,13 +1190,16 @@ public:
                 switch (urand(0, 2))
                 {
                     case 0:
-                        DoCast(me, SPELL_ARCANE_BARRAGE);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_ARCANE_BARRAGE);                        
                         break;
                     case 1:
-                        DoCastVictim(SPELL_ARCANE_BLAST);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_ARCANE_BLAST);  
                         break;
                     case 2:
-                        DoCastVictim(SPELL_FROSTBOLT);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_FROSTBOLT);  
                         break;
                 }
                 m_uiCommonTimer = urand(15*IN_MILLISECONDS, 30*IN_MILLISECONDS);
@@ -1261,10 +1315,12 @@ public:
                         DoCastVictim(SPELL_SHOOT);
                         break;
                     case 2:
-                        DoCastVictim(SPELL_EXPLOSIVE_SHOT);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_EXPLOSIVE_SHOT);  
                         break;
                     case 3:
-                        DoCastVictim(SPELL_AIMED_SHOT);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_AIMED_SHOT);  
                         break;
                 }
                 m_uiCommonTimer = urand(15*IN_MILLISECONDS, 30*IN_MILLISECONDS);
@@ -1333,14 +1389,14 @@ public:
 
             if (m_uiCycloneTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_CYCLONE);
                 m_uiCycloneTimer = urand(5*IN_MILLISECONDS, 40*IN_MILLISECONDS);
             } else m_uiCycloneTimer -= uiDiff;
 
             if (m_uiEntanglingRootsTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_ENTANGLING_ROOTS);
                 m_uiEntanglingRootsTimer = urand(5*IN_MILLISECONDS, 40*IN_MILLISECONDS);
             } else m_uiEntanglingRootsTimer -= uiDiff;
@@ -1356,13 +1412,16 @@ public:
                 switch (urand(0, 6))
                 {
                     case 0: case 1:
-                        DoCastVictim(SPELL_MOONFIRE);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_MOONFIRE);  
                         break;
                     case 2:
-                        DoCastVictim(SPELL_INSECT_SWARM);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_INSECT_SWARM);  
                         break;
                     case 3:
-                        DoCastVictim(SPELL_STARFIRE);
+                        if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+                            DoCast(target, SPELL_STARFIRE);  
                         break;
                     case 4: case 5: case 6:
                         DoCastVictim(SPELL_WRATH);
@@ -1440,7 +1499,7 @@ public:
             if (m_uiBladestormTimer <= uiDiff)
             {
                 DoCastVictim(SPELL_BLADESTORM);
-                m_uiBladestormTimer = urand(20*IN_MILLISECONDS, 30*IN_MILLISECONDS);
+                m_uiBladestormTimer = urand(60*IN_MILLISECONDS, 90*IN_MILLISECONDS);
             } else m_uiBladestormTimer -= uiDiff;
 
             if (m_uiIntimidatingShoutTimer <= uiDiff)
@@ -1463,13 +1522,14 @@ public:
 
             if (m_uiChargeTimer <= uiDiff)
             {
-                DoCastVictim(SPELL_CHARGE);
+                if (me->IsInRange(me->getVictim(), 8.0f, 25.0f, false))
+                    DoCast(me->getVictim(), SPELL_CHARGE);
                 m_uiChargeTimer = urand(3*IN_MILLISECONDS, 25*IN_MILLISECONDS);
             } else m_uiChargeTimer -= uiDiff;
 
             if (m_uiRetaliationTimer <= uiDiff)
             {
-                DoCastVictim(SPELL_RETALIATION);
+                DoCast(me, SPELL_RETALIATION);
                 m_uiRetaliationTimer = urand(30*IN_MILLISECONDS, 60*IN_MILLISECONDS);
             } else m_uiRetaliationTimer -= uiDiff;
 
@@ -1557,7 +1617,7 @@ public:
 
             if (m_uiChainsOfIceTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     DoCast(target, SPELL_CHAINS_OF_ICE);
                 m_uiChainsOfIceTimer = urand(5*IN_MILLISECONDS, 15*IN_MILLISECONDS);
             } else m_uiChainsOfIceTimer -= uiDiff;
@@ -1679,7 +1739,7 @@ public:
 
             if (m_uiBlindTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1))
+                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
                     if (me->IsInRange(target, 0.0f, 15.0f, false))
                         DoCast(target, SPELL_BLIND);
                 m_uiBlindTimer = urand(7*IN_MILLISECONDS, 8*IN_MILLISECONDS);
@@ -1694,7 +1754,7 @@ public:
 
             if (m_uiBladeFlurryTimer <= uiDiff)
             {
-                DoCastVictim(SPELL_BLADE_FLURRY);
+                DoCast(me, SPELL_BLADE_FLURRY);
                 m_uiBladeFlurryTimer = urand(12*IN_MILLISECONDS, 120*IN_MILLISECONDS);
             } else m_uiBladeFlurryTimer -= uiDiff;
 
@@ -1804,7 +1864,8 @@ public:
 
             if (m_uiEarthShockTimer <= uiDiff)
             {
-                DoCastVictim(SPELL_EARTH_SHOCK_ENH);
+                if (Unit* target = SelectEnemyCaster(false))
+                    DoCast(target, SPELL_EARTH_SHOCK_ENH);
                 m_uiEarthShockTimer = urand(5*IN_MILLISECONDS, 8*IN_MILLISECONDS);
             } else m_uiEarthShockTimer -= uiDiff;
 
@@ -1860,7 +1921,7 @@ public:
     {
         mob_toc_retro_paladinAI(Creature* creature) : boss_faction_championsAI(creature, AI_MELEE) {}
 
-        uint32 m_uiRepeteanceTimer;
+        uint32 m_uiRepentanceTimer;
         uint32 m_uiCrusaderStrikeTimer;
         uint32 m_uiAvengingWrathTimer;
         uint32 m_uiDivineShieldTimer;
@@ -1870,7 +1931,7 @@ public:
         void Reset()
         {
             boss_faction_championsAI::Reset();
-            m_uiRepeteanceTimer = 60*IN_MILLISECONDS;
+            m_uiRepentanceTimer = 60*IN_MILLISECONDS;
             m_uiCrusaderStrikeTimer = urand(6*IN_MILLISECONDS, 18*IN_MILLISECONDS);
             m_uiAvengingWrathTimer = 180*IN_MILLISECONDS;
             m_uiDivineShieldTimer = urand(0*IN_MILLISECONDS, 360*IN_MILLISECONDS);
@@ -1890,12 +1951,12 @@ public:
             if (!UpdateVictim())
                 return;
 
-            if (m_uiRepeteanceTimer <= uiDiff)
+            if (m_uiRepentanceTimer <= uiDiff)
             {
                 if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
                     DoCast(target, SPELL_REPENTANCE);
-                m_uiRepeteanceTimer = 60*IN_MILLISECONDS;
-            } else m_uiRepeteanceTimer -= uiDiff;
+                m_uiRepentanceTimer = 60*IN_MILLISECONDS;
+            } else m_uiRepentanceTimer -= uiDiff;
 
             if (m_uiCrusaderStrikeTimer <= uiDiff)
             {
@@ -1905,7 +1966,7 @@ public:
 
             if (m_uiAvengingWrathTimer <= uiDiff)
             {
-                DoCastVictim(SPELL_AVENGING_WRATH);
+                DoCast(me, SPELL_AVENGING_WRATH);
                 m_uiAvengingWrathTimer = 180*IN_MILLISECONDS;
             } else m_uiAvengingWrathTimer -= uiDiff;
 
-- 
1.7.8.msysgit.0

