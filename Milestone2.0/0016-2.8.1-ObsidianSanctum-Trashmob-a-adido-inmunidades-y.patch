From c3fd719c86907e67c88910c43606238818ee9207 Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Tue, 1 May 2012 23:49:24 -0500
Subject: [PATCH 16/37] =?UTF-8?q?2.8.1=20ObsidianSanctum:=20Trashmob=20a=C3=B1?=
 =?UTF-8?q?adido,=20inmunidades=20y=20da=C3=B1os?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 ...1_08_08_100_world_trashmob_obsidian_sanctum.sql |   20 ++
 src/server/game/Scripting/ScriptLoader.cpp         |    2 +
 src/server/scripts/Northrend/CMakeLists.txt        |    1 +
 .../ObsidianSanctum/trash_obsidian_sanctum.cpp     |  345 ++++++++++++++++++++
 4 files changed, 368 insertions(+), 0 deletions(-)
 create mode 100644 sql/updates/world/reanemu/2011_08_08_100_world_trashmob_obsidian_sanctum.sql
 create mode 100644 src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/trash_obsidian_sanctum.cpp

diff --git a/sql/updates/world/reanemu/2011_08_08_100_world_trashmob_obsidian_sanctum.sql b/sql/updates/world/reanemu/2011_08_08_100_world_trashmob_obsidian_sanctum.sql
new file mode 100644
index 0000000..1f0584c
--- /dev/null
+++ b/sql/updates/world/reanemu/2011_08_08_100_world_trashmob_obsidian_sanctum.sql
@@ -0,0 +1,20 @@
+-- Obsidian_Sanctum
+-- Trash mob
+-- Recopilacion de varias querys viejas y codigo viejo
+
+-- Twilight Whelp
+UPDATE `creature_template` SET `minlevel`=81  , `maxlevel`=81, `Health_mod`=12 WHERE `entry` IN (30890,31214);
+UPDATE `creature_template` SET `Health_mod`=29 WHERE `entry` IN (31540,31548);
+-- Twilight Egg
+UPDATE `creature_template` SET `minlevel`=80  , `maxlevel`=80, `Health_mod`=5 WHERE `entry` IN (30882,31204);
+UPDATE `creature_template` SET `Health_mod`=15 WHERE `entry` IN (31539,31547);
+-- Add Script to Trash
+UPDATE `creature_template` SET `ScriptName` = 'mob_obsidian_sanctum_trash' WHERE `entry` IN (30681,30680,30682,30453);
+-- Fix some Immunitys
+UPDATE `creature_template` SET `mechanic_immune_mask`=650854235 WHERE `entry` IN (30451,31520,28860,31311);
+-- More Terrible Terrible Damage
+UPDATE `creature_template` SET `dmg_multiplier` = 13 WHERE `entry` IN (30681,30680,30682,30453,31214,30890,31219,31218);
+UPDATE `creature_template` SET `dmg_multiplier` = 26 WHERE `entry` IN (31001,30999,30998,31000,31548,31540,31543,31541);
+UPDATE `creature_template` SET `dmg_multiplier` = 40 WHERE `entry` IN (30452,30451,30449,28860);
+UPDATE `creature_template` SET `dmg_multiplier` = 80 WHERE `entry` IN (31535,31520,31534,31311);
+UPDATE `creature_template` SET `dmgschool`=1 WHERE `entry` IN (30643,31317);
\ No newline at end of file
diff --git a/src/server/game/Scripting/ScriptLoader.cpp b/src/server/game/Scripting/ScriptLoader.cpp
index e3af9db..a8b8d33 100755
--- a/src/server/game/Scripting/ScriptLoader.cpp
+++ b/src/server/game/Scripting/ScriptLoader.cpp
@@ -402,6 +402,7 @@ void AddSC_boss_malygos();              // The Nexus: Eye of Eternity
 void AddSC_instance_eye_of_eternity();
 void AddSC_boss_sartharion();            //Obsidian Sanctum
 void AddSC_instance_obsidian_sanctum();
+void AddSC_trash_obsidian_sanctum();
 void AddSC_boss_bjarngrim();             //Ulduar Halls of Lightning
 void AddSC_boss_loken();
 void AddSC_boss_ionar();
@@ -1106,6 +1107,7 @@ void AddNorthrendScripts()
     AddSC_instance_eye_of_eternity();
     AddSC_boss_sartharion();            //Obsidian Sanctum
     AddSC_instance_obsidian_sanctum();
+    AddSC_trash_obsidian_sanctum();
     AddSC_boss_bjarngrim();             //Ulduar Halls of Lightning
     AddSC_boss_loken();
     AddSC_boss_ionar();
diff --git a/src/server/scripts/Northrend/CMakeLists.txt b/src/server/scripts/Northrend/CMakeLists.txt
index 3502e7f..10bb86d 100644
--- a/src/server/scripts/Northrend/CMakeLists.txt
+++ b/src/server/scripts/Northrend/CMakeLists.txt
@@ -44,6 +44,7 @@ set(scripts_STAT_SRCS
   Northrend/ChamberOfAspects/ObsidianSanctum/instance_obsidian_sanctum.cpp
   Northrend/ChamberOfAspects/ObsidianSanctum/obsidian_sanctum.h
   Northrend/ChamberOfAspects/ObsidianSanctum/boss_sartharion.cpp
+  Northrend/ChamberOfAspects/ObsidianSanctum/trash_obsidian_sanctum.cpp
   Northrend/ChamberOfAspects/RubySanctum/instance_ruby_sanctum.cpp
   Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.h
   Northrend/ChamberOfAspects/RubySanctum/ruby_sanctum.cpp
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/trash_obsidian_sanctum.cpp b/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/trash_obsidian_sanctum.cpp
new file mode 100644
index 0000000..50e4133
--- /dev/null
+++ b/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/trash_obsidian_sanctum.cpp
@@ -0,0 +1,345 @@
+#include "ScriptPCH.h"
+#include "obsidian_sanctum.h"
+
+enum Spells
+{
+    // Onyx Blaze Mistress
+    SPELL_CONJURE_FLAME_ORB     = 57753,
+    SPELL_FLAME_SHOCK           = 39529,
+    SPELL_FLAME_SHOCK_H         = 58940,
+    SPELL_RAIN_OF_FIRE          = 57757,
+    SPELL_RAIN_OF_FIRE_H        = 58936,
+    // Onyx Brood General
+    SPELL_AVENGING_FURY         = 57742,
+    SPELL_DEVOTION_AURA         = 57740, // Permanent
+    SPELL_DEVOTION_AURA_H       = 58944, // Permanent
+    SPELL_DRACONIC_RAGE         = 57733,
+    SPELL_DRACONIC_RAGE_H       = 58942,
+    SPELL_MORTAL_STRIKE         = 13737,
+    // Onyx Flight Captain
+    SPELL_HAMMER_DROP           = 57759,
+    SPELL_PUMMEL                = 58953,
+    // Onyx Sanctum Guardian
+    SPELL_CURSE_OF_MENDING      = 39647, // Permanent
+    SPELL_CURSE_OF_MENDING_H    = 58948, // Permanent
+    SPELL_FRENZY                = 53801,
+    SPELL_SHOCKWAVE             = 57728,
+    SPELL_SHOCKWAVE_H           = 58947
+};
+
+struct trash_obsidian_sanctum_trashAI : public ScriptedAI
+{
+    trash_obsidian_sanctum_trashAI(Creature *c) : ScriptedAI(c)
+    {
+        if(c->GetMap()->IsDungeon())
+            pInstance = c->GetInstanceScript();
+
+        c->setActive(true);
+    }
+
+    InstanceScript* pInstance;
+    uint32 AreaInCombat_Timer;
+    uint32 SartharionCheck_Timer;
+
+    void Reset()
+    {
+        AreaInCombat_Timer = 5000;
+        SartharionCheck_Timer = 5000;
+    }
+
+    void SendAttacker(Unit* target) // Exploit Fix
+    {
+        std::list<Creature*> templist;
+        float x, y, z;
+        me->GetPosition(x, y, z);
+
+        {
+            CellCoord pair(Trinity::ComputeCellCoord(x, y));
+            Cell cell(pair);
+            cell.SetNoCreate();
+
+            Trinity::AllFriendlyCreaturesInGrid check(me);
+            Trinity::CreatureListSearcher<Trinity::AllFriendlyCreaturesInGrid> searcher(me, templist, check);
+
+            TypeContainerVisitor<Trinity::CreatureListSearcher<Trinity::AllFriendlyCreaturesInGrid>, GridTypeMapContainer> cSearcher(searcher);
+
+            cell.Visit(pair, cSearcher, *(me->GetMap()), *me, SIZE_OF_GRIDS);
+        }
+
+        if(!templist.size())
+            return;
+
+        for(std::list<Creature*>::iterator i = templist.begin(); i != templist.end(); ++i)
+        {
+            if((*i) && me->IsWithinDistInMap((*i),10))
+            {
+                if(!(*i)->isInCombat() && !me->getVictim())
+                    (*i)->AI()->AttackStart(target);
+            }
+        }
+    }
+
+    void EnterCombat(Unit *who)
+    {
+        DoAttackerAreaInCombat(who, 100);
+        Unit *ptarget = SelectTarget(SELECT_TARGET_RANDOM, 0);
+        if(ptarget)
+            SendAttacker(ptarget);
+    }
+    void KilledUnit(Unit *victim){}
+    void JustDied(Unit *victim){}
+
+    Creature* FindNearestCreature(uint32 entry, float range)
+    {
+        Creature *creature = NULL;
+        Trinity::NearestCreatureEntryWithLiveStateInObjectRangeCheck checker(*me, entry, true, range);
+        Trinity::CreatureLastSearcher<Trinity::NearestCreatureEntryWithLiveStateInObjectRangeCheck> searcher(me, creature, checker);
+        me->VisitNearbyObject(range, searcher);
+        return creature;
+    }
+
+    void DoAggroPuls(const uint32 diff)
+    {
+        if(AreaInCombat_Timer <= diff)
+        {
+            DoAttackerAreaInCombat(me->getVictim(), 100);
+            AreaInCombat_Timer = 5000;
+        }else AreaInCombat_Timer -= diff;
+    }
+
+    bool TryDoCast(Unit *victim, uint32 spellId, bool triggered = false)
+    {
+        if(me->IsNonMeleeSpellCasted(false) && !triggered) return false;
+
+        DoCast(victim,spellId,triggered);
+        return true;
+    }
+
+    bool TryDoCastAOE(uint32 spellId, bool triggered = false)
+    {
+        if(me->IsNonMeleeSpellCasted(false) && !triggered) return false;
+
+        DoCastAOE(spellId,triggered);
+        return true;
+    }
+
+    void UpdateAI(const uint32 diff)
+    {
+        if(!me->getVictim())
+        {
+            if(SartharionCheck_Timer < diff)
+            {
+                if(Creature* sarth = Creature::GetCreature((*me),pInstance->GetData64(DATA_SARTHARION)))
+                {
+                    if(sarth->getVictim())
+                        me->AI()->AttackStart(sarth->getVictim());
+                }
+                SartharionCheck_Timer = 5000;
+            }else SartharionCheck_Timer -= diff;
+        }
+
+        if (!UpdateVictim() )
+            return;
+
+        DoAggroPuls(diff);
+
+        DoMeleeAttackIfReady();
+    }
+};
+
+class trash_obsidian_sanctum_trash : public CreatureScript
+{
+public:
+    trash_obsidian_sanctum_trash() : CreatureScript("trash_obsidian_sanctum_trash") { }
+
+    CreatureAI* GetAI(Creature* pCreature) const
+    {
+        switch(pCreature->GetEntry())
+        {
+        case 30681: return new mob_onyx_blaze_mistressAI (pCreature);
+        case 30680: return new mob_onyx_brood_generalAI (pCreature);
+        case 30682: return new mob_onyx_flight_captainAI (pCreature);
+        case 30453: return new mob_onyx_sanctum_guardianAI (pCreature);
+        default: return new mob_onyx_sanctum_guardianAI (pCreature);
+        }
+    }
+
+    struct mob_onyx_blaze_mistressAI: public trash_obsidian_sanctum_trashAI
+    {
+        mob_onyx_blaze_mistressAI(Creature *c) : trash_obsidian_sanctum_trashAI(c) { }
+
+        uint32 ui_Shock_Timer;
+        uint32 ui_Rain_Timer;
+        uint32 ui_FlameOrb_Timer;
+
+        void Reset()
+        {
+            ui_Shock_Timer = urand(5000,10000);
+            ui_Rain_Timer =  urand(15000,25000);
+            ui_FlameOrb_Timer =  urand(15000,25000);
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if (!UpdateVictim() )
+                return;
+
+            if(ui_Shock_Timer <= diff)
+            {
+                if(TryDoCast(me->getVictim(),RAID_MODE(SPELL_FLAME_SHOCK,SPELL_FLAME_SHOCK_H)))
+                    ui_Shock_Timer = urand(2000,7000);
+            }else ui_Shock_Timer -= diff;
+
+            if(ui_Rain_Timer <= diff)
+            {
+                if(Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 1,40,false))
+                    if(TryDoCast(target,RAID_MODE(SPELL_RAIN_OF_FIRE,SPELL_RAIN_OF_FIRE_H)))
+                        ui_Rain_Timer =  urand(15000,25000);
+            }else ui_Rain_Timer -= diff;
+
+            if(ui_FlameOrb_Timer <= diff)
+            {
+                if(TryDoCastAOE(SPELL_CONJURE_FLAME_ORB))
+                    ui_FlameOrb_Timer = urand(15000,25000);
+            }else ui_FlameOrb_Timer -= diff;
+
+
+            trash_obsidian_sanctum_trashAI::UpdateAI(diff);
+        }
+    };
+
+    struct mob_onyx_brood_generalAI: public trash_obsidian_sanctum_trashAI
+    {
+        mob_onyx_brood_generalAI(Creature *c) : trash_obsidian_sanctum_trashAI(c) { }
+
+        uint32 ui_Strike_Timer;
+        uint32 ui_Fury_Timer;
+        uint32 ui_Rage_Timer;
+
+        void Reset()
+        {
+            ui_Strike_Timer = urand(5000,10000);
+            ui_Fury_Timer =  urand(15000,25000);
+            ui_Rage_Timer =  urand(30000,45000);
+        }
+
+        void EnterCombat(Unit *who)
+        {
+            trash_obsidian_sanctum_trashAI::EnterCombat(who);
+
+            DoCastAOE(RAID_MODE(SPELL_DEVOTION_AURA,SPELL_DEVOTION_AURA_H));
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if (!UpdateVictim() )
+                return;
+
+            if(ui_Strike_Timer <= diff)
+            {
+                if(TryDoCast(me->getVictim(),SPELL_MORTAL_STRIKE))
+                    ui_Strike_Timer = urand(2000,7000);
+            }else ui_Strike_Timer -= diff;
+
+            if(ui_Rage_Timer <= diff)
+            {
+                if(TryDoCastAOE(RAID_MODE(SPELL_DRACONIC_RAGE,SPELL_DRACONIC_RAGE_H)))
+                    ui_Rage_Timer =  urand(30000,45000);
+            }else ui_Rage_Timer -= diff;
+
+            if(ui_Fury_Timer <= diff)
+            {
+                if(TryDoCastAOE(SPELL_AVENGING_FURY))
+                    ui_Fury_Timer = urand(15000,25000);
+            }else ui_Fury_Timer -= diff;
+
+            trash_obsidian_sanctum_trashAI::UpdateAI(diff);
+        }
+    };
+
+    struct mob_onyx_flight_captainAI: public trash_obsidian_sanctum_trashAI
+    {
+        mob_onyx_flight_captainAI(Creature *c) : trash_obsidian_sanctum_trashAI(c) { }
+
+        uint32 ui_HammerDrop_Timer;
+        uint32 ui_Pummel_Timer;
+
+        void Reset()
+        {
+            ui_HammerDrop_Timer = urand(5000,10000);
+            ui_Pummel_Timer = urand(5000,10000);
+        }
+
+        void EnterCombat(Unit *who)
+        {
+            trash_obsidian_sanctum_trashAI::EnterCombat(who);
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if (!UpdateVictim() )
+                return;
+
+            if(ui_HammerDrop_Timer <= diff)
+            {
+                if(TryDoCast(me->getVictim(),SPELL_HAMMER_DROP))
+                    ui_HammerDrop_Timer = urand(5000,10000);
+            }else ui_HammerDrop_Timer -= diff;
+
+            if(ui_Pummel_Timer <= diff)
+            {
+                if(TryDoCast(me->getVictim(),SPELL_PUMMEL))
+                    ui_Pummel_Timer =  urand(5000,10000);
+            }else ui_Pummel_Timer -= diff;
+
+            trash_obsidian_sanctum_trashAI::UpdateAI(diff);
+        }
+    };
+
+    struct mob_onyx_sanctum_guardianAI: public trash_obsidian_sanctum_trashAI
+    {
+        mob_onyx_sanctum_guardianAI(Creature *c) : trash_obsidian_sanctum_trashAI(c) { }
+
+        uint32 ui_Frenzy_Timer;
+        uint32 ui_Shockwave_Timer;
+
+        void Reset()
+        {
+            ui_Shockwave_Timer = urand(10000,15000);
+            ui_Frenzy_Timer = urand(25000,35000);
+        }
+
+        void EnterCombat(Unit *who)
+        {
+            trash_obsidian_sanctum_trashAI::EnterCombat(who);
+
+            DoCastAOE(RAID_MODE(SPELL_CURSE_OF_MENDING,SPELL_CURSE_OF_MENDING_H));
+        }
+
+        void UpdateAI(const uint32 diff)
+        {
+            if (!UpdateVictim() )
+                return;
+
+            if(ui_Shockwave_Timer <= diff)
+            {
+                if(TryDoCast(me->getVictim(),RAID_MODE(SPELL_SHOCKWAVE,SPELL_SHOCKWAVE_H)))
+                    ui_Shockwave_Timer = urand(5000,10000);
+            }else ui_Shockwave_Timer -= diff;
+
+            if(ui_Frenzy_Timer <= diff)
+            {
+                if(TryDoCast(me,SPELL_FRENZY))
+                    ui_Frenzy_Timer =  urand(20000,30000);
+            }else ui_Frenzy_Timer -= diff;
+
+            trash_obsidian_sanctum_trashAI::UpdateAI(diff);
+        }
+    };
+};
+
+// UPDATE creature_template SET scriptname = 'trash_obsidian_sanctum_trash' WHERE entry in (30681,30680,30682,30453);
+void AddSC_trash_obsidian_sanctum()
+{
+    new trash_obsidian_sanctum_trash();
+}
\ No newline at end of file
-- 
1.7.8.msysgit.0

