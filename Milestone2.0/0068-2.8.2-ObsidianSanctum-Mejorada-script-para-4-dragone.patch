From 17a8ba8b222942df7ccce76e5391dc40e1608388 Mon Sep 17 00:00:00 2001
From: Eilo <eilo2518@gmail.com>
Date: Wed, 2 May 2012 00:06:55 -0500
Subject: [PATCH 68/93] 2.8.2 ObsidianSanctum: Mejorada script para 4 dragones
 y logros

---
 .../2011_05_02_100_world_obsidian_sanctum.sql      |   10 +
 .../ObsidianSanctum/boss_sartharion.cpp            | 1090 ++++++++++++--------
 .../ObsidianSanctum/instance_obsidian_sanctum.cpp  |   90 ++-
 3 files changed, 745 insertions(+), 445 deletions(-)
 create mode 100644 sql/updates/world/reanemu/2011_05_02_100_world_obsidian_sanctum.sql

diff --git a/sql/updates/world/reanemu/2011_05_02_100_world_obsidian_sanctum.sql b/sql/updates/world/reanemu/2011_05_02_100_world_obsidian_sanctum.sql
new file mode 100644
index 0000000..00cac52
--- /dev/null
+++ b/sql/updates/world/reanemu/2011_05_02_100_world_obsidian_sanctum.sql
@@ -0,0 +1,10 @@
+-- Obsidian_Sanctum
+-- Mejoras en script para logro de 4 dragones
+-- Twilight Egg
+UPDATE `creature_template` SET `ScriptName` = 'mob_twilight_eggs' WHERE `entry` = 31204;
+-- Delete Portals
+DELETE FROM `gameobject` WHERE `id`=193988;
+-- Delete Trigger
+DELETE FROM `creature` WHERE `id` = 31138;
+-- Add Script to Portal
+UPDATE `gameobject_template` SET `ScriptName` = 'go_twilight_portal' WHERE `entry` = 193988;
\ No newline at end of file
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/boss_sartharion.cpp b/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/boss_sartharion.cpp
index b115a4e..e5f851c 100644
--- a/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/boss_sartharion.cpp
+++ b/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/boss_sartharion.cpp
@@ -51,7 +51,9 @@ enum eEnums
     SPELL_TAIL_LASH                             = 56910,    // A sweeping tail strike hits all enemies behind the caster, inflicting 3063 to 3937 damage and stunning them for 2 sec.
     SPELL_TAIL_LASH_H                           = 58957,    // A sweeping tail strike hits all enemies behind the caster, inflicting 4375 to 5625 damage and stunning them for 2 sec.
     SPELL_WILL_OF_SARTHARION                    = 61254,    // Sartharion's presence bolsters the resolve of the Twilight Drakes, increasing their total health by 25%. This effect also increases Sartharion's health by 25%.
-    SPELL_LAVA_STRIKE                           = 57571,    // (Real spell casted should be 57578) 57571 then trigger visual missile, then summon Lava Blaze on impact(spell 57572)
+    SPELL_LAVA_STRIKE_SUMMON                    = 57571,    // (Real spell casted should be 57578) 57571 then trigger visual missile, then summon Lava Blaze on impact(spell 57572)
+    SPELL_LAVA_STRIKE_DAMAGE                    = 57697,
+    SPELL_LAVA_STRIKE_TRIGGER                   = 57598,    // 58964
     SPELL_TWILIGHT_REVENGE                      = 60639,
     NPC_FIRE_CYCLONE                            = 30648,
 
@@ -79,6 +81,8 @@ enum eEnums
     SPELL_POWER_OF_VESPERON                     = 61251,    // Vesperon's presence decreases the maximum health of all enemies by 25%.
     SPELL_TWILIGHT_TORMENT_VESP                 = 57948,    // (Shadow only) trigger 57935 then 57988
     SPELL_TWILIGHT_TORMENT_VESP_ACO             = 58853,    // (Fire and Shadow) trigger 58835 then 57988
+    SPELL_TWILIGHT_TORMENT_SHADOW               = 57935,
+    SPELL_TWILIGHT_TORMENT_SHAFIR               = 58835,
 
     //Shadron
     //In portal is a disciple, when disciple killed remove Power_of_vesperon, portal open multiple times
@@ -110,6 +114,7 @@ enum eEnums
     SPELL_FADE_ARMOR                            = 60708,    // Reduces the armor of an enemy by 1500 for 15s
 
     //flame tsunami
+    SPELL_FLAME_TSUNAMI_COMBINE_AURA            = 57492,
     SPELL_FLAME_TSUNAMI                         = 57494,    // the visual dummy
     SPELL_FLAME_TSUNAMI_LEAP                    = 60241,    // SPELL_EFFECT_138 some leap effect, causing caster to move in direction
 
@@ -122,24 +127,21 @@ enum eEnums
     //using these custom points for dragons start and end
     POINT_ID_INIT                               = 100,
     POINT_ID_LAND                               = 200,
-};
 
-#define DATA_CAN_LOOT   0
+    //Achievements
+    ACHIEV_TWILIGHT_ASSIST                      = 2049,
+    H_ACHIEV_TWILIGHT_ASSIST                    = 2052,
+    ACHIEV_TWILIGHT_DUO                         = 2050,
+    H_ACHIEV_TWILIGHT_DUO                       = 2053,
+    ACHIEV_TWILIGHT_ZONE                        = 2051,
+    H_ACHIEV_TWILIGHT_ZONE                      = 2054
+};
 
 struct Waypoint
 {
     float m_fX, m_fY, m_fZ;
 };
 
-struct Location
-{
-    float x, y, z;
-};
-struct Locations
-{
-    float x, y, z;
-};
-
 //each dragons special points. First where fly to before connect to connon, second where land point is.
 Waypoint m_aTene[]=
 {
@@ -171,41 +173,59 @@ Waypoint m_aDragonCommon[MAX_WAYPOINT]=
     {3209.969f, 566.523f, 98.652f}
 };
 
-static Location FlameRight1Spawn = { 3200.00f, 573.211f, 57.1551f };
-static Location FlameRight1Direction = { 3289.28f, 573.211f, 57.1551f };
-static Location FlameRight2Spawn = { 3200.00f, 532.211f, 57.1551f };
-static Location FlameRight2Direction = { 3289.28f, 532.211f, 57.1551f };
-static Location FlameRight3Spawn = { 3200.00f, 491.211f, 57.1551f };
-static Location FlameRight3Direction = { 3289.28f, 491.211f, 57.1551f };
-static Location FlameLeft1Spawn = { 3289.28f, 511.711f, 57.1551f };
-static Location FlameLeft1Direction = { 3200.00f, 511.711f, 57.1551f };
-static Location FlameLeft2Spawn = { 3289.28f, 552.711f, 57.1551f };
-static Location FlameLeft2Direction = { 3200.00f, 552.711f, 57.1551f };
-
-static Location AcolyteofShadron = { 3363.92f, 534.703f, 97.2683f };
-static Location AcolyteofShadron2 = { 3246.57f, 551.263f, 58.6164f };
-static Location AcolyteofVesperon = { 3145.68f, 520.71f, 89.7f };
-static Location AcolyteofVesperon2 = { 3246.57f, 551.263f, 58.6164f };
-Locations TwilightEggs[] =
+static Position FlameRight1Spawn = { 3200.00f, 573.211f, 57.1551f };
+static Position FlameRight1Direction = { 3289.28f, 573.211f, 57.1551f };
+static Position FlameRight2Spawn = { 3200.00f, 532.211f, 57.1551f };
+static Position FlameRight2Direction = { 3289.28f, 532.211f, 57.1551f };
+static Position FlameRight3Spawn = { 3200.00f, 491.211f, 57.1551f };
+static Position FlameRight3Direction = { 3289.28f, 491.211f, 57.1551f };
+static Position FlameLeft1Spawn = { 3289.28f, 511.711f, 57.1551f };
+static Position FlameLeft1Direction = { 3200.00f, 511.711f, 57.1551f };
+static Position FlameLeft2Spawn = { 3289.28f, 552.711f, 57.1551f };
+static Position FlameLeft2Direction = { 3200.00f, 552.711f, 57.1551f };
+
+static Position AcolyteofShadron = { 3363.92f, 534.703f, 97.2683f };
+static Position AcolyteofShadron2 = { 3246.57f, 551.263f, 58.6164f };
+static Position AcolyteofVesperon = { 3145.68f, 520.71f, 89.7f };
+static Position AcolyteofVesperon2 = { 3246.57f, 551.263f, 58.6164f };
+
+const Position TwilightEggs[] =
 {
-    {3219.28f, 669.121f, 88.5549f},
-    {3221.55f, 682.852f, 90.5361f},
-    {3239.77f, 685.94f, 90.3168f},
-    {3250.33f, 669.749f, 88.7637f},
-    {3246.6f, 642.365f, 84.8752f},
-    {3233.68f, 653.117f, 85.7051f}
+    {3219.28f, 669.121f , 88.5549f,0.0f},
+    {3221.55f, 682.852f , 90.5361f,0.0f},
+    {3239.77f, 685.94f , 90.3168f,0.0f},
+    {3250.33f, 669.749f , 88.7637f,0.0f},
+    {3246.6f, 642.365f , 84.8752f,0.0f},
+    {3233.68f, 653.117f , 85.7051f,0.0f}
 };
-Locations TwilightEggsSarth[] =
+
+const Position TwilightEggsSarth[] =
+{
+    {3252.73f, 515.762f , 58.5501f,0.0f},
+    {3256.56f, 521.119f , 58.6061f,0.0f},
+    {3255.63f, 527.513f , 58.7568f,0.0f},
+    {3264.90f, 525.865f , 58.6436f,0.0f},
+    {3264.26f, 516.364f , 58.8011f,0.0f},
+    {3257.54f, 502.285f , 58.2077f,0.0f}
+};
+
+enum FlameWallAction
 {
-    {3252.73f, 515.762f, 58.5501f},
-    {3256.56f, 521.119f, 58.6061f},
-    {3255.63f, 527.513f, 58.7568f},
-    {3264.90f, 525.865f, 58.6436f},
-    {3264.26f, 516.364f, 58.8011f},
-    {3257.54f, 502.285f, 58.2077f}
+    ACTION_MOVE_NONE,
+    ACTION_MOVE_RIGHT_1,
+    ACTION_MOVE_RIGHT_2,
+    ACTION_MOVE_RIGHT_3,
+    ACTION_MOVE_LEFT_1,
+    ACTION_MOVE_LEFT_2
 };
 
-#define TWILIGHT_ACHIEVEMENTS     1
+//const Position TwilightPortals[] =
+//{
+//    {3137.26, 501.08,  87.9118, 0.846795},
+//    {3238.37, 518.595, 58.9057, 0.739184}, // Sartharion
+//    {3362.01, 553.726, 95.7068, 4.56818},
+//    {3219.67, 656.795, 87.2898, 5.92596}
+//};
 
 /*######
 ## Boss Sartharion
@@ -216,19 +236,19 @@ class boss_sartharion : public CreatureScript
 public:
     boss_sartharion() : CreatureScript("boss_sartharion") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new boss_sartharionAI(creature);
+        return new boss_sartharionAI(pCreature);
     }
 
     struct boss_sartharionAI : public ScriptedAI
     {
-        boss_sartharionAI(Creature* creature) : ScriptedAI(creature)
+        boss_sartharionAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
-            instance = creature->GetInstanceScript();
+            pInstance = pCreature->GetInstanceScript();
         }
 
-        InstanceScript* instance;
+        InstanceScript* pInstance;
 
         bool m_bIsBerserk;
         bool m_bIsSoftEnraged;
@@ -250,7 +270,11 @@ public:
         bool m_bHasCalledShadron;
         bool m_bHasCalledVesperon;
 
-        uint8 drakeCount;
+        uint32 achievProgress;
+
+        bool m_FireCycloneFireing;
+        uint64 m_guidFireCyclone;
+        uint32 m_uifireCount;
 
         void Reset()
         {
@@ -274,70 +298,70 @@ public:
             m_bHasCalledShadron = false;
             m_bHasCalledVesperon = false;
 
+            m_FireCycloneFireing = false;
+            m_guidFireCyclone = 0;
+
             if (me->HasAura(SPELL_TWILIGHT_REVENGE))
                 me->RemoveAurasDueToSpell(SPELL_TWILIGHT_REVENGE);
 
             me->SetHomePosition(3246.57f, 551.263f, 58.6164f, 4.66003f);
 
-            drakeCount = 0;
+            achievProgress = 0;
 
             // Drakes respawning system
-            if (instance)
+            if (pInstance)
             {
-                Creature* pTenebron = Unit::GetCreature(*me, instance->GetData64(DATA_TENEBRON));
-                Creature* pShadron = Unit::GetCreature(*me, instance->GetData64(DATA_SHADRON));
-                Creature* pVesperon = Unit::GetCreature(*me, instance->GetData64(DATA_VESPERON));
+                Creature* pTenebron = Unit::GetCreature(*me, pInstance->GetData64(DATA_TENEBRON));
+                Creature* pShadron = Unit::GetCreature(*me, pInstance->GetData64(DATA_SHADRON));
+                Creature* pVesperon = Unit::GetCreature(*me, pInstance->GetData64(DATA_VESPERON));
                 if (pTenebron)
                 {
                     pTenebron->SetHomePosition(3239.07f, 657.235f, 86.8775f, 4.74729f);
-                    if (pTenebron->isAlive())
+                    if(pTenebron->isAlive())
                     {
                         if (pTenebron->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE))
                             pTenebron->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
                         pTenebron->GetMotionMaster()->MoveTargetedHome();
                     }else
                     {
-                        if (instance->GetData(TYPE_TENEBRON_PREKILLED) == false)
+                        if(pInstance->GetData(TYPE_TENEBRON_PREKILLED) == false)
                         {
                             pTenebron->Respawn();
                             pTenebron->GetMotionMaster()->MoveTargetedHome();
-                            pTenebron->AI()->SetData(DATA_CAN_LOOT, 0);
                         }
                     }
                 }
                 if (pShadron)
                 {
                     pShadron->SetHomePosition(3363.06f, 525.28f, 98.362f, 4.76475f);
-                    if (pShadron->isAlive())
+                    if(pShadron->isAlive())
                     {
                         if (pShadron->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE))
                             pShadron->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
                         pShadron->GetMotionMaster()->MoveTargetedHome();
                     }else
                     {
-                        if (instance->GetData(TYPE_SHADRON_PREKILLED) == false)
+                        if(pInstance->GetData(TYPE_SHADRON_PREKILLED) == false)
                         {
                             pShadron->Respawn();
                             pShadron->GetMotionMaster()->MoveTargetedHome();
-                            pShadron->AI()->SetData(DATA_CAN_LOOT, 0);
                         }
                     }
                 }
                 if (pVesperon)
                 {
                     pVesperon->SetHomePosition(3145.68f, 520.71f, 89.7f, 4.64258f);
-                    if (pVesperon->isAlive())
+                    if(pVesperon->isAlive())
                     {
                         if (pVesperon->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE))
                             pVesperon->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
                         pVesperon->GetMotionMaster()->MoveTargetedHome();
                     }else
                     {
-                        if (instance->GetData(TYPE_VESPERON_PREKILLED) == false)
+                        if(pInstance->GetData(TYPE_VESPERON_PREKILLED) == false)
                         {
                             pVesperon->Respawn();
                             pVesperon->GetMotionMaster()->MoveTargetedHome();
-                            pVesperon->AI()->SetData(DATA_CAN_LOOT, 0);
                         }
                     }
                 }
@@ -346,31 +370,41 @@ public:
 
         void JustReachedHome()
         {
-            if (instance)
-                instance->SetData(TYPE_SARTHARION_EVENT, NOT_STARTED);
+            if (pInstance)
+                pInstance->SetData(TYPE_SARTHARION_EVENT, NOT_STARTED);
         }
 
-        void EnterCombat(Unit* /*who*/)
+        void EnterCombat(Unit* /*pWho*/)
         {
-            DoScriptText(SAY_SARTHARION_AGGRO, me);
+            DoScriptText(SAY_SARTHARION_AGGRO,me);
             DoZoneInCombat();
 
-            if (instance)
+            if (pInstance)
             {
-                instance->SetData(TYPE_SARTHARION_EVENT, IN_PROGRESS);
+                pInstance->SetData(TYPE_SARTHARION_EVENT, IN_PROGRESS);
                 FetchDragons();
             }
         }
 
-        void JustDied(Unit* /*killer*/)
+        void JustSummoned(Creature* pSummoned)
         {
-            DoScriptText(SAY_SARTHARION_DEATH, me);
+            switch(pSummoned->GetEntry())
+            {
+            case NPC_FLAME_TSUNAMI:
+                pSummoned->setFaction(me->getFaction());
+                break;
+            }
+        }
 
-            if (instance)
+        void JustDied(Unit* /*pKiller*/)
+        {
+            DoScriptText(SAY_SARTHARION_DEATH,me);
+
+            if (pInstance)
             {
-                Creature* pTenebron = Unit::GetCreature(*me, instance->GetData64(DATA_TENEBRON));
-                Creature* pShadron = Unit::GetCreature(*me, instance->GetData64(DATA_SHADRON));
-                Creature* pVesperon = Unit::GetCreature(*me, instance->GetData64(DATA_VESPERON));
+                Creature* pTenebron = Unit::GetCreature(*me, pInstance->GetData64(DATA_TENEBRON));
+                Creature* pShadron = Unit::GetCreature(*me, pInstance->GetData64(DATA_SHADRON));
+                Creature* pVesperon = Unit::GetCreature(*me, pInstance->GetData64(DATA_VESPERON));
                 if (pTenebron && pTenebron->isAlive())
                     pTenebron->DisappearAndDie();
                 if (pShadron && pShadron->isAlive())
@@ -378,13 +412,27 @@ public:
                 if (pVesperon && pVesperon->isAlive())
                     pVesperon->DisappearAndDie();
 
-                instance->SetData(TYPE_SARTHARION_EVENT, DONE);
+                if (achievProgress == 1)
+                    pInstance->DoCompleteAchievement(RAID_MODE(ACHIEV_TWILIGHT_ASSIST,H_ACHIEV_TWILIGHT_ASSIST));
+                else if (achievProgress == 2)
+                {
+                    pInstance->DoCompleteAchievement(RAID_MODE(ACHIEV_TWILIGHT_ASSIST,H_ACHIEV_TWILIGHT_ASSIST));
+                    pInstance->DoCompleteAchievement(RAID_MODE(ACHIEV_TWILIGHT_DUO,H_ACHIEV_TWILIGHT_DUO));
+                }
+                else if (achievProgress == 3)
+                {
+                    pInstance->DoCompleteAchievement(RAID_MODE(ACHIEV_TWILIGHT_ASSIST,H_ACHIEV_TWILIGHT_ASSIST));
+                    pInstance->DoCompleteAchievement(RAID_MODE(ACHIEV_TWILIGHT_DUO,H_ACHIEV_TWILIGHT_DUO));
+                    pInstance->DoCompleteAchievement(RAID_MODE(ACHIEV_TWILIGHT_ZONE,H_ACHIEV_TWILIGHT_ZONE));
+                }
+
+                pInstance->SetData(TYPE_SARTHARION_EVENT, DONE);
             }
         }
 
-        void KilledUnit(Unit* /*victim*/)
+        void KilledUnit(Unit* /*pVictim*/)
         {
-            DoScriptText(RAND(SAY_SARTHARION_SLAY_1, SAY_SARTHARION_SLAY_2, SAY_SARTHARION_SLAY_3), me);
+            DoScriptText(RAND(SAY_SARTHARION_SLAY_1,SAY_SARTHARION_SLAY_2,SAY_SARTHARION_SLAY_3), me);
         }
 
         // me->ResetLootMode() is called from Reset()
@@ -399,25 +447,17 @@ public:
                 me->AddLootMode(LOOT_MODE_HARD_MODE_1);      // Add 1st Drake loot mode
         }
 
-        uint32 GetData(uint32 type)
-        {
-            if (type == TWILIGHT_ACHIEVEMENTS)
-                return drakeCount;
-
-            return 0;
-        }
-
         void FetchDragons()
         {
-            if (!instance)
+            if(!pInstance)
                 return;
 
             me->ResetLootMode();
-            drakeCount = 0;
+            achievProgress = 0;
 
-            Creature* pFetchTene = Unit::GetCreature(*me, instance->GetData64(DATA_TENEBRON));
-            Creature* pFetchShad = Unit::GetCreature(*me, instance->GetData64(DATA_SHADRON));
-            Creature* pFetchVesp = Unit::GetCreature(*me, instance->GetData64(DATA_VESPERON));
+            Creature* pFetchTene = Unit::GetCreature(*me, pInstance->GetData64(DATA_TENEBRON));
+            Creature* pFetchShad = Unit::GetCreature(*me, pInstance->GetData64(DATA_SHADRON));
+            Creature* pFetchVesp = Unit::GetCreature(*me, pInstance->GetData64(DATA_VESPERON));
 
             //if at least one of the dragons are alive and are being called
             bool bCanUseWill = false;
@@ -425,11 +465,10 @@ public:
             if (pFetchTene && pFetchTene->isAlive() && !pFetchTene->getVictim())
             {
                 bCanUseWill = true;
-                if (!pFetchTene->isInCombat())
+                if(!pFetchTene->isInCombat())
                 {
-                    DoCast(me, SPELL_POWER_OF_TENEBRON);
                     AddDrakeLootMode();
-                    ++drakeCount;
+                    achievProgress++;
                 }
                 pFetchTene->GetMotionMaster()->MovePoint(POINT_ID_INIT, m_aTene[0].m_fX, m_aTene[0].m_fY, m_aTene[0].m_fZ);
 
@@ -440,11 +479,10 @@ public:
             if (pFetchShad && pFetchShad->isAlive() && !pFetchShad->getVictim())
             {
                 bCanUseWill = true;
-                if (!pFetchShad->isInCombat())
+                if(!pFetchShad->isInCombat())
                 {
-                    DoCast(me, SPELL_POWER_OF_SHADRON);
                     AddDrakeLootMode();
-                    ++drakeCount;
+                    achievProgress++;
                 }
                 pFetchShad->GetMotionMaster()->MovePoint(POINT_ID_INIT, m_aShad[0].m_fX, m_aShad[0].m_fY, m_aShad[0].m_fZ);
 
@@ -455,11 +493,10 @@ public:
             if (pFetchVesp && pFetchVesp->isAlive() && !pFetchVesp->getVictim())
             {
                 bCanUseWill = true;
-                if (!pFetchVesp->isInCombat())
+                if(!pFetchVesp->isInCombat())
                 {
-                    DoCast(me, SPELL_POWER_OF_VESPERON);
                     AddDrakeLootMode();
-                    ++drakeCount;
+                    achievProgress++;
                 }
                 pFetchVesp->GetMotionMaster()->MovePoint(POINT_ID_INIT, m_aVesp[0].m_fX, m_aVesp[0].m_fY, m_aVesp[0].m_fZ);
 
@@ -473,20 +510,22 @@ public:
 
         void CallDragon(uint32 uiDataId)
         {
-            if (instance)
+            if (pInstance)
             {
-                if (Creature* temp = Unit::GetCreature(*me, instance->GetData64(uiDataId)))
+                if (Creature* temp = Unit::GetCreature(*me, pInstance->GetData64(uiDataId)))
                 {
                     if (temp->isAlive() && !temp->getVictim())
                     {
                         if (temp->HasUnitMovementFlag(MOVEMENTFLAG_WALKING))
-                            temp->SetWalk(false);
+                            temp->RemoveUnitMovementFlag(MOVEMENTFLAG_WALKING);
 
                         if (temp->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE))
                             temp->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
 
                         int32 iTextId = 0;
 
+                        temp->RemoveLootMode(LOOT_MODE_DEFAULT);
+
                         switch (temp->GetEntry())
                         {
                             case NPC_TENEBRON:
@@ -514,10 +553,10 @@ public:
 
         void SendFlameTsunami()
         {
-            if (Map* map = me->GetMap())
-                if (map->IsDungeon())
+            if (Map* pMap = me->GetMap())
+                if (pMap->IsDungeon())
                 {
-                    Map::PlayerList const &PlayerList = map->GetPlayers();
+                    Map::PlayerList const &PlayerList = pMap->GetPlayers();
 
                     if (!PlayerList.isEmpty())
                         for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
@@ -528,23 +567,35 @@ public:
 
         // Selects a random Fire Cyclone and makes it cast Lava Strike.
         // FIXME: Frequency of the casts reduced to compensate 100% chance of spawning a Lava Blaze add
-        void CastLavaStrikeOnTarget(Unit* target)
+        void CastLavaStrikeOnTarget(Unit* target,bool summon)
         {
-            std::list<Creature*> pFireCyclonesList;
-            Trinity::AllCreaturesOfEntryInRange checker(me, NPC_FIRE_CYCLONE, 200.0f);
-            Trinity::CreatureListSearcher<Trinity::AllCreaturesOfEntryInRange> searcher(me, pFireCyclonesList, checker);
-            me->VisitNearbyObject(200.0f, searcher);
+            if(m_guidFireCyclone == 0)
+            {
+                std::list<Creature*> pFireCyclonesList;
+                Trinity::AllCreaturesOfEntryInRange checker(me, NPC_FIRE_CYCLONE, 200.0f);
+                Trinity::CreatureListSearcher<Trinity::AllCreaturesOfEntryInRange> searcher(me, pFireCyclonesList, checker);
+                me->VisitNearbyObject(200.0f, searcher);
 
-            if (pFireCyclonesList.empty())
-                return;
+                if(pFireCyclonesList.empty())
+                    return;
 
-            std::list<Creature*>::iterator itr = pFireCyclonesList.begin();
-            uint32 rnd = rand()%pFireCyclonesList.size();
+                std::list<Creature*>::iterator itr = pFireCyclonesList.begin();
+                uint32 rnd = rand()%pFireCyclonesList.size();
 
-            for (uint32 i = 0; i < rnd; ++i)
-                ++itr;
+                for(uint32 i = 0; i < rnd; ++i)
+                    ++itr;
 
-            (*itr)->CastSpell(target, SPELL_LAVA_STRIKE, true);
+                (*itr)->CastSpell((*itr), SPELL_LAVA_STRIKE_TRIGGER, true);
+                m_guidFireCyclone = (*itr)->GetGUID();
+            }
+
+            if(Creature* LavaCyclon = Creature::GetCreature((*me),m_guidFireCyclone))
+            {
+                if(summon)
+                    LavaCyclon->CastSpell(target, SPELL_LAVA_STRIKE_SUMMON, true);
+                else
+                    LavaCyclon->CastSpell(target, SPELL_LAVA_STRIKE_DAMAGE, true);
+            }
         }
 
         void UpdateAI(const uint32 uiDiff)
@@ -553,9 +604,9 @@ public:
             if (!UpdateVictim())
                 return;
 
-            Unit* pTene = Unit::GetUnit(*me, instance ? instance->GetData64(DATA_TENEBRON) : 0);
-            Unit* pShad = Unit::GetUnit(*me, instance ? instance->GetData64(DATA_SHADRON) : 0);
-            Unit* pVesp = Unit::GetUnit(*me, instance ? instance->GetData64(DATA_VESPERON) : 0);
+            Unit* pTene = Unit::GetUnit(*me, pInstance ? pInstance->GetData64(DATA_TENEBRON) : 0);
+            Unit* pShad = Unit::GetUnit(*me, pInstance ? pInstance->GetData64(DATA_SHADRON) : 0);
+            Unit* pVesp = Unit::GetUnit(*me, pInstance ? pInstance->GetData64(DATA_VESPERON) : 0);
 
             //spell will target dragons, if they are still alive at 35%
             if (!m_bIsBerserk && !HealthAbovePct(35)
@@ -566,6 +617,8 @@ public:
                 m_bIsBerserk = true;
             }
 
+            EnterEvadeIfOutOfCombatArea(uiDiff);
+
             //soft enrage
             if (!m_bIsSoftEnraged && HealthBelowPct(10))
             {
@@ -589,24 +642,24 @@ public:
             if (m_uiFlameTsunamiTimer <= uiDiff)
             {
                 SendFlameTsunami();
-                switch (urand(0, 1))
+                switch(urand(0,1))
                 {
                     case 0:
                     {
-                        Creature* Right1 = me->SummonCreature(NPC_FLAME_TSUNAMI, FlameRight1Spawn.x, FlameRight1Spawn.y, FlameRight1Spawn.z, 0, TEMPSUMMON_TIMED_DESPAWN, 12000);
-                        Creature* Right2 = me->SummonCreature(NPC_FLAME_TSUNAMI, FlameRight2Spawn.x, FlameRight2Spawn.y, FlameRight2Spawn.z, 0, TEMPSUMMON_TIMED_DESPAWN, 12000);
-                        Creature* Right3 = me->SummonCreature(NPC_FLAME_TSUNAMI, FlameRight3Spawn.x, FlameRight3Spawn.y, FlameRight3Spawn.z, 0, TEMPSUMMON_TIMED_DESPAWN, 12000);
-                        Right1->GetMotionMaster()->MovePoint(0, FlameRight1Direction.x, FlameRight1Direction.y, FlameRight1Direction.z);
-                        Right2->GetMotionMaster()->MovePoint(0, FlameRight2Direction.x, FlameRight2Direction.y, FlameRight2Direction.z);
-                        Right3->GetMotionMaster()->MovePoint(0, FlameRight3Direction.x, FlameRight3Direction.y, FlameRight3Direction.z);
+                        Creature *Right1 = DoSummon(NPC_FLAME_TSUNAMI, FlameRight1Spawn, 12000, TEMPSUMMON_TIMED_DESPAWN);
+                        Creature *Right2 = DoSummon(NPC_FLAME_TSUNAMI, FlameRight2Spawn, 12000, TEMPSUMMON_TIMED_DESPAWN);
+                        Creature *Right3 = DoSummon(NPC_FLAME_TSUNAMI, FlameRight3Spawn, 12000, TEMPSUMMON_TIMED_DESPAWN);
+                        Right1->AI()->DoAction(ACTION_MOVE_RIGHT_1);
+                        Right2->AI()->DoAction(ACTION_MOVE_RIGHT_2);
+                        Right3->AI()->DoAction(ACTION_MOVE_RIGHT_3);
                         break;
                     }
                     case 1:
                     {
-                        Creature* Left1 = me->SummonCreature(NPC_FLAME_TSUNAMI, FlameLeft1Spawn.x, FlameLeft1Spawn.y, FlameLeft1Spawn.z, 0, TEMPSUMMON_TIMED_DESPAWN, 12000);
-                        Creature* Left2 = me->SummonCreature(NPC_FLAME_TSUNAMI, FlameLeft2Spawn.x, FlameLeft2Spawn.y, FlameLeft2Spawn.z, 0, TEMPSUMMON_TIMED_DESPAWN, 12000);
-                        Left1->GetMotionMaster()->MovePoint(0, FlameLeft1Direction.x, FlameLeft1Direction.y, FlameLeft1Direction.z);
-                        Left2->GetMotionMaster()->MovePoint(0, FlameLeft2Direction.x, FlameLeft2Direction.y, FlameLeft2Direction.z);
+                        Creature *Left1 = DoSummon(NPC_FLAME_TSUNAMI, FlameLeft1Spawn, 12000, TEMPSUMMON_TIMED_DESPAWN);
+                        Creature *Left2 = DoSummon(NPC_FLAME_TSUNAMI, FlameLeft2Spawn, 12000, TEMPSUMMON_TIMED_DESPAWN);
+                        Left1->AI()->DoAction(ACTION_MOVE_LEFT_1);
+                        Left2->AI()->DoAction(ACTION_MOVE_LEFT_2);
                         break;
                     }
                 }
@@ -619,72 +672,86 @@ public:
             // flame breath
             if (m_uiFlameBreathTimer <= uiDiff)
             {
-                DoScriptText(SAY_SARTHARION_BREATH, me);
-                DoCast(me->getVictim(), RAID_MODE(SPELL_FLAME_BREATH, SPELL_FLAME_BREATH_H));
-                m_uiFlameBreathTimer = urand(25000, 35000);
-            }
-            else
-                m_uiFlameBreathTimer -= uiDiff;
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    DoScriptText(SAY_SARTHARION_BREATH, me);
+                    DoCast(me->getVictim(), RAID_MODE(SPELL_FLAME_BREATH, SPELL_FLAME_BREATH_H));
+                    m_uiFlameBreathTimer = urand(15000,30000);
+                }
+            }else m_uiFlameBreathTimer -= uiDiff;
 
             // Tail Sweep
             if (m_uiTailSweepTimer <= uiDiff)
             {
-                DoCast(me->getVictim(), RAID_MODE(SPELL_TAIL_LASH, SPELL_TAIL_LASH_H));
-                m_uiTailSweepTimer = urand(15000, 20000);
-            }
-            else
-                m_uiTailSweepTimer -= uiDiff;
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    DoCast(RAID_MODE(SPELL_TAIL_LASH, SPELL_TAIL_LASH_H));
+                    m_uiTailSweepTimer = urand(10000,20000);
+                }
+            }else m_uiTailSweepTimer -= uiDiff;
 
             // Cleave
             if (m_uiCleaveTimer <= uiDiff)
             {
-                DoCast(me->getVictim(), SPELL_CLEAVE);
-                m_uiCleaveTimer = urand(7000, 10000);
-            }
-            else
-                m_uiCleaveTimer -= uiDiff;
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    DoCast(me->getVictim(), SPELL_CLEAVE);
+                    m_uiCleaveTimer = urand(7000,10000);
+                }
+            }else m_uiCleaveTimer -= uiDiff;
 
             // Lavas Strike
             if (m_uiLavaStrikeTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                if(m_FireCycloneFireing)
                 {
-                    CastLavaStrikeOnTarget(target);
-
-                    if (urand(0, 5) == 0)
-                        DoScriptText(RAND(SAY_SARTHARION_SPECIAL_1, SAY_SARTHARION_SPECIAL_2, SAY_SARTHARION_SPECIAL_3), me);
+                    if (Unit *pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        if(m_uifireCount < 10)
+                        {
+                            CastLavaStrikeOnTarget(pTarget,false);
+                            m_uiLavaStrikeTimer = 1000;
+                        }else
+                        {
+                            CastLavaStrikeOnTarget(pTarget,true);
+                            m_FireCycloneFireing = false;
+                            m_guidFireCyclone = 0;
+                            m_uiLavaStrikeTimer = (m_bIsSoftEnraged ? urand(1400, 2000) : urand(10000,20000));
+                        }
+                    m_uifireCount++;
+                }else
+                {
+                    m_uifireCount = 0;
+                    m_FireCycloneFireing = true;
+                    if(urand(0,5) == 0)
+                        DoScriptText(RAND(SAY_SARTHARION_SPECIAL_1,SAY_SARTHARION_SPECIAL_2,SAY_SARTHARION_SPECIAL_3), me);
+                    m_uiLavaStrikeTimer = (1000);
                 }
-                m_uiLavaStrikeTimer = (m_bIsSoftEnraged ? urand(1400, 2000) : urand(5000, 20000));
-            }
-            else
-                m_uiLavaStrikeTimer -= uiDiff;
+            }else m_uiLavaStrikeTimer -= uiDiff;
 
             // call tenebron
             if (!m_bHasCalledTenebron && m_uiTenebronTimer <= uiDiff)
             {
                 CallDragon(DATA_TENEBRON);
                 m_bHasCalledTenebron = true;
-            }
-            else
-                m_uiTenebronTimer -= uiDiff;
+            }else m_uiTenebronTimer -= uiDiff;
 
             // call shadron
             if (!m_bHasCalledShadron && m_uiShadronTimer <= uiDiff)
             {
                 CallDragon(DATA_SHADRON);
                 m_bHasCalledShadron = true;
-            }
-            else
-                m_uiShadronTimer -= uiDiff;
+            }else m_uiShadronTimer -= uiDiff;
 
             // call vesperon
             if (!m_bHasCalledVesperon && m_uiVesperonTimer <= uiDiff)
             {
                 CallDragon(DATA_VESPERON);
                 m_bHasCalledVesperon = true;
-            }
-            else
-                m_uiVesperonTimer -= uiDiff;
+            }else m_uiVesperonTimer -= uiDiff;
+
+            // Don't attack current target if he's not visible for us.
+            //if(me->getVictim() && me->getVictim()->HasAuraEffect(SPELL_TWILIGHT_SHIFT_ENTER, 0))
+            //    me->getThreatManager().modifyThreatPercent(me->getVictim(), -100);
 
             DoMeleeAttackIfReady();
 
@@ -730,49 +797,54 @@ enum VespText
     SAY_VESPERON_SPECIAL_2                  = -1615040
 };
 
+enum DragonAction
+{
+    ACTION_CLOSE_PORTAL
+};
+
 //to control each dragons common abilities
 struct dummy_dragonAI : public ScriptedAI
 {
-    dummy_dragonAI(Creature* creature) : ScriptedAI(creature)
+    dummy_dragonAI(Creature* pCreature) : ScriptedAI(pCreature)
     {
-        instance = creature->GetInstanceScript();
+        pInstance = pCreature->GetInstanceScript();
     }
 
-    InstanceScript* instance;
+    InstanceScript* pInstance;
 
     uint32 m_uiWaypointId;
     uint32 m_uiMoveNextTimer;
     int32 m_iPortalRespawnTime;
     bool m_bCanMoveFree;
-    bool m_bCanLoot;
+
+    uint64 m_guidPortal;
 
     void Reset()
     {
         if (me->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE))
             me->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
 
+        ClosePortal();
+
         m_uiWaypointId = 0;
         m_uiMoveNextTimer = 500;
         m_iPortalRespawnTime = 30000;
         m_bCanMoveFree = false;
-        m_bCanLoot = true;
-    }
 
-    void SetData(uint32 type, uint32 value)
-    {
-        if (type == DATA_CAN_LOOT)
-            m_bCanLoot = value;
+        m_guidPortal = 0;
+
+        me->ResetLootMode();
     }
 
     void MovementInform(uint32 uiType, uint32 uiPointId)
     {
-        if (!instance || uiType != POINT_MOTION_TYPE)
+        if (!pInstance || uiType != POINT_MOTION_TYPE)
             return;
 
 //        debug_log("dummy_dragonAI: %s reached point %u", me->GetName(), uiPointId);
 
         //if healers messed up the raid and we was already initialized
-        if (instance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+        if (pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
         {
             EnterEvadeMode();
             return;
@@ -783,7 +855,7 @@ struct dummy_dragonAI : public ScriptedAI
         {
             me->GetMotionMaster()->Clear();
             me->SetInCombatWithZone();
-            if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
+            if(Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0, 0, true))
             {
                 me->AddThreat(target, 1.0f);
                 me->Attack(target, true);
@@ -815,11 +887,11 @@ struct dummy_dragonAI : public ScriptedAI
     //used when open portal and spawn mobs in phase
     void DoRaidWhisper(int32 iTextId)
     {
-        Map* map = me->GetMap();
+        Map* pMap = me->GetMap();
 
-        if (map && map->IsDungeon())
+        if (pMap && pMap->IsDungeon())
         {
-            Map::PlayerList const &PlayerList = map->GetPlayers();
+            Map::PlayerList const &PlayerList = pMap->GetPlayers();
 
             if (!PlayerList.isEmpty())
             {
@@ -829,6 +901,43 @@ struct dummy_dragonAI : public ScriptedAI
         }
     }
 
+    void JustSummoned(Creature* pSummoned)
+    {
+        switch(pSummoned->GetEntry())
+        {
+        case NPC_TWILIGHT_EGG:
+        case NPC_SARTHARION_TWILIGHT_EGG:
+        case NPC_ACOLYTE_OF_VESPERON:
+        case NPC_ACOLYTE_OF_SHADRON:
+            pSummoned->setFaction(me->getFaction());
+            break;
+        }
+    }
+
+    void RemovePhasingPlayer()
+    {
+        pInstance->DoRemoveAurasDueToSpellOnPlayers(SPELL_TWILIGHT_SHIFT_ENTER);
+        pInstance->DoRemoveAurasDueToSpellOnPlayers(SPELL_TWILIGHT_SHIFT);
+
+        //std::list<Player*> targets = me->GetNearestPlayersList(range,true);
+        //for (std::list<Player*>::const_iterator itr = targets.begin(); itr != targets.end(); ++itr)
+        //{
+        //    if((*itr))
+        //    {
+        //        if((*itr)->HasAuraEffect(SPELL_TWILIGHT_SHIFT_ENTER,0))
+        //        {
+        //            (*itr)->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT_ENTER);
+        //            (*itr)->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT);
+        //        }
+        //    }
+        //}
+    }
+
+    GameObject* DoSpawnGameobject(uint32 uiId, float fX, float fY, float fZ, float fAngle, uint32 uiDespawntime)
+    {
+        return me->SummonGameObject(uiId, me->GetPositionX()+fX, me->GetPositionY()+fY, me->GetPositionZ()+fZ, fAngle, 0,0,0,0, uiDespawntime);
+    }
+
     //"opens" the portal and does the "opening" whisper
     void OpenPortal()
     {
@@ -838,58 +947,80 @@ struct dummy_dragonAI : public ScriptedAI
 
         //using a grid search here seem to be more efficient than caching all four guids
         //in instance script and calculate range to each.
-        GameObject* pPortal = me->FindNearestGameObject(GO_TWILIGHT_PORTAL, 50.0f);
+        //GameObject* pPortal = me->FindNearestGameObject(GO_TWILIGHT_PORTAL,100.0f);
+        //if(!pPortal)
+        //{
+        //    sLog.outError("Cannot find Portal");
+        //    return;
+        //}
+
+        GameObject* pPortal = DoSpawnGameobject(GO_TWILIGHT_PORTAL,(float)(rand()%10),(float)(rand()%10),-1.0f,me->GetOrientation(),0);
+        if(pPortal)
+        {
+            pPortal->SetFlag(GAMEOBJECT_FACTION, 35);
+            pPortal->SetOwnerGUID(0);
+            pPortal->SetGoState(GO_STATE_ACTIVE);
+            pPortal->SetPhaseMask(17,true);
 
-        switch (me->GetEntry())
+            m_guidPortal = pPortal->GetGUID();
+
+        }
+
+        switch(me->GetEntry())
         {
             case NPC_TENEBRON:
             {
                 iTextId = WHISPER_HATCH_EGGS;
-                if (instance && !instance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
-                {
-                    for (uint32 i = 0; i < 6; ++i)
-                        me->SummonCreature(NPC_TWILIGHT_EGG, TwilightEggs[i].x, TwilightEggs[i].y, TwilightEggs[i].z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 20000);
-                }
-                else
+                if (pInstance)
                 {
-                    for (uint32 i = 0; i < 6; ++i)
-                        me->SummonCreature(NPC_SARTHARION_TWILIGHT_EGG, TwilightEggsSarth[i].x, TwilightEggsSarth[i].y, TwilightEggsSarth[i].z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 20000);
+                    if (pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+                    {
+                        for(uint32 i = 0; i < 6; ++i)
+                            DoSummon(NPC_TWILIGHT_EGG, TwilightEggs[i], 20000, TEMPSUMMON_CORPSE_TIMED_DESPAWN);
+                    }
+                    else
+                    {
+                        for(uint32 i = 0; i < 6; ++i)
+                            DoSummon(NPC_SARTHARION_TWILIGHT_EGG, TwilightEggsSarth[i], 20000, TEMPSUMMON_CORPSE_TIMED_DESPAWN);
+                    }
                 }
                 break;
             }
             case NPC_SHADRON:
             {
                 iTextId = WHISPER_OPEN_PORTAL;
-                if (instance && !instance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
-                    me->SummonCreature(NPC_ACOLYTE_OF_SHADRON, AcolyteofShadron.x, AcolyteofShadron.y, AcolyteofShadron.z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 28000);
-                else
-                    me->SummonCreature(NPC_ACOLYTE_OF_SHADRON, AcolyteofShadron2.x, AcolyteofShadron2.y, AcolyteofShadron2.z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 28000);
-
+                if(pInstance)
+                {
+                    if(pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+                        DoSummon(NPC_ACOLYTE_OF_SHADRON, AcolyteofShadron, 28000, TEMPSUMMON_CORPSE_TIMED_DESPAWN);
+                    else
+                        DoSummon(NPC_ACOLYTE_OF_SHADRON, AcolyteofShadron2, 28000, TEMPSUMMON_CORPSE_TIMED_DESPAWN);
+                }
                 break;
             }
             case NPC_VESPERON:
             {
                 iTextId = WHISPER_OPEN_PORTAL;
-                if (instance && !instance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
+                if (pInstance)
                 {
-                    if (Creature* Acolyte = me->SummonCreature(NPC_ACOLYTE_OF_VESPERON, AcolyteofVesperon.x, AcolyteofVesperon.y, AcolyteofVesperon.z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 20000))
+                    if (pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
                     {
-                        me->InterruptNonMeleeSpells(true);
-                        Acolyte->InterruptNonMeleeSpells(true);
-                        me->CastSpell(me, 32747, false);
+                        if(Creature* Acolyte = DoSummon(NPC_ACOLYTE_OF_VESPERON, AcolyteofVesperon, 20000, TEMPSUMMON_CORPSE_TIMED_DESPAWN))
+                        {
+                            me->InterruptNonMeleeSpells(true);
+                            Acolyte->InterruptNonMeleeSpells(true);
+                        }
                     }
-                }
-                else
-                {
-                    if (Creature* Acolyte = me->SummonCreature(NPC_ACOLYTE_OF_VESPERON, AcolyteofVesperon2.x, AcolyteofVesperon2.y, AcolyteofVesperon2.z, 0, TEMPSUMMON_CORPSE_TIMED_DESPAWN, 20000))
+                    else
                     {
-                        me->InterruptNonMeleeSpells(true);
-                        Acolyte->InterruptNonMeleeSpells(true);
-                        me->CastSpell(me, 32747, false);
+                        if(Creature* Acolyte = DoSummon(NPC_ACOLYTE_OF_VESPERON, AcolyteofVesperon2, 20000, TEMPSUMMON_CORPSE_TIMED_DESPAWN))
+                        {
+                            me->InterruptNonMeleeSpells(true);
+                            Acolyte->InterruptNonMeleeSpells(true);
+                        }
                     }
                 }
-
-                 break;
+                break;
             }
         }
 
@@ -897,44 +1028,61 @@ struct dummy_dragonAI : public ScriptedAI
 
         //By using SetRespawnTime() we will actually "spawn" the object with our defined time.
         //Once time is up, portal will disappear again.
-        if (pPortal && !pPortal->isSpawned())
-            pPortal->SetRespawnTime(m_iPortalRespawnTime);
+        //if (pPortal && !pPortal->isSpawned())
+        //    pPortal->SetRespawnTime(m_iPortalRespawnTime);
 
         //Unclear what are expected to happen if one drake has a portal open already
         //Refresh respawnTime so time again are set to 30secs?
     }
 
-    void JustDied(Unit* /*killer*/)
+    void ClosePortal()
+    {
+        RemovePhasingPlayer();
+
+        if(GameObject* pPortal = GameObject::GetGameObject((*me),m_guidPortal))
+        {
+            pPortal->SetOwnerGUID(me->GetGUID()); //Very important ... else Delete Crash Server
+            pPortal->Delete();
+        }
+        m_guidPortal = 0;
+    }
+
+
+    void JustDied(Unit* /*pKiller*/)
     {
-        if (!m_bCanLoot)
-            me->SetLootRecipient(NULL);
+        if(pInstance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
+            me->RemoveFlag(UNIT_DYNAMIC_FLAGS, UNIT_DYNFLAG_LOOTABLE);
 
         int32 iTextId = 0;
         uint32 uiSpellId = 0;
 
-        switch (me->GetEntry())
+        switch(me->GetEntry())
         {
             case NPC_TENEBRON:
                 iTextId = SAY_TENEBRON_DEATH;
                 uiSpellId = SPELL_POWER_OF_TENEBRON;
-                if (instance && instance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
-                    instance->SetData(TYPE_TENEBRON_PREKILLED, 1);
+                if(pInstance && pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+                    pInstance->SetData(TYPE_TENEBRON_PREKILLED, DONE);
                 break;
             case NPC_SHADRON:
                 iTextId = SAY_SHADRON_DEATH;
                 uiSpellId = SPELL_POWER_OF_SHADRON;
-                if (instance && instance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
-                    instance->SetData(TYPE_SHADRON_PREKILLED, 1);
-                if (Creature* pAcolyte = me->FindNearestCreature(NPC_ACOLYTE_OF_SHADRON, 100.0f))
+                if(pInstance && pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+                    pInstance->SetData(TYPE_SHADRON_PREKILLED, DONE);
+                if(Creature* pAcolyte = me->FindNearestCreature(NPC_ACOLYTE_OF_SHADRON, 100.0f))
+                {
                     pAcolyte->Kill(pAcolyte);
+                }
                 break;
             case NPC_VESPERON:
                 iTextId = SAY_VESPERON_DEATH;
                 uiSpellId = SPELL_POWER_OF_VESPERON;
-                if (instance && instance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
-                    instance->SetData(TYPE_VESPERON_PREKILLED, 1);
-                if (Creature* pAcolyte = me->FindNearestCreature(NPC_ACOLYTE_OF_VESPERON, 100.0f))
+                if(pInstance && pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+                    pInstance->SetData(TYPE_VESPERON_PREKILLED, DONE);
+                if(Creature* pAcolyte = me->FindNearestCreature(NPC_ACOLYTE_OF_VESPERON, 100.0f))
+                {
                     pAcolyte->Kill(pAcolyte);
+                }
                 break;
         }
 
@@ -942,16 +1090,19 @@ struct dummy_dragonAI : public ScriptedAI
 
         me->RemoveAurasDueToSpell(uiSpellId);
 
-        if (instance)
+        if (pInstance)
         {
-            instance->DoRemoveAurasDueToSpellOnPlayers(uiSpellId);
+            pInstance->DoRemoveAurasDueToSpellOnPlayers(uiSpellId);
 
             // not if solo mini-boss fight
-            if (instance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+            if (pInstance->GetData(TYPE_SARTHARION_EVENT) != IN_PROGRESS)
+            {
+                ClosePortal();
                 return;
+            }
 
             // Twilight Revenge to main boss
-            if (Unit* pSartharion = Unit::GetUnit(*me, instance->GetData64(DATA_SARTHARION)))
+            if (Unit* pSartharion = Unit::GetUnit((*me), pInstance->GetData64(DATA_SARTHARION)))
                 if (pSartharion->isAlive())
                 {
                     pSartharion->RemoveAurasDueToSpell(uiSpellId);
@@ -966,7 +1117,7 @@ struct dummy_dragonAI : public ScriptedAI
         {
             if (m_uiMoveNextTimer <= uiDiff)
             {
-                if (m_uiWaypointId < MAX_WAYPOINT)
+                if(m_uiWaypointId < MAX_WAYPOINT)
                     me->GetMotionMaster()->MovePoint(m_uiWaypointId,
                         m_aDragonCommon[m_uiWaypointId].m_fX, m_aDragonCommon[m_uiWaypointId].m_fY, m_aDragonCommon[m_uiWaypointId].m_fZ);
 
@@ -988,14 +1139,14 @@ class mob_tenebron : public CreatureScript
 public:
     mob_tenebron() : CreatureScript("mob_tenebron") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_tenebronAI(creature);
+        return new mob_tenebronAI(pCreature);
     }
 
     struct mob_tenebronAI : public dummy_dragonAI
     {
-        mob_tenebronAI(Creature* creature) : dummy_dragonAI(creature) {}
+        mob_tenebronAI(Creature* pCreature) : dummy_dragonAI(pCreature) {}
 
         uint32 m_uiShadowBreathTimer;
         uint32 m_uiShadowFissureTimer;
@@ -1012,15 +1163,27 @@ public:
             m_bHasPortalOpen = false;
         }
 
-        void EnterCombat(Unit* /*who*/)
+        void EnterCombat(Unit* /*pWho*/)
         {
             DoScriptText(SAY_TENEBRON_AGGRO, me);
             DoZoneInCombat();
+            DoCast(me, SPELL_POWER_OF_TENEBRON);
         }
 
-        void KilledUnit(Unit* /*victim*/)
+        void KilledUnit(Unit* /*pVictim*/)
         {
-            DoScriptText(RAND(SAY_TENEBRON_SLAY_1, SAY_TENEBRON_SLAY_2), me);
+            DoScriptText(RAND(SAY_TENEBRON_SLAY_1,SAY_TENEBRON_SLAY_2), me);
+        }
+
+        void DoAction(const int32 action)
+        {
+            switch(action)
+            {
+            case ACTION_CLOSE_PORTAL:
+                m_bHasPortalOpen = false;
+                ClosePortal();
+                break;
+            }
         }
 
         void UpdateAI(const uint32 uiDiff)
@@ -1035,10 +1198,13 @@ public:
             // shadow fissure
             if (m_uiShadowFissureTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
-                    DoCast(target, RAID_MODE(SPELL_SHADOW_FISSURE, SPELL_SHADOW_FISSURE));
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    if (Unit *pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        DoCast(pTarget, RAID_MODE(SPELL_SHADOW_FISSURE, SPELL_SHADOW_FISSURE));
 
-                m_uiShadowFissureTimer = urand(15000, 20000);
+                    m_uiShadowFissureTimer = urand(15000,20000);
+                }
             }
             else
                 m_uiShadowFissureTimer -= uiDiff;
@@ -1055,13 +1221,20 @@ public:
             // shadow breath
             if (m_uiShadowBreathTimer <= uiDiff)
             {
-                DoScriptText(SAY_TENEBRON_BREATH, me);
-                DoCast(me->getVictim(), RAID_MODE(SPELL_SHADOW_BREATH, SPELL_SHADOW_BREATH_H));
-                m_uiShadowBreathTimer = urand(20000, 25000);
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    DoScriptText(SAY_TENEBRON_BREATH, me);
+                    DoCast(me->getVictim(), RAID_MODE(SPELL_SHADOW_BREATH, SPELL_SHADOW_BREATH_H));
+                    m_uiShadowBreathTimer = urand(20000,25000);
+                }
             }
             else
                 m_uiShadowBreathTimer -= uiDiff;
 
+            // Don't attack current target if he's not visible for us.
+            //if(me->getVictim() && me->getVictim()->HasAuraEffect(SPELL_TWILIGHT_SHIFT_ENTER, 0))
+            //    me->getThreatManager().modifyThreatPercent(me->getVictim(), -100);
+
             DoMeleeAttackIfReady();
         }
     };
@@ -1077,14 +1250,14 @@ class mob_shadron : public CreatureScript
 public:
     mob_shadron() : CreatureScript("mob_shadron") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_shadronAI(creature);
+        return new mob_shadronAI(pCreature);
     }
 
     struct mob_shadronAI : public dummy_dragonAI
     {
-        mob_shadronAI(Creature* creature) : dummy_dragonAI(creature) {}
+        mob_shadronAI(Creature* pCreature) : dummy_dragonAI(pCreature) {}
 
         uint32 m_uiShadowBreathTimer;
         uint32 m_uiShadowFissureTimer;
@@ -1096,7 +1269,7 @@ public:
         {
             m_uiShadowBreathTimer = 20000;
             m_uiShadowFissureTimer = 5000;
-            m_uiAcolyteShadronTimer = 60000;
+            m_uiAcolyteShadronTimer = 30000;
 
             if (me->HasAura(SPELL_TWILIGHT_TORMENT_VESP))
                 me->RemoveAurasDueToSpell(SPELL_TWILIGHT_TORMENT_VESP);
@@ -1107,15 +1280,27 @@ public:
             m_bHasPortalOpen = false;
         }
 
-        void EnterCombat(Unit* /*who*/)
+        void EnterCombat(Unit* /*pWho*/)
         {
-            DoScriptText(SAY_SHADRON_AGGRO, me);
+            DoScriptText(SAY_SHADRON_AGGRO,me);
             DoZoneInCombat();
+            DoCast(me, SPELL_POWER_OF_SHADRON);
+        }
+
+        void KilledUnit(Unit* /*pVictim*/)
+        {
+            DoScriptText(RAND(SAY_SHADRON_SLAY_1,SAY_SHADRON_SLAY_2), me);
         }
 
-        void KilledUnit(Unit* /*victim*/)
+        void DoAction(const int32 action)
         {
-            DoScriptText(RAND(SAY_SHADRON_SLAY_1, SAY_SHADRON_SLAY_2), me);
+            switch(action)
+            {
+            case ACTION_CLOSE_PORTAL:
+                m_bHasPortalOpen = false;
+                ClosePortal();
+                break;
+            }
         }
 
         void UpdateAI(const uint32 uiDiff)
@@ -1130,10 +1315,13 @@ public:
             // shadow fissure
             if (m_uiShadowFissureTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
-                    DoCast(target, RAID_MODE(SPELL_SHADOW_FISSURE, SPELL_SHADOW_FISSURE_H));
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    if (Unit *pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        DoCast(pTarget, RAID_MODE(SPELL_SHADOW_FISSURE, SPELL_SHADOW_FISSURE_H));
 
-                m_uiShadowFissureTimer = urand(15000, 20000);
+                    m_uiShadowFissureTimer = urand(15000,20000);
+                }
             }
             else
                 m_uiShadowFissureTimer -= uiDiff;
@@ -1141,7 +1329,7 @@ public:
             // Portal Event
             if (m_uiAcolyteShadronTimer <= uiDiff)
             {
-                if (m_bHasPortalOpen)
+                if(m_bHasPortalOpen)
                     m_uiAcolyteShadronTimer = 10000;
                 else
                 {
@@ -1150,7 +1338,7 @@ public:
 
                     OpenPortal();
                     m_bHasPortalOpen = true;
-                    m_uiAcolyteShadronTimer = urand(60000, 65000);
+                    m_uiAcolyteShadronTimer = urand(60000,65000);
                 }
             }
             else
@@ -1159,13 +1347,20 @@ public:
             // shadow breath
             if (m_uiShadowBreathTimer <= uiDiff)
             {
-                DoScriptText(SAY_SHADRON_BREATH, me);
-                DoCast(me->getVictim(), RAID_MODE(SPELL_SHADOW_BREATH, SPELL_SHADOW_BREATH_H));
-                m_uiShadowBreathTimer = urand(20000, 25000);
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    DoScriptText(SAY_SHADRON_BREATH, me);
+                    DoCast(me->getVictim(), RAID_MODE(SPELL_SHADOW_BREATH, SPELL_SHADOW_BREATH_H));
+                    m_uiShadowBreathTimer = urand(20000,25000);
+                }
             }
             else
                 m_uiShadowBreathTimer -= uiDiff;
 
+            // Don't attack current target if he's not visible for us.
+            //if(me->getVictim() && me->getVictim()->HasAuraEffect(SPELL_TWILIGHT_SHIFT_ENTER, 0))
+            //    me->getThreatManager().modifyThreatPercent(me->getVictim(), -100);
+
             DoMeleeAttackIfReady();
         }
     };
@@ -1181,14 +1376,14 @@ class mob_vesperon : public CreatureScript
 public:
     mob_vesperon() : CreatureScript("mob_vesperon") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_vesperonAI(creature);
+        return new mob_vesperonAI(pCreature);
     }
 
     struct mob_vesperonAI : public dummy_dragonAI
     {
-        mob_vesperonAI(Creature* creature) : dummy_dragonAI(creature) {}
+        mob_vesperonAI(Creature* pCreature) : dummy_dragonAI(pCreature) {}
 
         uint32 m_uiShadowBreathTimer;
         uint32 m_uiShadowFissureTimer;
@@ -1200,20 +1395,32 @@ public:
         {
             m_uiShadowBreathTimer = 20000;
             m_uiShadowFissureTimer = 5000;
-            m_uiAcolyteVesperonTimer = 60000;
+            m_uiAcolyteVesperonTimer = 30000;
 
             m_bHasPortalOpen = false;
         }
 
-        void EnterCombat(Unit* /*who*/)
+        void EnterCombat(Unit* /*pWho*/)
         {
-            DoScriptText(SAY_VESPERON_AGGRO, me);
+            DoScriptText(SAY_VESPERON_AGGRO,me);
             DoZoneInCombat();
+            DoCast(me, SPELL_POWER_OF_VESPERON);
+        }
+
+        void KilledUnit(Unit* /*pVictim*/)
+        {
+            DoScriptText(RAND(SAY_VESPERON_SLAY_1,SAY_VESPERON_SLAY_2), me);
         }
 
-        void KilledUnit(Unit* /*victim*/)
+        void DoAction(const int32 action)
         {
-            DoScriptText(RAND(SAY_VESPERON_SLAY_1, SAY_VESPERON_SLAY_2), me);
+            switch(action)
+            {
+            case ACTION_CLOSE_PORTAL:
+                m_bHasPortalOpen = false;
+                ClosePortal();
+                break;
+            }
         }
 
         void UpdateAI(const uint32 uiDiff)
@@ -1228,10 +1435,13 @@ public:
             // shadow fissure
             if (m_uiShadowFissureTimer <= uiDiff)
             {
-                if (Unit* target = SelectTarget(SELECT_TARGET_RANDOM, 0))
-                    DoCast(target, RAID_MODE(SPELL_SHADOW_FISSURE, SPELL_SHADOW_FISSURE_H));
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    if (Unit *pTarget = SelectTarget(SELECT_TARGET_RANDOM, 0))
+                        DoCast(pTarget, RAID_MODE(SPELL_SHADOW_FISSURE, SPELL_SHADOW_FISSURE_H));
 
-                m_uiShadowFissureTimer = urand(15000, 20000);
+                    m_uiShadowFissureTimer = urand(15000,20000);
+                }
             }
             else
                 m_uiShadowFissureTimer -= uiDiff;
@@ -1239,13 +1449,13 @@ public:
             // Portal Event
             if (m_uiAcolyteVesperonTimer <= uiDiff)
             {
-                if (m_bHasPortalOpen)
+                if(m_bHasPortalOpen)
                     m_uiAcolyteVesperonTimer = 10000;
                 else
                 {
                     OpenPortal();
-                    DoCast(me->getVictim(), SPELL_TWILIGHT_TORMENT_VESP);
-                    m_uiAcolyteVesperonTimer = urand(60000, 70000);
+                    DoCast(me->getVictim(), SPELL_TWILIGHT_TORMENT_VESP,true);
+                    m_uiAcolyteVesperonTimer = urand(60000,70000);
                 }
             }
             else
@@ -1254,13 +1464,20 @@ public:
             // shadow breath
             if (m_uiShadowBreathTimer <= uiDiff)
             {
-                DoScriptText(SAY_VESPERON_BREATH, me);
-                DoCast(me->getVictim(), RAID_MODE(SPELL_SHADOW_BREATH, SPELL_SHADOW_BREATH_H));
-                m_uiShadowBreathTimer = urand(20000, 25000);
+                if(!me->IsNonMeleeSpellCasted(false))
+                {
+                    DoScriptText(SAY_VESPERON_BREATH, me);
+                    DoCast(me->getVictim(), RAID_MODE(SPELL_SHADOW_BREATH, SPELL_SHADOW_BREATH_H));
+                    m_uiShadowBreathTimer = urand(20000,25000);
+                }
             }
             else
                 m_uiShadowBreathTimer -= uiDiff;
 
+            // Don't attack current target if he's not visible for us.
+            //if(me->getVictim() && me->getVictim()->HasAuraEffect(SPELL_TWILIGHT_SHIFT_ENTER, 0))
+            //    me->getThreatManager().modifyThreatPercent(me->getVictim(), -100);
+
             DoMeleeAttackIfReady();
         }
     };
@@ -1276,54 +1493,54 @@ class mob_acolyte_of_shadron : public CreatureScript
 public:
     mob_acolyte_of_shadron() : CreatureScript("mob_acolyte_of_shadron") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_acolyte_of_shadronAI(creature);
+        return new mob_acolyte_of_shadronAI(pCreature);
     }
 
     struct mob_acolyte_of_shadronAI : public ScriptedAI
     {
-        mob_acolyte_of_shadronAI(Creature* creature) : ScriptedAI(creature)
+        mob_acolyte_of_shadronAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
-            instance = creature->GetInstanceScript();
+            pInstance = pCreature->GetInstanceScript();
         }
 
-        InstanceScript* instance;
+        InstanceScript* pInstance;
         uint32 uiDespawnTimer;
 
         void Reset()
         {
             uiDespawnTimer = 28000;
-            if (instance)
+            if (pInstance)
             {
-                Creature* target = NULL;
+                Creature* pTarget = NULL;
                 //if not solo figth, buff main boss, else place debuff on mini-boss. both spells TARGET_SCRIPT
-                if (instance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
+                if (pInstance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
                 {
-                    target = Unit::GetCreature((*me), instance->GetData64(DATA_SARTHARION));
-                    if (target)
-                        target->AddAura(SPELL_GIFT_OF_TWILIGTH_SAR, target);
+                    pTarget = Unit::GetCreature((*me), pInstance->GetData64(DATA_SARTHARION));
+                    if (pTarget)
+                        pTarget->AddAura(SPELL_GIFT_OF_TWILIGTH_SAR, pTarget);
                 }
                 else
                 {
-                    target = Unit::GetCreature((*me), instance->GetData64(DATA_SHADRON));
-                    if (target)
-                        target->AddAura(SPELL_GIFT_OF_TWILIGTH_SHA, target);
+                    pTarget = Unit::GetCreature((*me), pInstance->GetData64(DATA_SHADRON));
+                    if (pTarget)
+                        pTarget->AddAura(SPELL_GIFT_OF_TWILIGTH_SHA, pTarget);
                 }
             }
 
-            me->AddAura(SPELL_TWILIGHT_SHIFT_ENTER, me);
+            me->SetPhaseMask(16,true);
+
+            //me->AddAura(SPELL_TWILIGHT_SHIFT_ENTER,me);
         }
 
         void JustDied(Unit* /*killer*/)
         {
-            if (instance)
+            if (pInstance)
             {
-                Creature* Shadron = instance->instance->GetCreature(instance->GetData64(DATA_SHADRON));
-                if (Shadron)
-                {
-                    (CAST_AI(mob_shadron::mob_shadronAI, Shadron->AI()))->m_bHasPortalOpen = false;
-                }
+                Creature* Shadron = pInstance->instance->GetCreature(pInstance->GetData64(DATA_SHADRON));
+                if(Shadron)
+                    Shadron->AI()->DoAction(ACTION_CLOSE_PORTAL);
 
                 Creature* pDebuffTarget = NULL;
                 Map* map = me->GetMap();
@@ -1336,10 +1553,10 @@ public:
 
                     for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
                     {
-                        if (i->getSource()->isAlive() && i->getSource()->HasAura(SPELL_TWILIGHT_SHIFT, 0) && !i->getSource()->getVictim())
+                        if (i->getSource()->isAlive() && i->getSource()->HasAura(SPELL_TWILIGHT_SHIFT,0) && !i->getSource()->getVictim())
                         {
-                            i->getSource()->CastSpell(i->getSource(), SPELL_TWILIGHT_SHIFT_REMOVAL_ALL, true);
-                            i->getSource()->CastSpell(i->getSource(), SPELL_TWILIGHT_RESIDUE, true);
+                            i->getSource()->CastSpell(i->getSource(),SPELL_TWILIGHT_SHIFT_REMOVAL_ALL,true);
+                            i->getSource()->CastSpell(i->getSource(),SPELL_TWILIGHT_RESIDUE,true);
                             i->getSource()->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT);
                             i->getSource()->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT_ENTER);
                         }
@@ -1347,12 +1564,12 @@ public:
                 }
 
                 //not solo fight, so main boss has deduff
-                pDebuffTarget = instance->instance->GetCreature(instance->GetData64(DATA_SARTHARION));
+                pDebuffTarget = pInstance->instance->GetCreature(pInstance->GetData64(DATA_SARTHARION));
                 if (pDebuffTarget && pDebuffTarget->isAlive() && pDebuffTarget->HasAura(SPELL_GIFT_OF_TWILIGTH_SAR))
                     pDebuffTarget->RemoveAurasDueToSpell(SPELL_GIFT_OF_TWILIGTH_SAR);
 
                 //event not in progress, then solo fight and must remove debuff mini-boss
-                pDebuffTarget = instance->instance->GetCreature(instance->GetData64(DATA_SHADRON));
+                pDebuffTarget = pInstance->instance->GetCreature(pInstance->GetData64(DATA_SHADRON));
                 if (pDebuffTarget && pDebuffTarget->isAlive() && pDebuffTarget->HasAura(SPELL_GIFT_OF_TWILIGTH_SHA))
                     pDebuffTarget->RemoveAurasDueToSpell(SPELL_GIFT_OF_TWILIGTH_SHA);
             }
@@ -1360,7 +1577,7 @@ public:
 
         void UpdateAI(const uint32 uiDiff)
         {
-            if (uiDespawnTimer < uiDiff)
+            if(uiDespawnTimer < uiDiff)
             {
                 me->SetVisible(false);
                 me->Kill(me);
@@ -1386,44 +1603,45 @@ class mob_acolyte_of_vesperon : public CreatureScript
 public:
     mob_acolyte_of_vesperon() : CreatureScript("mob_acolyte_of_vesperon") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_acolyte_of_vesperonAI(creature);
+        return new mob_acolyte_of_vesperonAI(pCreature);
     }
 
     struct mob_acolyte_of_vesperonAI : public ScriptedAI
     {
-        mob_acolyte_of_vesperonAI(Creature* creature) : ScriptedAI(creature)
+        mob_acolyte_of_vesperonAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
-            instance = creature->GetInstanceScript();
+            pInstance = pCreature->GetInstanceScript();
         }
 
-        InstanceScript* instance;
+        InstanceScript* pInstance;
         uint32 uiDespawnTimer;
 
         void Reset()
         {
             uiDespawnTimer = 28000;
-            if (instance)
+            if (pInstance)
             {
-                me->AddAura(SPELL_TWILIGHT_SHIFT_ENTER, me);
+                me->SetPhaseMask(16,true);
+                //me->AddAura(SPELL_TWILIGHT_SHIFT_ENTER,me);
             }
             DoCast(me, SPELL_TWILIGHT_TORMENT_VESP_ACO);
         }
 
-        void JustDied(Unit* /*killer*/)
+        void JustDied(Unit* /*pKiller*/)
         {
             me->RemoveAurasDueToSpell(SPELL_TWILIGHT_TORMENT_VESP_ACO);
 
             // remove twilight torment on Vesperon
-            if (instance)
+            if (pInstance)
             {
-                Creature* pVesperon = instance->instance->GetCreature(instance->GetData64(DATA_VESPERON));
+                Creature* pVesperon = pInstance->instance->GetCreature(pInstance->GetData64(DATA_VESPERON));
                 if (pVesperon)
-                    (CAST_AI(mob_vesperon::mob_vesperonAI, pVesperon->AI()))->m_bHasPortalOpen = false;
-
-                if (pVesperon && pVesperon->isAlive() && pVesperon->HasAura(SPELL_TWILIGHT_TORMENT_VESP))
+                {
+                    pVesperon->AI()->DoAction(ACTION_CLOSE_PORTAL);
                     pVesperon->RemoveAurasDueToSpell(SPELL_TWILIGHT_TORMENT_VESP);
+                }
 
                 Map* map = me->GetMap();
                 if (map->IsDungeon())
@@ -1435,27 +1653,25 @@ public:
 
                     for (Map::PlayerList::const_iterator i = PlayerList.begin(); i != PlayerList.end(); ++i)
                     {
-                        if (i->getSource()->isAlive() && i->getSource()->HasAura(SPELL_TWILIGHT_SHIFT, 0) && !i->getSource()->getVictim())
+                        if (i->getSource()->isAlive() && i->getSource()->HasAura(SPELL_TWILIGHT_SHIFT_ENTER,0))
                         {
-                            i->getSource()->CastSpell(i->getSource(), SPELL_TWILIGHT_SHIFT_REMOVAL_ALL, true);
-                            i->getSource()->CastSpell(i->getSource(), SPELL_TWILIGHT_RESIDUE, true);
                             i->getSource()->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT);
                             i->getSource()->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT_ENTER);
                         }
-                        if (i->getSource()->isAlive() && i->getSource()->HasAura(SPELL_TWILIGHT_TORMENT_VESP, 0) && !i->getSource()->getVictim())
+                        if (i->getSource()->isAlive() && i->getSource()->HasAura(SPELL_TWILIGHT_TORMENT_VESP,0))
                             i->getSource()->RemoveAurasDueToSpell(SPELL_TWILIGHT_TORMENT_VESP);
                     }
                 }
 
-                instance->DoRemoveAurasDueToSpellOnPlayers(SPELL_TWILIGHT_TORMENT_VESP_ACO);
-                instance->DoRemoveAurasDueToSpellOnPlayers(57935);
-                instance->DoRemoveAurasDueToSpellOnPlayers(58835); // Components of spell Twilight Torment
+                pInstance->DoRemoveAurasDueToSpellOnPlayers(SPELL_TWILIGHT_TORMENT_VESP_ACO);
+                pInstance->DoRemoveAurasDueToSpellOnPlayers(57935);
+                pInstance->DoRemoveAurasDueToSpellOnPlayers(58835); // Components of spell Twilight Torment
             }
         }
 
         void UpdateAI(const uint32 uiDiff)
         {
-            if (uiDespawnTimer < uiDiff)
+            if(uiDespawnTimer < uiDiff)
             {
                 me->SetVisible(false);
                 me->Kill(me);
@@ -1481,28 +1697,29 @@ class mob_twilight_eggs : public CreatureScript
 public:
     mob_twilight_eggs() : CreatureScript("mob_twilight_eggs") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_twilight_eggsAI(creature);
+        return new mob_twilight_eggsAI(pCreature);
     }
 
     struct mob_twilight_eggsAI : public Scripted_NoMovementAI
     {
-        mob_twilight_eggsAI(Creature* creature) : Scripted_NoMovementAI(creature)
+        mob_twilight_eggsAI(Creature* pCreature) : Scripted_NoMovementAI(pCreature)
         {
-            instance = creature->GetInstanceScript();
+            pInstance = pCreature->GetInstanceScript();
         }
 
         uint32 m_uiFadeArmorTimer;
         uint32 m_uiHatchEggTimer;
 
-        InstanceScript* instance;
+        InstanceScript* pInstance;
 
         void Reset()
         {
-            if (instance)
+            if(pInstance)
             {
-                me->AddAura(SPELL_TWILIGHT_SHIFT_ENTER, me);
+                me->SetPhaseMask(16,true);
+                //me->AddAura(SPELL_TWILIGHT_SHIFT_ENTER,me);
             }
             m_uiFadeArmorTimer = 1000;
             m_uiHatchEggTimer = 20000;
@@ -1512,33 +1729,34 @@ public:
         {
             me->RemoveAllAuras();
 
-            if (!instance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
+            if (!pInstance->GetData(TYPE_SARTHARION_EVENT) == IN_PROGRESS)
                 me->SummonCreature(NPC_TWILIGHT_WHELP, 0.0f, 0.0f, 0.0f, 0.0f, TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, 60000);
             else
                 me->SummonCreature(NPC_SHARTHARION_TWILIGHT_WHELP, 0.0f, 0.0f, 0.0f, 0.0f, TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN, 60000);
             me->DealDamage(me, me->GetHealth());
         }
 
-        void JustSummoned(Creature* who)
+        void JustSummoned(Creature* pWho)
         {
-            who->SetInCombatWithZone();
+            pWho->SetInCombatWithZone();
+            pWho->setFaction(me->getFaction());
         }
 
         void UpdateAI(const uint32 uiDiff)
         {
             if (m_uiHatchEggTimer <= uiDiff)
             {
-                Creature* Tenebron = instance->instance->GetCreature(instance->GetData64(DATA_TENEBRON));
-                if (Tenebron)
-                    (CAST_AI(mob_tenebron::mob_tenebronAI, Tenebron->AI()))->m_bHasPortalOpen = false;
+                Creature* Tenebron = pInstance->instance->GetCreature(pInstance->GetData64(DATA_TENEBRON));
+                if(Tenebron)
+                    Tenebron->AI()->DoAction(ACTION_CLOSE_PORTAL);
                 SpawnWhelps();
             }
             else
                 m_uiHatchEggTimer -= uiDiff;
         }
 
-        void AttackStart(Unit* /*who*/) {}
-        void MoveInLineOfSight(Unit* /*who*/) {}
+        void AttackStart(Unit* /*pWho*/) {}
+        void MoveInLineOfSight(Unit* /*pWho*/) {}
     };
 
 };
@@ -1551,47 +1769,99 @@ class npc_flame_tsunami : public CreatureScript
 public:
     npc_flame_tsunami() : CreatureScript("npc_flame_tsunami") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new npc_flame_tsunamiAI(creature);
+        return new npc_flame_tsunamiAI(pCreature);
     }
 
     struct npc_flame_tsunamiAI : public ScriptedAI
     {
-        npc_flame_tsunamiAI(Creature* creature) : ScriptedAI(creature)
+        npc_flame_tsunamiAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
             me->SetDisplayId(11686);
+            me->SetCanFly(true);
             me->AddAura(SPELL_FLAME_TSUNAMI, me);
+            DoCast(me,SPELL_FLAME_TSUNAMI_COMBINE_AURA,true);
+            fwAction = ACTION_MOVE_NONE;
+            me->SetSpeed(MOVE_FLIGHT,2.0f,true);
+
         }
 
-        uint32 Tsunami_Timer;
-        uint32 TsunamiBuff_timer;
+        //uint32 Tsunami_Timer;
+        //uint32 TsunamiBuff_timer;
         uint32 entry;
 
+        uint32 move_Timer;
+        FlameWallAction fwAction;
+
         void Reset()
         {
             me->SetReactState(REACT_PASSIVE);
-            Tsunami_Timer = 100;
+            //Tsunami_Timer = 100;
             me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
             me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
-            TsunamiBuff_timer = 1000;
+            //TsunamiBuff_timer = 1000;
             entry = 0;
         }
 
-        void UpdateAI(const uint32 diff)
+        void DoAction(const int32 action)
         {
-            if (Tsunami_Timer <= diff)
+            switch(action)
             {
-                DoCast(me, SPELL_FLAME_TSUNAMI_DMG_AURA);
-                Tsunami_Timer = 500;
-            }else Tsunami_Timer -= diff;
+            case ACTION_MOVE_RIGHT_1:
+            case ACTION_MOVE_RIGHT_2:
+            case ACTION_MOVE_RIGHT_3:
+            case ACTION_MOVE_LEFT_1:
+            case ACTION_MOVE_LEFT_2:
+                fwAction = (FlameWallAction)action;
+                move_Timer = 4000;
+                break;
+            }
+        }
 
-            if (TsunamiBuff_timer <= diff)
+        void UpdateAI(const uint32 diff)
+        {
+            if(fwAction != ACTION_MOVE_NONE)
             {
-                if (Unit* LavaBlaze = GetClosestCreatureWithEntry(me, NPC_LAVA_BLAZE, 10.0f, true))
-                    LavaBlaze->CastSpell(LavaBlaze, SPELL_FLAME_TSUNAMI_BUFF, true);
-                TsunamiBuff_timer = 1000;
-            }else TsunamiBuff_timer -= diff;
+                if(move_Timer <= diff)
+                {
+                    switch(fwAction)
+                    {
+                    case ACTION_MOVE_RIGHT_1:
+                        me->GetMotionMaster()->MovePoint(0, FlameRight1Direction.GetPositionX(), FlameRight1Direction.GetPositionY(), FlameRight1Direction.GetPositionZ());
+                        break;
+                    case ACTION_MOVE_RIGHT_2:
+                        me->GetMotionMaster()->MovePoint(0, FlameRight2Direction.GetPositionX(), FlameRight2Direction.GetPositionY(), FlameRight2Direction.GetPositionZ());
+                        break;
+                    case ACTION_MOVE_RIGHT_3:
+                        me->GetMotionMaster()->MovePoint(0, FlameRight3Direction.GetPositionX(), FlameRight3Direction.GetPositionY(), FlameRight3Direction.GetPositionZ());
+                        break;
+                    case ACTION_MOVE_LEFT_1:
+                        me->GetMotionMaster()->MovePoint(0, FlameLeft1Direction.GetPositionX(), FlameLeft1Direction.GetPositionY(), FlameLeft1Direction.GetPositionZ());
+                        break;
+                    case ACTION_MOVE_LEFT_2:
+                        me->GetMotionMaster()->MovePoint(0, FlameLeft2Direction.GetPositionX(), FlameLeft2Direction.GetPositionY(), FlameLeft2Direction.GetPositionZ());
+                        break;
+                    }
+                    move_Timer = 20000;
+                }else move_Timer -= diff;
+            }
+
+            //if(!me->HasAura(SPELL_FLAME_TSUNAMI_DMG_AURA))
+            //    DoCast(me,SPELL_FLAME_TSUNAMI_DMG_AURA,true);
+
+            //if (Tsunami_Timer <= diff)
+            //{
+            //    DoCast(me,SPELL_FLAME_TSUNAMI_DMG_AURA);
+            //    Tsunami_Timer = 500;
+            //}else Tsunami_Timer -= diff;
+
+            //if(TsunamiBuff_timer <= diff)
+            //{
+            //    if (Unit* LavaBlaze = GetClosestCreatureWithEntry(me,NPC_LAVA_BLAZE, 10.0f, true))
+            //        LavaBlaze->CastSpell(LavaBlaze, SPELL_FLAME_TSUNAMI_BUFF, true);
+            //    TsunamiBuff_timer = 1000;
+            //}else TsunamiBuff_timer -= diff;
         }
     };
 
@@ -1603,40 +1873,48 @@ class npc_twilight_fissure : public CreatureScript
 public:
     npc_twilight_fissure() : CreatureScript("npc_twilight_fissure") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new npc_twilight_fissureAI(creature);
+        return new npc_twilight_fissureAI(pCreature);
     }
 
     struct npc_twilight_fissureAI : public Scripted_NoMovementAI
     {
-        npc_twilight_fissureAI(Creature* creature) : Scripted_NoMovementAI(creature)
+        npc_twilight_fissureAI(Creature* pCreature) : Scripted_NoMovementAI(pCreature)
         {
             Reset();
         }
 
         uint32 VoidBlast_Timer;
+        bool casted;
 
         void Reset()
         {
             me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE);
             me->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
-            me->AddAura( 46265, me ); // Wrong, can't find proper visual
-            me->AddAura( 69422, me );
+            // Not needed anymore
+            //me->AddAura( 46265 , me ); // Wrong, can't find proper visual
+            //me->AddAura( 69422 , me );
             VoidBlast_Timer = 5000;
+            casted = false;
         }
 
         void UpdateAI(const uint32 diff)
         {
             if (VoidBlast_Timer <= diff)
             {
-                DoCastAOE(RAID_MODE(SPELL_VOID_BLAST, SPELL_VOID_BLAST_H));
-                ////twilight realm
-                //DoCast(me->getVictim(), 57620, true);
-                //DoCast(me->getVictim(), 57874, true);
-                VoidBlast_Timer = 9000;
-                me->RemoveAllAuras();
-                me->Kill(me);
+                if(casted)
+                {
+                    me->RemoveAllAuras();
+                    me->Kill(me);
+                    VoidBlast_Timer = 9000;
+                }else
+                {
+                    DoCastAOE(RAID_MODE(SPELL_VOID_BLAST, SPELL_VOID_BLAST_H));
+                    VoidBlast_Timer = 1000;
+
+                    casted = true;
+                }
             } else VoidBlast_Timer -= diff;
         }
     };
@@ -1652,14 +1930,14 @@ class mob_twilight_whelp : public CreatureScript
 public:
     mob_twilight_whelp() : CreatureScript("mob_twilight_whelp") { }
 
-    CreatureAI* GetAI(Creature* creature) const
+    CreatureAI* GetAI(Creature* pCreature) const
     {
-        return new mob_twilight_whelpAI(creature);
+        return new mob_twilight_whelpAI(pCreature);
     }
 
     struct mob_twilight_whelpAI : public ScriptedAI
     {
-        mob_twilight_whelpAI(Creature* creature) : ScriptedAI(creature)
+        mob_twilight_whelpAI(Creature* pCreature) : ScriptedAI(pCreature)
         {
             Reset();
         }
@@ -1683,7 +1961,7 @@ public:
             if (m_uiFadeArmorTimer <= uiDiff)
             {
                 DoCast(me->getVictim(), SPELL_FADE_ARMOR);
-                m_uiFadeArmorTimer = urand(5000, 10000);
+                m_uiFadeArmorTimer = urand(5000,10000);
             }
             else
                 m_uiFadeArmorTimer -= uiDiff;
@@ -1694,66 +1972,28 @@ public:
 
 };
 
-class achievement_twilight_assist : public AchievementCriteriaScript
+class go_twilight_portal : public GameObjectScript
 {
-    public:
-        achievement_twilight_assist() : AchievementCriteriaScript("achievement_twilight_assist")
-        {
-        }
-
-        bool OnCheck(Player* /*player*/, Unit* target)
-        {
-            if (!target)
-                return false;
-
-            if (Creature* Sartharion = target->ToCreature())
-                if (Sartharion->AI()->GetData(TWILIGHT_ACHIEVEMENTS) >= 1)
-                    return true;
-
-            return false;
-        }
-};
-
-class achievement_twilight_duo : public AchievementCriteriaScript
-{
-    public:
-        achievement_twilight_duo() : AchievementCriteriaScript("achievement_twilight_duo")
-        {
-        }
-
-        bool OnCheck(Player* /*player*/, Unit* target)
-        {
-            if (!target)
-                return false;
-
-            if (Creature* Sartharion = target->ToCreature())
-                if (Sartharion->AI()->GetData(TWILIGHT_ACHIEVEMENTS) >= 2)
-                    return true;
-
-            return false;
-        }
-};
+public:
+    go_twilight_portal() : GameObjectScript("go_twilight_portal") { }
 
-class achievement_twilight_zone : public AchievementCriteriaScript
-{
-    public:
-        achievement_twilight_zone() : AchievementCriteriaScript("achievement_twilight_zone")
+    bool OnGossipHello(Player *pPlayer, GameObject * /*pGO*/)
+    {
+        if(pPlayer->HasAuraEffect(SPELL_TWILIGHT_SHIFT_ENTER,0))
         {
-        }
-
-        bool OnCheck(Player* /*player*/, Unit* target)
+            pPlayer->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT_ENTER);
+            pPlayer->RemoveAurasDueToSpell(SPELL_TWILIGHT_SHIFT);
+            pPlayer->CastSpell(pPlayer,SPELL_TWILIGHT_RESIDUE,true);
+        }else
         {
-            if (!target)
-                return false;
+            pPlayer->RemoveAurasDueToSpell(SPELL_TWILIGHT_TORMENT_SHADOW);
+            pPlayer->RemoveAurasDueToSpell(SPELL_TWILIGHT_TORMENT_SHAFIR);
 
-            if (Creature* Sartharion = target->ToCreature())
-                if (Sartharion->AI()->GetData(TWILIGHT_ACHIEVEMENTS) == 3)
-                    return true;
-
-            return false;
+            pPlayer->CastSpell(pPlayer,SPELL_TWILIGHT_SHIFT_ENTER,true);
         }
+        return false;
+    }
 };
-
 void AddSC_boss_sartharion()
 {
     new boss_sartharion();
@@ -1766,7 +2006,5 @@ void AddSC_boss_sartharion()
     new npc_flame_tsunami();
     new npc_twilight_fissure();
     new mob_twilight_whelp();
-    new achievement_twilight_assist();
-    new achievement_twilight_duo();
-    new achievement_twilight_zone();
+    new go_twilight_portal();
 }
diff --git a/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/instance_obsidian_sanctum.cpp b/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/instance_obsidian_sanctum.cpp
index 91d6769..9c334f9 100644
--- a/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/instance_obsidian_sanctum.cpp
+++ b/src/server/scripts/Northrend/ChamberOfAspects/ObsidianSanctum/instance_obsidian_sanctum.cpp
@@ -18,7 +18,7 @@
 #include "ScriptPCH.h"
 #include "obsidian_sanctum.h"
 
-#define MAX_ENCOUNTER     1
+#define MAX_ENCOUNTER     4
 
 /* Obsidian Sanctum encounters:
 0 - Sartharion
@@ -29,14 +29,14 @@ class instance_obsidian_sanctum : public InstanceMapScript
 public:
     instance_obsidian_sanctum() : InstanceMapScript("instance_obsidian_sanctum", 615) { }
 
-    InstanceScript* GetInstanceScript(InstanceMap* map) const
+    InstanceScript* GetInstanceScript(InstanceMap* pMap) const
     {
-        return new instance_obsidian_sanctum_InstanceMapScript(map);
+        return new instance_obsidian_sanctum_InstanceMapScript(pMap);
     }
 
     struct instance_obsidian_sanctum_InstanceMapScript : public InstanceScript
     {
-        instance_obsidian_sanctum_InstanceMapScript(Map* map) : InstanceScript(map) {}
+        instance_obsidian_sanctum_InstanceMapScript(Map* pMap) : InstanceScript(pMap) {}
 
         uint32 m_auiEncounter[MAX_ENCOUNTER];
         uint64 m_uiSartharionGUID;
@@ -73,7 +73,7 @@ public:
 
         void OnCreatureCreate(Creature* creature)
         {
-            switch (creature->GetEntry())
+            switch(creature->GetEntry())
             {
                 case NPC_SARTHARION:
                     m_uiSartharionGUID = creature->GetGUID();
@@ -97,33 +97,49 @@ public:
 
         void SetData(uint32 uiType, uint32 uiData)
         {
-            if (uiType == TYPE_SARTHARION_EVENT)
-                m_auiEncounter[0] = uiData;
-            else if (uiType == TYPE_TENEBRON_PREKILLED)
+            switch(uiType)
+            {
+            case TYPE_SARTHARION_EVENT:
+                if(m_auiEncounter[0] != DONE)
+                    m_auiEncounter[0] = uiData;
+                break;
+            case TYPE_TENEBRON_PREKILLED:
+                m_auiEncounter[1] = DONE;
                 m_bTenebronKilled = true;
-            else if (uiType == TYPE_SHADRON_PREKILLED)
+                break;
+            case TYPE_SHADRON_PREKILLED:
+                m_auiEncounter[2] = DONE;
                 m_bShadronKilled = true;
-            else if (uiType == TYPE_VESPERON_PREKILLED)
+                break;
+            case TYPE_VESPERON_PREKILLED:
+                m_auiEncounter[3] = DONE;
                 m_bVesperonKilled = true;
+                break;
+            }
+
+            if(uiData == DONE)
+                SaveToDB();
         }
 
         uint32 GetData(uint32 uiType)
         {
-            if (uiType == TYPE_SARTHARION_EVENT)
+            switch(uiType)
+            {
+            case TYPE_SARTHARION_EVENT:
                 return m_auiEncounter[0];
-            else if (uiType == TYPE_TENEBRON_PREKILLED)
-                return m_bTenebronKilled;
-            else if (uiType == TYPE_SHADRON_PREKILLED)
-                return m_bShadronKilled;
-            else if (uiType == TYPE_VESPERON_PREKILLED)
-                return m_bVesperonKilled;
-
+            case TYPE_TENEBRON_PREKILLED:
+                return m_bTenebronKilled && m_auiEncounter[1] == DONE;
+            case TYPE_SHADRON_PREKILLED:
+                return m_bShadronKilled && m_auiEncounter[2] == DONE;
+            case TYPE_VESPERON_PREKILLED:
+                return m_bVesperonKilled && m_auiEncounter[3] == DONE;
+            }
             return 0;
         }
 
         uint64 GetData64(uint32 uiData)
         {
-            switch (uiData)
+            switch(uiData)
             {
                 case DATA_SARTHARION:
                     return m_uiSartharionGUID;
@@ -136,6 +152,42 @@ public:
             }
             return 0;
         }
+
+        std::string GetSaveData()
+        {
+            std::ostringstream saveStream;
+            saveStream << "O S ";
+            for(int i = 0; i < MAX_ENCOUNTER; ++i)
+                saveStream << m_auiEncounter[i] << " ";
+
+            return saveStream.str();
+        }
+
+        void Load(const char * data)
+        {
+            std::istringstream loadStream(data);
+            char dataHead1, dataHead2;
+            loadStream >> dataHead1 >> dataHead2;
+            std::string newdata = loadStream.str();
+
+            uint32 buff;
+            if(dataHead1 == 'O' && dataHead2 == 'S')
+            {
+                for(int i = 0; i < MAX_ENCOUNTER; ++i)
+                {
+                    loadStream >> buff;
+                    m_auiEncounter[i]= buff;
+                }
+            }
+
+            m_bTenebronKilled = (m_auiEncounter[1] == DONE);
+            m_bShadronKilled = (m_auiEncounter[2] == DONE);
+            m_bVesperonKilled = (m_auiEncounter[3] == DONE);
+
+            for(int i = 0; i < MAX_ENCOUNTER; ++i)
+                if(m_auiEncounter[i] != DONE)
+                    m_auiEncounter[i] = NOT_STARTED;
+        }
     };
 
 };
-- 
1.7.8.msysgit.0

